/* gee.vapi generated by balac, do not modify. */

namespace Bala {
	[CCode (cheader_filename = "balagee.h")]
	public class ArrayList<G> : Bala.List<G> {
		public ArrayList (GLib.EqualFunc<G> equal_func = GLib.direct_equal);
		public override bool add (G item);
		public override void clear ();
		public override bool contains (G item);
		public override G @get (int index);
		public override GLib.Type get_element_type ();
		public override int index_of (G item);
		public override void insert (int index, G item);
		public override Bala.Iterator<G> iterator ();
		public override bool remove (G item);
		public override G remove_at (int index);
		public override void @set (int index, G item);
		public GLib.EqualFunc<G> equal_func { set; }
		public override int size { get; }
	}
	[CCode (cheader_filename = "balagee.h")]
	public abstract class Collection<G> : Bala.Iterable<G> {
		protected Collection ();
		public abstract bool add (G item);
		public virtual bool add_all (Bala.Collection<G> collection);
		public abstract void clear ();
		public abstract bool contains (G item);
		public abstract bool remove (G item);
		public virtual G[] to_array ();
		public virtual bool is_empty { get; }
		public abstract int size { get; }
	}
	[CCode (cheader_filename = "balagee.h")]
	public class HashMap<K,V> : Bala.Map<K,V> {
		public HashMap (GLib.HashFunc<K> key_hash_func = GLib.direct_hash, GLib.EqualFunc<K> key_equal_func = GLib.direct_equal, GLib.EqualFunc<V> value_equal_func = GLib.direct_equal);
		public override void clear ();
		public override bool contains (K key);
		public override V @get (K key);
		public override Bala.Set<K> get_keys ();
		public override Bala.Collection<V> get_values ();
		public override Bala.MapIterator<K,V> map_iterator ();
		public override bool remove (K key);
		public override void @set (K key, V value);
		public GLib.EqualFunc<K> key_equal_func { set; }
		public GLib.HashFunc<K> key_hash_func { set; }
		public override int size { get; }
		public GLib.EqualFunc<V> value_equal_func { set; }
	}
	[CCode (cheader_filename = "balagee.h")]
	public class HashSet<G> : Bala.Set<G> {
		public HashSet (GLib.HashFunc<G> hash_func = GLib.direct_hash, GLib.EqualFunc<G> equal_func = GLib.direct_equal);
		public override bool add (G key);
		public override void clear ();
		public override bool contains (G key);
		public override GLib.Type get_element_type ();
		public override Bala.Iterator<G> iterator ();
		public override bool remove (G key);
		public GLib.EqualFunc<G> equal_func { set; }
		public GLib.HashFunc<G> hash_func { set; }
		public override int size { get; }
	}
	[CCode (cheader_filename = "balagee.h")]
	public abstract class Iterable<G> {
		protected Iterable ();
		public abstract GLib.Type get_element_type ();
		public abstract Bala.Iterator<G> iterator ();
	}
	[CCode (cheader_filename = "balagee.h")]
	public abstract class Iterator<G> {
		protected Iterator ();
		public abstract G @get ();
		public abstract bool has_next ();
		public abstract bool next ();
		public abstract void remove ();
		public abstract bool valid { get; }
	}
	[CCode (cheader_filename = "balagee.h")]
	public abstract class List<G> : Bala.Collection<G> {
		protected List ();
		public virtual G first ();
		public abstract G @get (int index);
		public abstract int index_of (G item);
		public abstract void insert (int index, G item);
		public virtual void insert_all (int index, Bala.Collection<G> collection);
		public virtual G last ();
		public abstract G remove_at (int index);
		public abstract void @set (int index, G item);
		public virtual void sort (owned GLib.CompareDataFunc<G> compare_func);
	}
	[CCode (cheader_filename = "balagee.h")]
	public abstract class Map<K,V> {
		protected Map ();
		public abstract void clear ();
		public abstract bool contains (K key);
		public abstract V @get (K key);
		public abstract Bala.Set<K> get_keys ();
		public abstract Bala.Collection<V> get_values ();
		public abstract Bala.MapIterator<K,V> map_iterator ();
		public abstract bool remove (K key);
		public abstract void @set (K key, V value);
		public abstract int size { get; }
	}
	[CCode (cheader_filename = "balagee.h")]
	public abstract class MapIterator<K,V> {
		protected MapIterator ();
		public abstract K get_key ();
		public abstract V get_value ();
		public abstract bool next ();
	}
	[CCode (cheader_filename = "balagee.h")]
	public abstract class Set<G> : Bala.Collection<G> {
		protected Set ();
	}
}
