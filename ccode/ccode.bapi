/* ccode.bapi generated by balac, do not modify. */

namespace Bala {
	[CCode (cheader_filename = "balaccode.h")]
	public class CCodeAssignment : Bala.CCodeExpression {
		public CCodeAssignment (Bala.CCodeExpression l, Bala.CCodeExpression r, Bala.CCodeAssignmentOperator op = CCodeAssignmentOperator.SIMPLE);
		public override void write (Bala.CCodeWriter writer);
		public override void write_inner (Bala.CCodeWriter writer);
		public Bala.CCodeExpression left { get; set; }
		public Bala.CCodeAssignmentOperator operator { get; set; }
		public Bala.CCodeExpression right { get; set; }
	}
	[CCode (cheader_filename = "balaccode.h")]
	public class CCodeBinaryExpression : Bala.CCodeExpression {
		public CCodeBinaryExpression (Bala.CCodeBinaryOperator op, Bala.CCodeExpression l, Bala.CCodeExpression r);
		public override void write (Bala.CCodeWriter writer);
		public override void write_inner (Bala.CCodeWriter writer);
		public Bala.CCodeExpression left { get; set; }
		public Bala.CCodeBinaryOperator operator { get; set; }
		public Bala.CCodeExpression right { get; set; }
	}
	[CCode (cheader_filename = "balaccode.h")]
	public class CCodeBlock : Bala.CCodeStatement {
		public CCodeBlock ();
		public void add_statement (Bala.CCodeNode statement);
		public void prepend_statement (Bala.CCodeNode statement);
		public override void write (Bala.CCodeWriter writer);
		public bool suppress_newline { get; set; }
	}
	[CCode (cheader_filename = "balaccode.h")]
	public class CCodeBreakStatement : Bala.CCodeStatement {
		public CCodeBreakStatement ();
		public override void write (Bala.CCodeWriter writer);
	}
	[CCode (cheader_filename = "balaccode.h")]
	public class CCodeCaseStatement : Bala.CCodeStatement {
		public CCodeCaseStatement (Bala.CCodeExpression expression);
		public override void write (Bala.CCodeWriter writer);
		public Bala.CCodeExpression expression { get; set; }
	}
	[CCode (cheader_filename = "balaccode.h")]
	public class CCodeCastExpression : Bala.CCodeExpression {
		public CCodeCastExpression (Bala.CCodeExpression expr, string type);
		public override void write (Bala.CCodeWriter writer);
		public override void write_inner (Bala.CCodeWriter writer);
		public Bala.CCodeExpression inner { get; set; }
		public string type_name { get; set; }
	}
	[CCode (cheader_filename = "balaccode.h")]
	public class CCodeCommaExpression : Bala.CCodeExpression {
		public CCodeCommaExpression ();
		public void append_expression (Bala.CCodeExpression expr);
		public Bala.List<Bala.CCodeExpression> get_inner ();
		public void set_expression (int index, Bala.CCodeExpression expr);
		public override void write (Bala.CCodeWriter writer);
	}
	[CCode (cheader_filename = "balaccode.h")]
	public class CCodeComment : Bala.CCodeNode {
		public CCodeComment (string _text);
		public override void write (Bala.CCodeWriter writer);
		public string text { get; set; }
	}
	[CCode (cheader_filename = "balaccode.h")]
	public class CCodeConditionalExpression : Bala.CCodeExpression {
		public CCodeConditionalExpression (Bala.CCodeExpression cond, Bala.CCodeExpression true_expr, Bala.CCodeExpression false_expr);
		public override void write (Bala.CCodeWriter writer);
		public override void write_inner (Bala.CCodeWriter writer);
		public Bala.CCodeExpression condition { get; set; }
		public Bala.CCodeExpression false_expression { get; set; }
		public Bala.CCodeExpression true_expression { get; set; }
	}
	[CCode (cheader_filename = "balaccode.h")]
	public class CCodeConstant : Bala.CCodeExpression {
		public CCodeConstant (global::string _name);
		public CCodeConstant.string (global::string _name);
		public override void write (Bala.CCodeWriter writer);
		public global::string name { get; set; }
	}
	[CCode (cheader_filename = "balaccode.h")]
	public class CCodeContinueStatement : Bala.CCodeStatement {
		public CCodeContinueStatement ();
		public override void write (Bala.CCodeWriter writer);
	}
	[CCode (cheader_filename = "balaccode.h")]
	public class CCodeDeclaration : Bala.CCodeStatement {
		public CCodeDeclaration (string type_name);
		public void add_declarator (Bala.CCodeDeclarator decl);
		public override void write (Bala.CCodeWriter writer);
		public override void write_declaration (Bala.CCodeWriter writer);
		public string type_name { get; set; }
	}
	[CCode (cheader_filename = "balaccode.h")]
	public abstract class CCodeDeclarator : Bala.CCodeNode {
		protected CCodeDeclarator ();
		public virtual void write_initialization (Bala.CCodeWriter writer);
	}
	[CCode (cheader_filename = "balaccode.h")]
	public class CCodeDeclaratorSuffix {
		public CCodeDeclaratorSuffix ();
		public CCodeDeclaratorSuffix.with_array (Bala.CCodeExpression? array_length = null);
		public CCodeDeclaratorSuffix.with_multi_array (Bala.List<Bala.CCodeExpression>? array_length = null);
		public void write (Bala.CCodeWriter writer);
	}
	[CCode (cheader_filename = "balaccode.h")]
	public class CCodeDefine : Bala.CCodeNode {
		public CCodeDefine (string name, string? value = null);
		public CCodeDefine.with_expression (string name, Bala.CCodeExpression expression);
		public override void write (Bala.CCodeWriter writer);
		public string name { get; set; }
		public string? value { get; set; }
		public Bala.CCodeExpression? value_expression { get; set; }
	}
	[CCode (cheader_filename = "balaccode.h")]
	public class CCodeDoStatement : Bala.CCodeStatement {
		public CCodeDoStatement (Bala.CCodeStatement stmt, Bala.CCodeExpression cond);
		public override void write (Bala.CCodeWriter writer);
		public Bala.CCodeStatement body { get; set; }
		public Bala.CCodeExpression condition { get; set; }
	}
	[CCode (cheader_filename = "balaccode.h")]
	public class CCodeElementAccess : Bala.CCodeExpression {
		public CCodeElementAccess (Bala.CCodeExpression cont, Bala.CCodeExpression i);
		public CCodeElementAccess.with_indices (Bala.CCodeExpression cont, Bala.List<Bala.CCodeExpression> i);
		public override void write (Bala.CCodeWriter writer);
		public Bala.CCodeExpression container { get; set; }
		public Bala.List<Bala.CCodeExpression> indices { get; set; }
	}
	[CCode (cheader_filename = "balaccode.h")]
	public class CCodeEmptyStatement : Bala.CCodeStatement {
		public CCodeEmptyStatement ();
		public override void write (Bala.CCodeWriter writer);
	}
	[CCode (cheader_filename = "balaccode.h")]
	public class CCodeEnum : Bala.CCodeNode {
		public CCodeEnum (string? name = null);
		public void add_value (Bala.CCodeEnumValue value);
		public override void write (Bala.CCodeWriter writer);
		public string name { get; set; }
	}
	[CCode (cheader_filename = "balaccode.h")]
	public class CCodeEnumValue : Bala.CCodeNode {
		public CCodeEnumValue (string name, Bala.CCodeExpression? value = null);
		public override void write (Bala.CCodeWriter writer);
		public string name { get; set; }
		public Bala.CCodeExpression? value { get; set; }
	}
	[CCode (cheader_filename = "balaccode.h")]
	public abstract class CCodeExpression : Bala.CCodeNode {
		protected CCodeExpression ();
		public virtual void write_inner (Bala.CCodeWriter writer);
	}
	[CCode (cheader_filename = "balaccode.h")]
	public class CCodeExpressionStatement : Bala.CCodeStatement {
		public CCodeExpressionStatement (Bala.CCodeExpression expr);
		public override void write (Bala.CCodeWriter writer);
		public Bala.CCodeExpression expression { get; set; }
	}
	[CCode (cheader_filename = "balaccode.h")]
	public class CCodeFile {
		public CCodeFile (Bala.SourceFile? source_file = null);
		public void add_comment (Bala.CCodeComment comment);
		public void add_constant_declaration (Bala.CCodeNode node);
		public bool add_declaration (string name);
		public void add_feature_test_macro (string feature_test_macro);
		public void add_function (Bala.CCodeFunction func);
		public void add_function_declaration (Bala.CCodeFunction func);
		public void add_include (string filename, bool local = false);
		public void add_type_declaration (Bala.CCodeNode node);
		public void add_type_definition (Bala.CCodeNode node);
		public void add_type_member_declaration (Bala.CCodeNode node);
		public void add_type_member_definition (Bala.CCodeNode node);
		public Bala.List<string> get_symbols ();
		public bool store (string filename, string? source_filename, bool write_version, bool line_directives, string? begin_decls = null, string? end_decls = null);
		public weak Bala.SourceFile? file { get; private set; }
		public bool is_header { get; set; }
	}
	[CCode (cheader_filename = "balaccode.h")]
	public class CCodeForStatement : Bala.CCodeStatement {
		public CCodeForStatement (Bala.CCodeExpression? condition, Bala.CCodeStatement? body = null);
		public void add_initializer (Bala.CCodeExpression expr);
		public void add_iterator (Bala.CCodeExpression expr);
		public override void write (Bala.CCodeWriter writer);
		public Bala.CCodeStatement body { get; set; }
		public Bala.CCodeExpression? condition { get; set; }
	}
	[CCode (cheader_filename = "balaccode.h")]
	public class CCodeFragment : Bala.CCodeNode {
		public CCodeFragment ();
		public void append (Bala.CCodeNode node);
		public Bala.List<Bala.CCodeNode> get_children ();
		public override void write (Bala.CCodeWriter writer);
		public override void write_combined (Bala.CCodeWriter writer);
		public override void write_declaration (Bala.CCodeWriter writer);
	}
	[CCode (cheader_filename = "balaccode.h")]
	public class CCodeFunction : Bala.CCodeNode {
		public CCodeFunction (string name, string return_type = "void");
		public void add_assignment (Bala.CCodeExpression left, Bala.CCodeExpression right);
		public void add_break ();
		public void add_case (Bala.CCodeExpression expression);
		public void add_continue ();
		public void add_declaration (string type_name, Bala.CCodeDeclarator declarator, Bala.CCodeModifiers modifiers = 0);
		public void add_default ();
		public void add_else ();
		public void add_expression (Bala.CCodeExpression expression);
		public void add_goto (string target);
		public void add_label (string label);
		public void add_parameter (Bala.CCodeParameter param);
		public void add_return (Bala.CCodeExpression? expression = null);
		public void add_statement (Bala.CCodeNode stmt);
		public void close ();
		public Bala.CCodeFunction copy ();
		public void else_if (Bala.CCodeExpression condition);
		public Bala.CCodeParameter get_parameter (int position);
		public int get_parameter_count ();
		public void insert_parameter (int position, Bala.CCodeParameter param);
		public void open_block ();
		public void open_for (Bala.CCodeExpression? initializer, Bala.CCodeExpression condition, Bala.CCodeExpression? iterator);
		public void open_if (Bala.CCodeExpression condition);
		public void open_switch (Bala.CCodeExpression expression);
		public void open_while (Bala.CCodeExpression condition);
		public override void write (Bala.CCodeWriter writer);
		public Bala.CCodeBlock block { get; set; }
		public Bala.CCodeBlock current_block { get; set; }
		public Bala.CCodeLineDirective current_line { get; set; }
		public bool is_declaration { get; set; }
		public string name { get; set; }
		public string return_type { get; set; }
	}
	[CCode (cheader_filename = "balaccode.h")]
	public class CCodeFunctionCall : Bala.CCodeExpression {
		public CCodeFunctionCall (Bala.CCodeExpression? call = null);
		public void add_argument (Bala.CCodeExpression expr);
		public Bala.List<Bala.CCodeExpression> get_arguments ();
		public void insert_argument (int index, Bala.CCodeExpression expr);
		public override void write (Bala.CCodeWriter writer);
		public Bala.CCodeExpression? call { get; set; }
	}
	[CCode (cheader_filename = "balaccode.h")]
	public class CCodeFunctionDeclarator : Bala.CCodeDeclarator {
		public CCodeFunctionDeclarator (string name);
		public void add_parameter (Bala.CCodeParameter param);
		public override void write (Bala.CCodeWriter writer);
		public override void write_declaration (Bala.CCodeWriter writer);
		public string name { get; set; }
	}
	[CCode (cheader_filename = "balaccode.h")]
	public class CCodeGGnucSection : Bala.CCodeFragment {
		public CCodeGGnucSection (Bala.GGnucSectionType t);
		public override void write (Bala.CCodeWriter writer);
		public override void write_declaration (Bala.CCodeWriter writer);
		public Bala.GGnucSectionType section_type { get; set; }
	}
	[CCode (cheader_filename = "balaccode.h")]
	public class CCodeGotoStatement : Bala.CCodeStatement {
		public CCodeGotoStatement (string name);
		public override void write (Bala.CCodeWriter writer);
		public string name { get; set; }
	}
	[CCode (cheader_filename = "balaccode.h")]
	public class CCodeIdentifier : Bala.CCodeExpression {
		public CCodeIdentifier (string _name);
		public override void write (Bala.CCodeWriter writer);
		public string name { get; set; }
	}
	[CCode (cheader_filename = "balaccode.h")]
	public class CCodeIfSection : Bala.CCodeFragment {
		public CCodeIfSection (string expr);
		public override void write (Bala.CCodeWriter writer);
		public override void write_declaration (Bala.CCodeWriter writer);
		public string expression { get; set; }
	}
	[CCode (cheader_filename = "balaccode.h")]
	public class CCodeIfStatement : Bala.CCodeStatement {
		public CCodeIfStatement (Bala.CCodeExpression cond, Bala.CCodeStatement true_stmt, Bala.CCodeStatement? false_stmt = null);
		public override void write (Bala.CCodeWriter writer);
		public Bala.CCodeExpression condition { get; set; }
		public bool else_if { get; set; }
		public Bala.CCodeStatement? false_statement { get; set; }
		public Bala.CCodeStatement true_statement { get; set; }
	}
	[CCode (cheader_filename = "balaccode.h")]
	public class CCodeIncludeDirective : Bala.CCodeNode {
		public CCodeIncludeDirective (string _filename, bool _local = false);
		public override void write (Bala.CCodeWriter writer);
		public string filename { get; set; }
		public bool local { get; set; }
	}
	[CCode (cheader_filename = "balaccode.h")]
	public class CCodeInitializerList : Bala.CCodeExpression {
		public CCodeInitializerList ();
		public void append (Bala.CCodeExpression expr);
		public override void write (Bala.CCodeWriter writer);
	}
	[CCode (cheader_filename = "balaccode.h")]
	public class CCodeInvalidExpression : Bala.CCodeExpression {
		public CCodeInvalidExpression ();
		public override void write (Bala.CCodeWriter writer);
	}
	[CCode (cheader_filename = "balaccode.h")]
	public class CCodeLabel : Bala.CCodeStatement {
		public CCodeLabel (string name);
		public override void write (Bala.CCodeWriter writer);
		public string name { get; set; }
	}
	[CCode (cheader_filename = "balaccode.h")]
	public class CCodeLineDirective : Bala.CCodeNode {
		public CCodeLineDirective (string _filename, int _line);
		public override void write (Bala.CCodeWriter writer);
		public string filename { get; set; }
		public int line_number { get; set; }
	}
	[CCode (cheader_filename = "balaccode.h")]
	public class CCodeMacroReplacement : Bala.CCodeDefine {
		public CCodeMacroReplacement (string name, string replacement);
		public CCodeMacroReplacement.with_expression (string name, Bala.CCodeExpression replacement_expression);
	}
	[CCode (cheader_filename = "balaccode.h")]
	public class CCodeMemberAccess : Bala.CCodeExpression {
		public CCodeMemberAccess (Bala.CCodeExpression container, string member, bool pointer = false);
		public CCodeMemberAccess.pointer (Bala.CCodeExpression container, string member);
		public override void write (Bala.CCodeWriter writer);
		public Bala.CCodeExpression inner { get; set; }
		public bool is_pointer { get; set; }
		public string member_name { get; set; }
	}
	[CCode (cheader_filename = "balaccode.h")]
	public class CCodeNewline : Bala.CCodeNode {
		public CCodeNewline ();
		public override void write (Bala.CCodeWriter writer);
	}
	[CCode (cheader_filename = "balaccode.h")]
	public abstract class CCodeNode {
		protected CCodeNode ();
		public abstract void write (Bala.CCodeWriter writer);
		public virtual void write_combined (Bala.CCodeWriter writer);
		public virtual void write_declaration (Bala.CCodeWriter writer);
		public Bala.CCodeLineDirective line { get; set; }
		public Bala.CCodeModifiers modifiers { get; set; }
	}
	[CCode (cheader_filename = "balaccode.h")]
	public class CCodeOnceSection : Bala.CCodeFragment {
		public CCodeOnceSection (string def);
		public override void write (Bala.CCodeWriter writer);
		public override void write_declaration (Bala.CCodeWriter writer);
		public string define { get; set; }
	}
	[CCode (cheader_filename = "balaccode.h")]
	public class CCodeParameter : Bala.CCodeNode {
		public CCodeParameter (string n, string type);
		public CCodeParameter.with_ellipsis ();
		public override void write (Bala.CCodeWriter writer);
		public bool ellipsis { get; set; }
		public string name { get; set; }
		public string type_name { get; set; }
	}
	[CCode (cheader_filename = "balaccode.h")]
	public class CCodeParenthesizedExpression : Bala.CCodeExpression {
		public CCodeParenthesizedExpression (Bala.CCodeExpression expr);
		public override void write (Bala.CCodeWriter writer);
		public Bala.CCodeExpression inner { get; set; }
	}
	[CCode (cheader_filename = "balaccode.h")]
	public class CCodeReturnStatement : Bala.CCodeStatement {
		public CCodeReturnStatement (Bala.CCodeExpression? expr = null);
		public override void write (Bala.CCodeWriter writer);
		public Bala.CCodeExpression? return_expression { get; set; }
	}
	[CCode (cheader_filename = "balaccode.h")]
	public abstract class CCodeStatement : Bala.CCodeNode {
		protected CCodeStatement ();
	}
	[CCode (cheader_filename = "balaccode.h")]
	public class CCodeStruct : Bala.CCodeNode {
		public CCodeStruct (string name);
		public void add_declaration (Bala.CCodeDeclaration decl);
		public void add_field (string type_name, string name, Bala.CCodeModifiers modifiers = 0, Bala.CCodeDeclaratorSuffix? declarator_suffix = null);
		public override void write (Bala.CCodeWriter writer);
		public bool is_empty { get; }
		public string name { get; set; }
	}
	[CCode (cheader_filename = "balaccode.h")]
	public class CCodeSwitchStatement : Bala.CCodeBlock {
		public CCodeSwitchStatement (Bala.CCodeExpression expression);
		public override void write (Bala.CCodeWriter writer);
		public Bala.CCodeExpression expression { get; set; }
	}
	[CCode (cheader_filename = "balaccode.h")]
	public class CCodeTypeDefinition : Bala.CCodeNode {
		public CCodeTypeDefinition (string type, Bala.CCodeDeclarator decl);
		public override void write (Bala.CCodeWriter writer);
		public override void write_declaration (Bala.CCodeWriter writer);
		public Bala.CCodeDeclarator declarator { get; set; }
		public string type_name { get; set; }
	}
	[CCode (cheader_filename = "balaccode.h")]
	public class CCodeUnaryExpression : Bala.CCodeExpression {
		public CCodeUnaryExpression (Bala.CCodeUnaryOperator op, Bala.CCodeExpression expr);
		public override void write (Bala.CCodeWriter writer);
		public override void write_inner (Bala.CCodeWriter writer);
		public Bala.CCodeExpression inner { get; set; }
		public Bala.CCodeUnaryOperator operator { get; set; }
	}
	[CCode (cheader_filename = "balaccode.h")]
	public class CCodeVariableDeclarator : Bala.CCodeDeclarator {
		public CCodeVariableDeclarator (string name, Bala.CCodeExpression? initializer = null, Bala.CCodeDeclaratorSuffix? declarator_suffix = null);
		public override void write (Bala.CCodeWriter writer);
		public override void write_declaration (Bala.CCodeWriter writer);
		public override void write_initialization (Bala.CCodeWriter writer);
		public CCodeVariableDeclarator.zero (string name, Bala.CCodeExpression? initializer, Bala.CCodeDeclaratorSuffix? declarator_suffix = null);
		public Bala.CCodeDeclaratorSuffix? declarator_suffix { get; set; }
		public bool init0 { get; set; }
		public Bala.CCodeExpression? initializer { get; set; }
		public string name { get; set; }
	}
	[CCode (cheader_filename = "balaccode.h")]
	public class CCodeWhileStatement : Bala.CCodeStatement {
		public CCodeWhileStatement (Bala.CCodeExpression cond, Bala.CCodeStatement? stmt = null);
		public override void write (Bala.CCodeWriter writer);
		public Bala.CCodeStatement body { get; set; }
		public Bala.CCodeExpression condition { get; set; }
	}
	[CCode (cheader_filename = "balaccode.h")]
	public class CCodeWriter {
		public CCodeWriter (string filename, string? source_filename = null);
		public void close ();
		public bool open (bool write_version);
		public void write_begin_block ();
		public void write_comment (string text);
		public void write_end_block ();
		public void write_indent (Bala.CCodeLineDirective? line = null);
		public void write_newline ();
		public void write_nspaces (uint n);
		public void write_string (string s);
		public bool bol { get; }
		public string filename { get; set; }
		public bool line_directives { get; set; }
	}
	[CCode (cheader_filename = "balaccode.h")]
	public enum CCodeAssignmentOperator {
		SIMPLE,
		BITWISE_OR,
		BITWISE_AND,
		BITWISE_XOR,
		ADD,
		SUB,
		MUL,
		DIV,
		PERCENT,
		SHIFT_LEFT,
		SHIFT_RIGHT
	}
	[CCode (cheader_filename = "balaccode.h")]
	public enum CCodeBinaryOperator {
		PLUS,
		MINUS,
		MUL,
		DIV,
		MOD,
		SHIFT_LEFT,
		SHIFT_RIGHT,
		LESS_THAN,
		GREATER_THAN,
		LESS_THAN_OR_EQUAL,
		GREATER_THAN_OR_EQUAL,
		EQUALITY,
		INEQUALITY,
		BITWISE_AND,
		BITWISE_OR,
		BITWISE_XOR,
		AND,
		OR
	}
	[CCode (cheader_filename = "balaccode.h")]
	[Flags]
	public enum CCodeModifiers {
		NONE,
		STATIC,
		REGISTER,
		EXTERN,
		INLINE,
		VOLATILE,
		DEPRECATED,
		THREAD_LOCAL,
		INTERNAL,
		CONST,
		UNUSED,
		CONSTRUCTOR,
		DESTRUCTOR,
		FORMAT_ARG,
		PRINTF,
		SCANF,
		NO_INLINE
	}
	[CCode (cheader_filename = "balaccode.h")]
	public enum CCodeUnaryOperator {
		PLUS,
		MINUS,
		LOGICAL_NEGATION,
		BITWISE_COMPLEMENT,
		POINTER_INDIRECTION,
		ADDRESS_OF,
		PREFIX_INCREMENT,
		PREFIX_DECREMENT,
		POSTFIX_INCREMENT,
		POSTFIX_DECREMENT
	}
	[CCode (cheader_filename = "balaccode.h")]
	public enum GGnucSectionType {
		IGNORE_DEPRECATIONS;
		public unowned string to_string ();
	}
}
