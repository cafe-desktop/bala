/* bala.bapi generated by balac, do not modify. */

namespace Bala {
	namespace Genie {
		[CCode (cheader_filename = "bala.h")]
		public class Parser : Bala.CodeVisitor {
			public Parser ();
			public void parse (Bala.CodeContext context);
			public void parse_file (Bala.SourceFile source_file);
			public override void visit_source_file (Bala.SourceFile source_file);
		}
		[CCode (cheader_filename = "bala.h")]
		public class Scanner {
			public Scanner (Bala.SourceFile source_file);
			public static Bala.Genie.TokenType get_identifier_or_keyword (char* begin, int len);
			public void parse_file_comments ();
			public Bala.Comment? pop_comment ();
			public Bala.Genie.TokenType read_regex_token (out Bala.SourceLocation token_begin, out Bala.SourceLocation token_end);
			public Bala.Genie.TokenType read_template_token (out Bala.SourceLocation token_begin, out Bala.SourceLocation token_end);
			public Bala.Genie.TokenType read_token (out Bala.SourceLocation token_begin, out Bala.SourceLocation token_end);
			public void seek (Bala.SourceLocation location);
			public int indent_spaces { get; set; }
			public Bala.SourceFile source_file { get; private set; }
		}
		[CCode (cheader_filename = "bala.h")]
		public enum TokenType {
			NONE,
			ABSTRACT,
			ARRAY,
			AS,
			ASSERT,
			ASSIGN,
			ASSIGN_ADD,
			ASSIGN_BITWISE_AND,
			ASSIGN_BITWISE_OR,
			ASSIGN_BITWISE_XOR,
			ASSIGN_DIV,
			ASSIGN_MUL,
			ASSIGN_PERCENT,
			ASSIGN_SHIFT_LEFT,
			ASSIGN_SUB,
			ASYNC,
			BITWISE_AND,
			BITWISE_OR,
			BREAK,
			CARRET,
			CASE,
			CHARACTER_LITERAL,
			CLASS,
			CLOSE_BRACE,
			CLOSE_BRACKET,
			CLOSE_PARENS,
			CLOSE_REGEX_LITERAL,
			CLOSE_TEMPLATE,
			COLON,
			COMMA,
			CONST,
			CONSTRUCT,
			CONTINUE,
			DEDENT,
			DEF,
			DEFAULT,
			DELEGATE,
			DELETE,
			DICT,
			DIV,
			DO,
			DOT,
			DOWNTO,
			DYNAMIC,
			ELLIPSIS,
			ELSE,
			ENUM,
			ENSURES,
			ERRORDOMAIN,
			EOF,
			EOL,
			EVENT,
			EXCEPT,
			EXTERN,
			FALSE,
			FINAL,
			FINALLY,
			FOR,
			GET,
			HASH,
			IDENTIFIER,
			IF,
			IMPLEMENTS,
			IN,
			INDENT,
			INIT,
			INLINE,
			INTEGER_LITERAL,
			INTERFACE,
			INTERNAL,
			INTERR,
			IS,
			ISA,
			LAMBDA,
			LIST,
			LOCK,
			MINUS,
			NAMESPACE,
			NEW,
			NULL,
			OF,
			OUT,
			OP_AND,
			OP_DEC,
			OP_EQ,
			OP_GE,
			OP_GT,
			OP_INC,
			OP_LE,
			OP_LT,
			OP_NE,
			OP_NEG,
			OP_OR,
			OP_PTR,
			OP_SHIFT_LEFT,
			OPEN_BRACE,
			OPEN_BRACKET,
			OPEN_PARENS,
			OPEN_REGEX_LITERAL,
			OPEN_TEMPLATE,
			OVERRIDE,
			OWNED,
			PARAMS,
			PASS,
			PERCENT,
			PLUS,
			PRINT,
			PRIVATE,
			PROP,
			PROTECTED,
			PUBLIC,
			RAISE,
			RAISES,
			READONLY,
			REAL_LITERAL,
			REF,
			REGEX_LITERAL,
			REQUIRES,
			RETURN,
			SEALED,
			SELF,
			SEMICOLON,
			SET,
			SIZEOF,
			STAR,
			STATIC,
			STRING_LITERAL,
			STRUCT,
			SUPER,
			TEMPLATE_STRING_LITERAL,
			TILDE,
			TO,
			TRUE,
			TRY,
			TYPEOF,
			UNOWNED,
			USES,
			VAR,
			VERBATIM_STRING_LITERAL,
			VIRTUAL,
			VOID,
			VOLATILE,
			WEAK,
			WHEN,
			WHILE,
			YIELD;
			public unowned string to_string ();
		}
	}
	[CCode (cheader_filename = "bala.h")]
	public class AddressofExpression : Bala.Expression {
		public AddressofExpression (Bala.Expression inner, Bala.SourceReference? source_reference = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public override bool check (Bala.CodeContext context);
		public override void emit (Bala.CodeGenerator codegen);
		public override bool is_accessible (Bala.Symbol sym);
		public override bool is_pure ();
		public override void replace_expression (Bala.Expression old_node, Bala.Expression new_node);
		public override string to_string ();
		public Bala.Expression inner { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class ArrayCopyMethod : Bala.Method {
		public ArrayCopyMethod (Bala.SourceReference? source_reference = null);
	}
	[CCode (cheader_filename = "bala.h")]
	public class ArrayCreationExpression : Bala.Expression {
		public ArrayCreationExpression (Bala.DataType element_type, int rank, Bala.InitializerList? initializer_list, Bala.SourceReference? source_reference = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public void append_size (Bala.Expression size);
		public override bool check (Bala.CodeContext context);
		public override void emit (Bala.CodeGenerator codegen);
		public unowned Bala.List<Bala.Expression> get_sizes ();
		public override void get_used_variables (Bala.Collection<Bala.Variable> collection);
		public override bool is_accessible (Bala.Symbol sym);
		public override bool is_pure ();
		public override void replace_expression (Bala.Expression old_node, Bala.Expression new_node);
		public override void replace_type (Bala.DataType old_type, Bala.DataType new_type);
		public override string to_string ();
		public Bala.DataType element_type { get; set; }
		public Bala.InitializerList? initializer_list { get; set; }
		public Bala.DataType? length_type { get; set; }
		public int rank { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class ArrayLengthField : Bala.Field {
		public ArrayLengthField (Bala.SourceReference? source_reference = null);
	}
	[CCode (cheader_filename = "bala.h")]
	public class ArrayMoveMethod : Bala.Method {
		public ArrayMoveMethod (Bala.SourceReference? source_reference = null);
	}
	[CCode (cheader_filename = "bala.h")]
	public class ArrayResizeMethod : Bala.Method {
		public ArrayResizeMethod (Bala.SourceReference? source_reference = null);
	}
	[CCode (cheader_filename = "bala.h")]
	public class ArrayType : Bala.ReferenceType {
		public ArrayType (Bala.DataType element_type, int rank, Bala.SourceReference? source_reference = null);
		public override void accept_children (Bala.CodeVisitor visitor);
		public override bool check (Bala.CodeContext context);
		public override bool compatible (Bala.DataType target_type);
		public override Bala.DataType copy ();
		public override Bala.DataType get_actual_type (Bala.DataType? derived_instance_type, Bala.List<Bala.DataType>? method_type_arguments, Bala.CodeNode? node_reference);
		public override Bala.Symbol? get_member (string member_name);
		public override Bala.DataType? infer_type_argument (Bala.TypeParameter type_param, Bala.DataType value_type);
		public override bool is_accessible (Bala.Symbol sym);
		public override bool is_disposable ();
		public override bool is_reference_type_or_type_parameter ();
		public override void replace_type (Bala.DataType old_type, Bala.DataType new_type);
		public override string to_qualified_string (Bala.Scope? scope);
		public Bala.DataType element_type { get; set; }
		public bool fixed_length { get; set; }
		public bool inline_allocated { get; set; }
		public bool invalid_syntax { get; set; }
		public Bala.Expression? length { get; set; }
		public Bala.DataType? length_type { get; set; }
		public int rank { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class Assignment : Bala.Expression {
		public Assignment (Bala.Expression left, Bala.Expression right, Bala.AssignmentOperator operator = AssignmentOperator.SIMPLE, Bala.SourceReference? source_reference = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public override bool check (Bala.CodeContext context);
		public override void emit (Bala.CodeGenerator codegen);
		public override void get_defined_variables (Bala.Collection<Bala.Variable> collection);
		public override void get_error_types (Bala.Collection<Bala.DataType> collection, Bala.SourceReference? source_reference = null);
		public override void get_used_variables (Bala.Collection<Bala.Variable> collection);
		public override bool is_accessible (Bala.Symbol sym);
		public override bool is_pure ();
		public override void replace_expression (Bala.Expression old_node, Bala.Expression new_node);
		public override string to_string ();
		public Bala.Expression left { get; set; }
		public Bala.AssignmentOperator operator { get; set; }
		public Bala.Expression right { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class Attribute : Bala.CodeNode {
		public Attribute (string name, Bala.SourceReference? source_reference = null);
		public void add_argument (string key, string value);
		public bool get_bool (string name, bool default_value = false);
		public double get_double (string name, double default_value = 0);
		public int get_integer (string name, int default_value = 0);
		public string? get_string (string name, string? default_value = null);
		public bool has_argument (string name);
		public Bala.Map<string,string> args { get; private set; }
		public string name { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class AttributeCache {
		public AttributeCache ();
	}
	[CCode (cheader_filename = "bala.h")]
	public class BaseAccess : Bala.Expression {
		public BaseAccess (Bala.SourceReference? source = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override bool check (Bala.CodeContext context);
		public override void emit (Bala.CodeGenerator codegen);
		public override bool is_pure ();
		public override string to_string ();
	}
	[CCode (cheader_filename = "bala.h")]
	public class BasicBlock {
		public BasicBlock ();
		public void add_child (Bala.BasicBlock block);
		public void add_dominator_frontier (Bala.BasicBlock block);
		public void add_node (Bala.CodeNode node);
		public void add_phi_function (Bala.PhiFunction phi);
		public void connect (Bala.BasicBlock target);
		public BasicBlock.entry ();
		public BasicBlock.exit ();
		public unowned Bala.List<weak Bala.BasicBlock> get_children ();
		public unowned Bala.Set<weak Bala.BasicBlock> get_dominator_frontier ();
		public unowned Bala.List<Bala.CodeNode> get_nodes ();
		public unowned Bala.Set<Bala.PhiFunction> get_phi_functions ();
		public unowned Bala.List<weak Bala.BasicBlock> get_predecessors ();
		public unowned Bala.List<weak Bala.BasicBlock> get_successors ();
		public weak Bala.BasicBlock parent { get; private set; }
		public int postorder_number { get; set; }
		public bool postorder_visited { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class BinaryExpression : Bala.Expression {
		public BinaryExpression (Bala.BinaryOperator op, Bala.Expression _left, Bala.Expression _right, Bala.SourceReference? source = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public BinaryExpression.chained (Bala.BinaryOperator op, Bala.Expression _left, Bala.Expression _right, Bala.SourceReference? source = null);
		public override bool check (Bala.CodeContext context);
		public override void emit (Bala.CodeGenerator codegen);
		public override void get_defined_variables (Bala.Collection<Bala.Variable> collection);
		public override void get_error_types (Bala.Collection<Bala.DataType> collection, Bala.SourceReference? source_reference = null);
		public override void get_used_variables (Bala.Collection<Bala.Variable> collection);
		public override bool is_accessible (Bala.Symbol sym);
		public override bool is_constant ();
		public override bool is_non_null ();
		public override bool is_pure ();
		public override void replace_expression (Bala.Expression old_node, Bala.Expression new_node);
		public override string to_string ();
		public bool is_chained { get; private set; }
		public Bala.Expression left { get; set; }
		public Bala.BinaryOperator operator { get; set; }
		public Bala.Expression right { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class Block : Bala.Symbol, Bala.Statement {
		public Block (Bala.SourceReference? source_reference = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public void add_local_constant (Bala.Constant constant);
		public void add_local_variable (Bala.LocalVariable local);
		public void add_statement (Bala.Statement stmt);
		public override bool check (Bala.CodeContext context);
		public override void emit (Bala.CodeGenerator codegen);
		public override void get_error_types (Bala.Collection<Bala.DataType> collection, Bala.SourceReference? source_reference = null);
		public unowned Bala.List<Bala.Constant> get_local_constants ();
		public unowned Bala.List<Bala.LocalVariable> get_local_variables ();
		public Bala.List<Bala.Statement> get_statements ();
		public void insert_before (Bala.Statement stmt, Bala.Statement new_stmt);
		public void insert_statement (int index, Bala.Statement stmt);
		public void remove_local_variable (Bala.LocalVariable local);
		public void replace_statement (Bala.Statement old_stmt, Bala.Statement new_stmt);
		public bool captured { get; set; }
		public bool contains_jump_statement { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class BooleanLiteral : Bala.Literal {
		public BooleanLiteral (bool b, Bala.SourceReference? source = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override bool check (Bala.CodeContext context);
		public override void emit (Bala.CodeGenerator codegen);
		public override bool is_pure ();
		public override string to_string ();
		public bool value { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class BooleanType : Bala.ValueType {
		public BooleanType (Bala.Struct type_symbol);
		public override Bala.DataType copy ();
	}
	[CCode (cheader_filename = "bala.h")]
	public class BreakStatement : Bala.CodeNode, Bala.Statement {
		public BreakStatement (Bala.SourceReference? source = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void emit (Bala.CodeGenerator codegen);
	}
	[CCode (cheader_filename = "bala.h")]
	public abstract class CallableType : Bala.DataType {
		protected CallableType (Bala.Symbol symbol);
		public override unowned Bala.List<Bala.Parameter>? get_parameters ();
		public override unowned Bala.DataType? get_return_type ();
		public override bool is_invokable ();
		public override string to_prototype_string (string? override_name = null);
		public weak Bala.Callable callable_symbol { get; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class CastExpression : Bala.Expression {
		public CastExpression (Bala.Expression inner, Bala.DataType type_reference, Bala.SourceReference? source_reference = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public override bool check (Bala.CodeContext context);
		public override void emit (Bala.CodeGenerator codegen);
		public override void get_defined_variables (Bala.Collection<Bala.Variable> collection);
		public override void get_error_types (Bala.Collection<Bala.DataType> collection, Bala.SourceReference? source_reference = null);
		public override void get_used_variables (Bala.Collection<Bala.Variable> collection);
		public override bool is_accessible (Bala.Symbol sym);
		public override bool is_constant ();
		public override bool is_pure ();
		public CastExpression.non_null (Bala.Expression inner, Bala.SourceReference? source_reference = null);
		public override void replace_expression (Bala.Expression old_node, Bala.Expression new_node);
		public override void replace_type (Bala.DataType old_type, Bala.DataType new_type);
		public CastExpression.silent (Bala.Expression inner, Bala.DataType type_reference, Bala.SourceReference? source_reference = null);
		public override string to_string ();
		public Bala.Expression inner { get; set; }
		public bool is_non_null_cast { get; private set; }
		public bool is_silent_cast { get; private set; }
		public Bala.DataType type_reference { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class CatchClause : Bala.CodeNode {
		public CatchClause (Bala.DataType? error_type, string? variable_name, Bala.Block body, Bala.SourceReference? source_reference = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public override bool check (Bala.CodeContext context);
		public override void emit (Bala.CodeGenerator codegen);
		public override void get_defined_variables (Bala.Collection<Bala.Variable> collection);
		public override void replace_type (Bala.DataType old_type, Bala.DataType new_type);
		public Bala.Block body { get; set; }
		public string? clabel_name { get; set; }
		public Bala.DataType? error_type { get; set; }
		public Bala.LocalVariable error_variable { get; set; }
		public string? variable_name { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class CharacterLiteral : Bala.Literal {
		public CharacterLiteral (string c, Bala.SourceReference? source = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override bool check (Bala.CodeContext context);
		public override void emit (Bala.CodeGenerator codegen);
		public unichar get_char ();
		public override bool is_pure ();
		public override string to_string ();
		public string value { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class Class : Bala.ObjectTypeSymbol {
		public Class (string name, Bala.SourceReference? source_reference = null, Bala.Comment? comment = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public void add_base_type (Bala.DataType type);
		public override void add_constructor (Bala.Constructor c);
		public override void add_destructor (Bala.Destructor d);
		public override void add_field (Bala.Field f);
		public override void add_method (Bala.Method m);
		public override void add_property (Bala.Property prop);
		public override bool check (Bala.CodeContext context);
		public unowned Bala.List<Bala.DataType> get_base_types ();
		public Bala.HashMap<Bala.Method,Bala.Method> get_implicit_implementations ();
		public bool implements (Bala.Interface i);
		public bool is_a (Bala.ObjectTypeSymbol t);
		public bool is_fundamental ();
		public override bool is_reference_type ();
		public override bool is_subtype_of (Bala.TypeSymbol t);
		public override void replace_type (Bala.DataType old_type, Bala.DataType new_type);
		public Bala.Class base_class { get; set; }
		public Bala.Constructor? class_constructor { get; private set; }
		public Bala.Destructor? class_destructor { get; private set; }
		public Bala.Constructor? constructor { get; private set; }
		public Bala.CreationMethod? default_construction_method { get; private set; }
		public Bala.Destructor? destructor { get; private set; }
		public bool has_class_private_fields { get; private set; }
		public bool has_private_fields { get; set; }
		public bool is_abstract { get; set; }
		public bool is_compact { get; set; }
		public bool is_error_base { get; }
		public bool is_immutable { get; set; }
		public bool is_sealed { get; set; }
		public bool is_singleton { get; set; }
		public Bala.Constructor? static_constructor { get; private set; }
		public Bala.Destructor? static_destructor { get; private set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class ClassType : Bala.ReferenceType {
		public ClassType (Bala.Class class_symbol);
		public override Bala.DataType copy ();
		public weak Bala.Class class_symbol { get; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class CodeContext {
		public CodeContext ();
		public void accept (Bala.CodeVisitor visitor);
		public void add_c_source_file (string file);
		public void add_define (string define);
		public bool add_external_package (string pkg);
		public void add_package (string pkg);
		public bool add_packages_from_file (string filename);
		public void add_source_file (Bala.SourceFile file);
		public bool add_source_filename (string filename, bool is_source = false, bool cmdline = false);
		public void check ();
		public static Bala.CodeContext @get ();
		public unowned Bala.List<string> get_c_source_files ();
		public string? get_gir_path (string gir);
		public string? get_gresource_path (string gresource, string resource);
		public string? get_metadata_path (string gir_filename);
		public unowned Bala.List<string> get_packages ();
		public unowned Bala.SourceFile? get_source_file (string filename);
		public unowned Bala.List<Bala.SourceFile> get_source_files ();
		public string? get_bapi_path (string pkg);
		public bool has_package (string pkg);
		public bool is_defined (string define);
		public string? pkg_config_compile_flags (string package_name);
		public bool pkg_config_exists (string package_name);
		public string? pkg_config_modversion (string package_name);
		public static void pop ();
		public static void push (Bala.CodeContext context);
		public static string realpath (string name);
		public bool require_glib_version (int major, int minor);
		public void set_target_glib_version (string target_glib);
		public void write_dependencies (string filename);
		public void write_external_dependencies (string filename);
		public bool abi_stability { get; set; }
		public Bala.SemanticAnalyzer analyzer { get; private set; }
		public bool assert { get; set; }
		public string basedir { get; set; }
		public bool ccode_only { get; set; }
		public bool checking { get; set; }
		public Bala.CodeGenerator codegen { get; set; }
		public bool compile_only { get; set; }
		public bool debug { get; set; }
		public bool deprecated { get; set; }
		public string directory { get; set; }
		public Bala.Method? entry_point { get; set; }
		public string entry_point_name { get; set; }
		public bool experimental { get; set; }
		public bool experimental_non_null { get; set; }
		public Bala.FlowAnalyzer flow_analyzer { get; private set; }
		public string[] gir_directories { get; set; }
		public bool gobject_tracing { get; set; }
		public string[] gresources { get; set; }
		public string[] gresources_directories { get; set; }
		public string? header_filename { get; set; }
		public bool hide_internal { get; set; }
		public string? includedir { get; set; }
		public string? internal_header_filename { get; set; }
		public bool keep_going { get; set; }
		public bool mem_profiler { get; set; }
		public string[] metadata_directories { get; set; }
		public Bala.Method module_init_method { get; set; }
		public bool nostdpkg { get; set; }
		public int optlevel { get; set; }
		public string output { get; set; }
		public string pkg_config_command { get; set; }
		public Bala.Profile profile { get; set; }
		public Bala.Report report { get; set; }
		public Bala.SymbolResolver resolver { get; private set; }
		public Bala.Namespace root { get; }
		public bool run_output { get; set; }
		public bool save_csources { get; }
		public bool save_temps { get; set; }
		public bool since_check { get; set; }
		public string? symbols_filename { get; set; }
		public bool use_fast_bapi { get; set; }
		public bool use_header { get; set; }
		public Bala.UsedAttr used_attr { get; set; }
		public bool bapi_comments { get; set; }
		public string[] bapi_directories { get; set; }
		public bool verbose_mode { get; set; }
		public bool version_header { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public abstract class CodeGenerator : Bala.CodeVisitor {
		protected CodeGenerator ();
		public virtual void emit (Bala.CodeContext context);
		public abstract Bala.TargetValue load_field (Bala.Field field, Bala.TargetValue? instance, Bala.Expression? expr = null);
		public abstract Bala.TargetValue load_local (Bala.LocalVariable local, Bala.Expression? expr = null);
		public abstract Bala.TargetValue load_parameter (Bala.Parameter param, Bala.Expression? expr = null);
		public abstract void store_field (Bala.Field field, Bala.TargetValue? instance, Bala.TargetValue value, Bala.SourceReference? source_reference = null);
		public abstract void store_local (Bala.LocalVariable local, Bala.TargetValue value, bool initializer, Bala.SourceReference? source_reference = null);
		public abstract void store_parameter (Bala.Parameter param, Bala.TargetValue value, bool capturing_parameter = false, Bala.SourceReference? source_reference = null);
	}
	[CCode (cheader_filename = "bala.h")]
	public abstract class CodeNode {
		public GLib.List<Bala.Attribute> attributes;
		protected CodeNode ();
		public virtual void accept (Bala.CodeVisitor visitor);
		public virtual void accept_children (Bala.CodeVisitor visitor);
		public virtual bool check (Bala.CodeContext context);
		public bool copy_attribute_bool (Bala.CodeNode source, string attribute, string argument);
		public bool copy_attribute_double (Bala.CodeNode source, string attribute, string argument);
		public bool copy_attribute_integer (Bala.CodeNode source, string attribute, string argument);
		public bool copy_attribute_string (Bala.CodeNode source, string attribute, string argument);
		public virtual void emit (Bala.CodeGenerator codegen);
		public unowned Bala.Attribute? get_attribute (string name);
		public bool get_attribute_bool (string attribute, string argument, bool default_value = false);
		public unowned Bala.AttributeCache? get_attribute_cache (int index);
		public static int get_attribute_cache_index ();
		public double get_attribute_double (string attribute, string argument, double default_value = 0);
		public int get_attribute_integer (string attribute, string argument, int default_value = 0);
		public string? get_attribute_string (string attribute, string argument, string? default_value = null);
		public virtual void get_defined_variables (Bala.Collection<Bala.Variable> collection);
		public virtual void get_error_types (Bala.Collection<Bala.DataType> collection, Bala.SourceReference? source_reference = null);
		public static string get_temp_name ();
		public virtual void get_used_variables (Bala.Collection<Bala.Variable> collection);
		public bool has_attribute_argument (string attribute, string argument);
		public void remove_attribute_argument (string attribute, string argument);
		public virtual void replace_expression (Bala.Expression old_node, Bala.Expression new_node);
		public virtual void replace_type (Bala.DataType old_type, Bala.DataType new_type);
		public void set_attribute (string name, bool value, Bala.SourceReference? source_reference = null);
		public void set_attribute_bool (string attribute, string argument, bool value, Bala.SourceReference? source_reference = null);
		public void set_attribute_cache (int index, Bala.AttributeCache cache);
		public void set_attribute_double (string attribute, string argument, double value, Bala.SourceReference? source_reference = null);
		public void set_attribute_integer (string attribute, string argument, int value, Bala.SourceReference? source_reference = null);
		public void set_attribute_string (string attribute, string argument, string? value, Bala.SourceReference? source_reference = null);
		public virtual string to_string ();
		public bool checked { get; set; }
		public bool error { get; set; }
		public weak Bala.CodeNode? parent_node { get; set; }
		public Bala.SourceReference? source_reference { get; set; }
		public bool tree_can_fail { get; }
		public string type_name { get; }
		public bool unreachable { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public abstract class CodeVisitor {
		protected CodeVisitor ();
		public virtual void visit_addressof_expression (Bala.AddressofExpression expr);
		public virtual void visit_array_creation_expression (Bala.ArrayCreationExpression expr);
		public virtual void visit_assignment (Bala.Assignment a);
		public virtual void visit_base_access (Bala.BaseAccess expr);
		public virtual void visit_binary_expression (Bala.BinaryExpression expr);
		public virtual void visit_block (Bala.Block b);
		public virtual void visit_boolean_literal (Bala.BooleanLiteral lit);
		public virtual void visit_break_statement (Bala.BreakStatement stmt);
		public virtual void visit_cast_expression (Bala.CastExpression expr);
		public virtual void visit_catch_clause (Bala.CatchClause clause);
		public virtual void visit_character_literal (Bala.CharacterLiteral lit);
		public virtual void visit_class (Bala.Class cl);
		public virtual void visit_conditional_expression (Bala.ConditionalExpression expr);
		public virtual void visit_constant (Bala.Constant c);
		public virtual void visit_constructor (Bala.Constructor c);
		public virtual void visit_continue_statement (Bala.ContinueStatement stmt);
		public virtual void visit_creation_method (Bala.CreationMethod m);
		public virtual void visit_data_type (Bala.DataType type);
		public virtual void visit_declaration_statement (Bala.DeclarationStatement stmt);
		public virtual void visit_delegate (Bala.Delegate d);
		public virtual void visit_delete_statement (Bala.DeleteStatement stmt);
		public virtual void visit_destructor (Bala.Destructor d);
		public virtual void visit_do_statement (Bala.DoStatement stmt);
		public virtual void visit_element_access (Bala.ElementAccess expr);
		public virtual void visit_empty_statement (Bala.EmptyStatement stmt);
		public virtual void visit_end_full_expression (Bala.Expression expr);
		public virtual void visit_enum (Bala.Enum en);
		public virtual void visit_enum_value (Bala.EnumValue ev);
		public virtual void visit_error_code (Bala.ErrorCode ecode);
		public virtual void visit_error_domain (Bala.ErrorDomain edomain);
		public virtual void visit_expression (Bala.Expression expr);
		public virtual void visit_expression_statement (Bala.ExpressionStatement stmt);
		public virtual void visit_field (Bala.Field f);
		public virtual void visit_for_statement (Bala.ForStatement stmt);
		public virtual void visit_foreach_statement (Bala.ForeachStatement stmt);
		public virtual void visit_formal_parameter (Bala.Parameter p);
		public virtual void visit_if_statement (Bala.IfStatement stmt);
		public virtual void visit_initializer_list (Bala.InitializerList list);
		public virtual void visit_integer_literal (Bala.IntegerLiteral lit);
		public virtual void visit_interface (Bala.Interface iface);
		public virtual void visit_lambda_expression (Bala.LambdaExpression expr);
		public virtual void visit_local_variable (Bala.LocalVariable local);
		public virtual void visit_lock_statement (Bala.LockStatement stmt);
		public virtual void visit_loop (Bala.Loop stmt);
		public virtual void visit_member_access (Bala.MemberAccess expr);
		public virtual void visit_method (Bala.Method m);
		public virtual void visit_method_call (Bala.MethodCall expr);
		public virtual void visit_named_argument (Bala.NamedArgument expr);
		public virtual void visit_namespace (Bala.Namespace ns);
		public virtual void visit_null_literal (Bala.NullLiteral lit);
		public virtual void visit_object_creation_expression (Bala.ObjectCreationExpression expr);
		public virtual void visit_pointer_indirection (Bala.PointerIndirection expr);
		public virtual void visit_postfix_expression (Bala.PostfixExpression expr);
		public virtual void visit_property (Bala.Property prop);
		public virtual void visit_property_accessor (Bala.PropertyAccessor acc);
		public virtual void visit_real_literal (Bala.RealLiteral lit);
		public virtual void visit_reference_transfer_expression (Bala.ReferenceTransferExpression expr);
		public virtual void visit_regex_literal (Bala.RegexLiteral lit);
		public virtual void visit_return_statement (Bala.ReturnStatement stmt);
		public virtual void visit_signal (Bala.Signal sig);
		public virtual void visit_sizeof_expression (Bala.SizeofExpression expr);
		public virtual void visit_slice_expression (Bala.SliceExpression expr);
		public virtual void visit_source_file (Bala.SourceFile source_file);
		public virtual void visit_string_literal (Bala.StringLiteral lit);
		public virtual void visit_struct (Bala.Struct st);
		public virtual void visit_switch_label (Bala.SwitchLabel label);
		public virtual void visit_switch_section (Bala.SwitchSection section);
		public virtual void visit_switch_statement (Bala.SwitchStatement stmt);
		public virtual void visit_template (Bala.Template tmpl);
		public virtual void visit_throw_statement (Bala.ThrowStatement stmt);
		public virtual void visit_try_statement (Bala.TryStatement stmt);
		public virtual void visit_tuple (Bala.Tuple tuple);
		public virtual void visit_type_check (Bala.TypeCheck expr);
		public virtual void visit_type_parameter (Bala.TypeParameter p);
		public virtual void visit_typeof_expression (Bala.TypeofExpression expr);
		public virtual void visit_unary_expression (Bala.UnaryExpression expr);
		public virtual void visit_unlock_statement (Bala.UnlockStatement stmt);
		public virtual void visit_using_directive (Bala.UsingDirective ns);
		public virtual void visit_while_statement (Bala.WhileStatement stmt);
		public virtual void visit_yield_statement (Bala.YieldStatement y);
	}
	[CCode (cheader_filename = "bala.h")]
	public class CodeWriter : Bala.CodeVisitor {
		public CodeWriter (Bala.CodeWriterType type = CodeWriterType.EXTERNAL);
		public void set_cheader_override (string original, string replacement);
		public override void visit_addressof_expression (Bala.AddressofExpression expr);
		public override void visit_array_creation_expression (Bala.ArrayCreationExpression expr);
		public override void visit_assignment (Bala.Assignment a);
		public override void visit_base_access (Bala.BaseAccess expr);
		public override void visit_binary_expression (Bala.BinaryExpression expr);
		public override void visit_block (Bala.Block b);
		public override void visit_boolean_literal (Bala.BooleanLiteral lit);
		public override void visit_break_statement (Bala.BreakStatement stmt);
		public override void visit_cast_expression (Bala.CastExpression expr);
		public override void visit_catch_clause (Bala.CatchClause clause);
		public override void visit_character_literal (Bala.CharacterLiteral lit);
		public override void visit_class (Bala.Class cl);
		public override void visit_conditional_expression (Bala.ConditionalExpression expr);
		public override void visit_constant (Bala.Constant c);
		public override void visit_constructor (Bala.Constructor c);
		public override void visit_continue_statement (Bala.ContinueStatement stmt);
		public override void visit_creation_method (Bala.CreationMethod m);
		public override void visit_declaration_statement (Bala.DeclarationStatement stmt);
		public override void visit_delegate (Bala.Delegate cb);
		public override void visit_delete_statement (Bala.DeleteStatement stmt);
		public override void visit_destructor (Bala.Destructor d);
		public override void visit_do_statement (Bala.DoStatement stmt);
		public override void visit_element_access (Bala.ElementAccess expr);
		public override void visit_empty_statement (Bala.EmptyStatement stmt);
		public override void visit_enum (Bala.Enum en);
		public override void visit_error_domain (Bala.ErrorDomain edomain);
		public override void visit_expression_statement (Bala.ExpressionStatement stmt);
		public override void visit_field (Bala.Field f);
		public override void visit_for_statement (Bala.ForStatement stmt);
		public override void visit_foreach_statement (Bala.ForeachStatement stmt);
		public override void visit_if_statement (Bala.IfStatement stmt);
		public override void visit_initializer_list (Bala.InitializerList list);
		public override void visit_integer_literal (Bala.IntegerLiteral lit);
		public override void visit_interface (Bala.Interface iface);
		public override void visit_lambda_expression (Bala.LambdaExpression expr);
		public override void visit_local_variable (Bala.LocalVariable local);
		public override void visit_lock_statement (Bala.LockStatement stmt);
		public override void visit_loop (Bala.Loop stmt);
		public override void visit_member_access (Bala.MemberAccess expr);
		public override void visit_method (Bala.Method m);
		public override void visit_method_call (Bala.MethodCall expr);
		public override void visit_namespace (Bala.Namespace ns);
		public override void visit_null_literal (Bala.NullLiteral lit);
		public override void visit_object_creation_expression (Bala.ObjectCreationExpression expr);
		public override void visit_pointer_indirection (Bala.PointerIndirection expr);
		public override void visit_postfix_expression (Bala.PostfixExpression expr);
		public override void visit_property (Bala.Property prop);
		public override void visit_real_literal (Bala.RealLiteral lit);
		public override void visit_reference_transfer_expression (Bala.ReferenceTransferExpression expr);
		public override void visit_return_statement (Bala.ReturnStatement stmt);
		public override void visit_signal (Bala.Signal sig);
		public override void visit_sizeof_expression (Bala.SizeofExpression expr);
		public override void visit_slice_expression (Bala.SliceExpression expr);
		public override void visit_string_literal (Bala.StringLiteral lit);
		public override void visit_struct (Bala.Struct st);
		public override void visit_switch_label (Bala.SwitchLabel label);
		public override void visit_switch_section (Bala.SwitchSection section);
		public override void visit_switch_statement (Bala.SwitchStatement stmt);
		public override void visit_throw_statement (Bala.ThrowStatement stmt);
		public override void visit_try_statement (Bala.TryStatement stmt);
		public override void visit_type_check (Bala.TypeCheck expr);
		public override void visit_typeof_expression (Bala.TypeofExpression expr);
		public override void visit_unary_expression (Bala.UnaryExpression expr);
		public override void visit_unlock_statement (Bala.UnlockStatement stmt);
		public override void visit_using_directive (Bala.UsingDirective ns);
		public override void visit_while_statement (Bala.WhileStatement stmt);
		public override void visit_yield_statement (Bala.YieldStatement y);
		public void write_file (Bala.CodeContext context, string filename);
	}
	[CCode (cheader_filename = "bala.h")]
	public class Comment {
		public Comment (string comment, Bala.SourceReference _source_reference);
		public string content { get; set; }
		public Bala.SourceReference source_reference { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class ConditionalExpression : Bala.Expression {
		public ConditionalExpression (Bala.Expression cond, Bala.Expression true_expr, Bala.Expression false_expr, Bala.SourceReference? source = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public override bool check (Bala.CodeContext context);
		public override void get_defined_variables (Bala.Collection<Bala.Variable> collection);
		public override void get_error_types (Bala.Collection<Bala.DataType> collection, Bala.SourceReference? source_reference = null);
		public override void get_used_variables (Bala.Collection<Bala.Variable> collection);
		public override bool is_accessible (Bala.Symbol sym);
		public override bool is_pure ();
		public override void replace_expression (Bala.Expression old_node, Bala.Expression new_node);
		public override string to_string ();
		public Bala.Expression condition { get; set; }
		public Bala.Expression false_expression { get; set; }
		public Bala.Expression true_expression { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class Constant : Bala.Symbol {
		public Constant (string name, Bala.DataType? type_reference, Bala.Expression? value, Bala.SourceReference? source_reference = null, Bala.Comment? comment = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public override bool check (Bala.CodeContext context);
		public override void replace_expression (Bala.Expression old_node, Bala.Expression new_node);
		public override void replace_type (Bala.DataType old_type, Bala.DataType new_type);
		public Bala.DataType type_reference { get; set; }
		public Bala.Expression? value { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class Constructor : Bala.Subroutine {
		public Constructor (Bala.SourceReference? source = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public override bool check (Bala.CodeContext context);
		public Bala.MemberBinding binding { get; set; }
		public override bool has_result { get; }
		public Bala.Parameter this_parameter { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class ContinueStatement : Bala.CodeNode, Bala.Statement {
		public ContinueStatement (Bala.SourceReference? source = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void emit (Bala.CodeGenerator codegen);
	}
	[CCode (cheader_filename = "bala.h")]
	public class CreationMethod : Bala.Method {
		public CreationMethod (string? class_name, string? name, Bala.SourceReference? source_reference = null, Bala.Comment? comment = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public override bool check (Bala.CodeContext context);
		public bool chain_up { get; set; }
		public string class_name { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public abstract class DataType : Bala.CodeNode {
		protected DataType ();
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public void add_type_argument (Bala.DataType arg);
		public bool check_type_arguments (Bala.CodeContext context, bool allow_none = false);
		public virtual bool compatible (Bala.DataType target_type);
		public abstract Bala.DataType copy ();
		public virtual bool equals (Bala.DataType type2);
		public virtual Bala.DataType get_actual_type (Bala.DataType? derived_instance_type, Bala.List<Bala.DataType>? method_type_arguments, Bala.CodeNode? node_reference);
		public virtual Bala.Symbol? get_member (string member_name);
		public virtual unowned Bala.List<Bala.Parameter>? get_parameters ();
		public virtual Bala.Symbol? get_pointer_member (string member_name);
		public virtual unowned Bala.DataType? get_return_type ();
		public unowned Bala.List<Bala.DataType> get_type_arguments ();
		public string? get_type_signature (Bala.Symbol? symbol = null);
		public bool has_type_arguments ();
		public virtual Bala.DataType? infer_type_argument (Bala.TypeParameter type_param, Bala.DataType value_type);
		public virtual bool is_accessible (Bala.Symbol sym);
		public virtual bool is_disposable ();
		public bool is_generic ();
		public virtual bool is_invokable ();
		public bool is_non_null_simple_type ();
		public bool is_real_non_null_struct_type ();
		public virtual bool is_real_struct_type ();
		public virtual bool is_reference_type_or_type_parameter ();
		public bool is_weak ();
		public void remove_all_type_arguments ();
		public override void replace_type (Bala.DataType old_type, Bala.DataType new_type);
		public void replace_type_parameter (Bala.TypeParameter old_type_param, Bala.TypeParameter new_type_param);
		public virtual bool stricter (Bala.DataType type2);
		public virtual string to_prototype_string (string? override_name = null);
		public virtual string to_qualified_string (Bala.Scope? scope = null);
		public override string to_string ();
		protected DataType.with_symbol (Bala.Symbol? symbol);
		public bool floating_reference { get; set; }
		public bool is_dynamic { get; set; }
		public bool nullable { get; set; }
		public weak Bala.Symbol? symbol { get; private set; }
		public weak Bala.TypeSymbol? type_symbol { get; }
		public bool value_owned { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class DeclarationStatement : Bala.CodeNode, Bala.Statement {
		public DeclarationStatement (Bala.Symbol declaration, Bala.SourceReference? source_reference = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public override bool check (Bala.CodeContext context);
		public override void emit (Bala.CodeGenerator codegen);
		public override void get_defined_variables (Bala.Collection<Bala.Variable> collection);
		public override void get_error_types (Bala.Collection<Bala.DataType> collection, Bala.SourceReference? source_reference = null);
		public override void get_used_variables (Bala.Collection<Bala.Variable> collection);
		public Bala.Symbol declaration { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class Delegate : Bala.TypeSymbol, Bala.Callable {
		public Delegate (string? name, Bala.DataType return_type, Bala.SourceReference? source_reference = null, Bala.Comment? comment = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public void add_error_type (Bala.DataType error_type);
		public void add_type_parameter (Bala.TypeParameter p);
		public override bool check (Bala.CodeContext context);
		public override void get_error_types (Bala.Collection<Bala.DataType> collection, Bala.SourceReference? source_reference = null);
		public override int get_type_parameter_index (string name);
		public unowned Bala.List<Bala.TypeParameter> get_type_parameters ();
		public bool has_type_parameters ();
		public override bool is_reference_type ();
		public bool matches_method (Bala.Method m, Bala.DataType dt);
		public override void replace_type (Bala.DataType old_type, Bala.DataType new_type);
		public bool has_target { get; set; }
		public Bala.DataType? sender_type { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class DelegateDestroyField : Bala.Field {
		public DelegateDestroyField (Bala.SourceReference? source_reference = null);
	}
	[CCode (cheader_filename = "bala.h")]
	public class DelegateTargetField : Bala.Field {
		public DelegateTargetField (Bala.SourceReference? source_reference = null);
	}
	[CCode (cheader_filename = "bala.h")]
	public class DelegateType : Bala.CallableType {
		public DelegateType (Bala.Delegate delegate_symbol);
		public override bool check (Bala.CodeContext context);
		public override bool compatible (Bala.DataType target_type);
		public override Bala.DataType copy ();
		public override bool equals (Bala.DataType type2);
		public override Bala.Symbol? get_member (string member_name);
		public override bool is_accessible (Bala.Symbol sym);
		public override bool is_disposable ();
		public weak Bala.Delegate delegate_symbol { get; }
		public bool is_called_once { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class DeleteStatement : Bala.CodeNode, Bala.Statement {
		public DeleteStatement (Bala.Expression expression, Bala.SourceReference? source_reference = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public override bool check (Bala.CodeContext context);
		public override void emit (Bala.CodeGenerator codegen);
		public override void replace_expression (Bala.Expression old_node, Bala.Expression new_node);
		public Bala.Expression expression { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class Destructor : Bala.Subroutine {
		public Destructor (Bala.SourceReference? source_reference = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public override bool check (Bala.CodeContext context);
		public Bala.MemberBinding binding { get; set; }
		public override bool has_result { get; }
		public Bala.Parameter this_parameter { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class DoStatement : Bala.CodeNode, Bala.Statement {
		public DoStatement (Bala.Block body, Bala.Expression condition, Bala.SourceReference? source_reference = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public override bool check (Bala.CodeContext context);
		public override void replace_expression (Bala.Expression old_node, Bala.Expression new_node);
		public Bala.Block body { get; set; }
		public Bala.Expression condition { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class DynamicMethod : Bala.Method {
		public DynamicMethod (Bala.DataType dynamic_type, string name, Bala.DataType return_type, Bala.SourceReference? source_reference = null, Bala.Comment? comment = null);
		public override bool check (Bala.CodeContext context);
		public Bala.DataType dynamic_type { get; set; }
		public Bala.MethodCall invocation { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class DynamicProperty : Bala.Property {
		public DynamicProperty (Bala.DataType dynamic_type, string name, Bala.SourceReference? source_reference = null, Bala.Comment? comment = null);
		public override bool check (Bala.CodeContext context);
		public Bala.DataType dynamic_type { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class DynamicSignal : Bala.Signal {
		public DynamicSignal (Bala.DataType dynamic_type, string name, Bala.DataType return_type, Bala.SourceReference? source_reference = null, Bala.Comment? comment = null);
		public Bala.DataType dynamic_type { get; set; }
		public Bala.Expression handler { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class ElementAccess : Bala.Expression {
		public ElementAccess (Bala.Expression container, Bala.SourceReference? source_reference = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public void append_index (Bala.Expression index);
		public override bool check (Bala.CodeContext context);
		public override void emit (Bala.CodeGenerator codegen);
		public override void get_defined_variables (Bala.Collection<Bala.Variable> collection);
		public override void get_error_types (Bala.Collection<Bala.DataType> collection, Bala.SourceReference? source_reference = null);
		public unowned Bala.List<Bala.Expression> get_indices ();
		public override void get_used_variables (Bala.Collection<Bala.Variable> collection);
		public override bool is_accessible (Bala.Symbol sym);
		public override bool is_pure ();
		public override void replace_expression (Bala.Expression old_node, Bala.Expression new_node);
		public override string to_string ();
		public Bala.Expression container { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class EmptyStatement : Bala.CodeNode, Bala.Statement {
		public EmptyStatement (Bala.SourceReference? source = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void emit (Bala.CodeGenerator codegen);
	}
	[CCode (cheader_filename = "bala.h")]
	public class Enum : Bala.TypeSymbol {
		public Enum (string name, Bala.SourceReference? source_reference = null, Bala.Comment? comment = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public override void add_constant (Bala.Constant c);
		public override void add_method (Bala.Method m);
		public void add_value (Bala.EnumValue value);
		public override bool check (Bala.CodeContext context);
		public unowned Bala.List<Bala.Constant> get_constants ();
		public unowned Bala.List<Bala.Method> get_methods ();
		public unowned Bala.List<Bala.EnumValue> get_values ();
		public override bool is_reference_type ();
		public bool is_flags { get; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class EnumValue : Bala.Constant {
		public EnumValue (string name, Bala.Expression? value, Bala.SourceReference? source_reference = null, Bala.Comment? comment = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public override bool check (Bala.CodeContext context);
		public string nick { get; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class EnumValueType : Bala.ValueType {
		public EnumValueType (Bala.Enum type_symbol);
		public override Bala.DataType copy ();
		public override Bala.Symbol? get_member (string member_name);
		public unowned Bala.Method get_to_string_method ();
	}
	[CCode (cheader_filename = "bala.h")]
	public class ErrorCode : Bala.TypeSymbol {
		public ErrorCode (string name, Bala.SourceReference? source_reference = null, Bala.Comment? comment = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public override bool check (Bala.CodeContext context);
		public ErrorCode.with_value (string name, Bala.Expression value, Bala.SourceReference? source_reference = null);
		public Bala.Constant code { get; private set; }
		public Bala.Expression? value { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class ErrorDomain : Bala.TypeSymbol {
		public ErrorDomain (string name, Bala.SourceReference? source_reference = null, Bala.Comment? comment = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public void add_code (Bala.ErrorCode ecode);
		public override void add_method (Bala.Method m);
		public override bool check (Bala.CodeContext context);
		public unowned Bala.List<Bala.ErrorCode> get_codes ();
		public unowned Bala.List<Bala.Method> get_methods ();
		public override bool is_reference_type ();
	}
	[CCode (cheader_filename = "bala.h")]
	public class ErrorType : Bala.ReferenceType {
		public ErrorType (Bala.ErrorDomain? error_domain, Bala.ErrorCode? error_code, Bala.SourceReference? source_reference = null);
		public override bool check (Bala.CodeContext context);
		public override bool compatible (Bala.DataType target_type);
		public override Bala.DataType copy ();
		public override bool equals (Bala.DataType type2);
		public override Bala.Symbol? get_member (string member_name);
		public override bool is_reference_type_or_type_parameter ();
		public override string to_qualified_string (Bala.Scope? scope);
		public bool dynamic_error { get; set; }
		public weak Bala.ErrorCode? error_code { get; set; }
		public weak Bala.ErrorDomain? error_domain { get; }
	}
	[CCode (cheader_filename = "bala.h")]
	public abstract class Expression : Bala.CodeNode {
		protected Expression ();
		public void insert_statement (Bala.Block block, Bala.Statement stmt);
		public virtual bool is_accessible (Bala.Symbol sym);
		public virtual bool is_constant ();
		public virtual bool is_non_null ();
		public abstract bool is_pure ();
		public Bala.DataType? formal_target_type { get; set; }
		public Bala.DataType? formal_value_type { get; set; }
		public bool lvalue { get; set; }
		public Bala.Statement? parent_statement { get; }
		public weak Bala.Symbol symbol_reference { get; set; }
		public Bala.DataType target_type { get; set; }
		public Bala.TargetValue? target_value { get; set; }
		public Bala.DataType value_type { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class ExpressionStatement : Bala.CodeNode, Bala.Statement {
		public ExpressionStatement (Bala.Expression expression, Bala.SourceReference? source_reference = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public override bool check (Bala.CodeContext context);
		public override void emit (Bala.CodeGenerator codegen);
		public override void get_defined_variables (Bala.Collection<Bala.Variable> collection);
		public override void get_error_types (Bala.Collection<Bala.DataType> collection, Bala.SourceReference? source_reference = null);
		public override void get_used_variables (Bala.Collection<Bala.Variable> collection);
		public override void replace_expression (Bala.Expression old_node, Bala.Expression new_node);
		public Bala.Expression expression { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class Field : Bala.Variable, Bala.Lockable {
		public Field (string name, Bala.DataType variable_type, Bala.Expression? initializer, Bala.SourceReference? source_reference = null, Bala.Comment? comment = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public override bool check (Bala.CodeContext context);
		public override void replace_expression (Bala.Expression old_node, Bala.Expression new_node);
		public override void replace_type (Bala.DataType old_type, Bala.DataType new_type);
		public Bala.MemberBinding binding { get; set; }
		public bool is_volatile { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class FieldPrototype : Bala.DataType {
		public FieldPrototype (Bala.Field field_symbol);
		public override Bala.DataType copy ();
		public override string to_qualified_string (Bala.Scope? scope);
		public weak Bala.Field field_symbol { get; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class FloatingType : Bala.ValueType {
		public FloatingType (Bala.Struct type_symbol);
		public override Bala.DataType copy ();
	}
	[CCode (cheader_filename = "bala.h")]
	public class FlowAnalyzer : Bala.CodeVisitor {
		public FlowAnalyzer ();
		public void analyze (Bala.CodeContext context);
		public override void visit_block (Bala.Block b);
		public override void visit_break_statement (Bala.BreakStatement stmt);
		public override void visit_class (Bala.Class cl);
		public override void visit_continue_statement (Bala.ContinueStatement stmt);
		public override void visit_creation_method (Bala.CreationMethod m);
		public override void visit_declaration_statement (Bala.DeclarationStatement stmt);
		public override void visit_enum (Bala.Enum en);
		public override void visit_error_domain (Bala.ErrorDomain ed);
		public override void visit_expression (Bala.Expression expr);
		public override void visit_expression_statement (Bala.ExpressionStatement stmt);
		public override void visit_field (Bala.Field f);
		public override void visit_foreach_statement (Bala.ForeachStatement stmt);
		public override void visit_if_statement (Bala.IfStatement stmt);
		public override void visit_interface (Bala.Interface iface);
		public override void visit_lambda_expression (Bala.LambdaExpression le);
		public override void visit_local_variable (Bala.LocalVariable local);
		public override void visit_lock_statement (Bala.LockStatement stmt);
		public override void visit_loop (Bala.Loop stmt);
		public override void visit_method (Bala.Method m);
		public override void visit_property (Bala.Property prop);
		public override void visit_property_accessor (Bala.PropertyAccessor acc);
		public override void visit_return_statement (Bala.ReturnStatement stmt);
		public override void visit_signal (Bala.Signal sig);
		public override void visit_source_file (Bala.SourceFile source_file);
		public override void visit_struct (Bala.Struct st);
		public override void visit_switch_statement (Bala.SwitchStatement stmt);
		public override void visit_throw_statement (Bala.ThrowStatement stmt);
		public override void visit_try_statement (Bala.TryStatement stmt);
		public override void visit_unlock_statement (Bala.UnlockStatement stmt);
		public override void visit_yield_statement (Bala.YieldStatement stmt);
	}
	[CCode (cheader_filename = "bala.h")]
	public class ForStatement : Bala.CodeNode, Bala.Statement {
		public ForStatement (Bala.Expression? condition, Bala.Block body, Bala.SourceReference? source_reference = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public void add_initializer (Bala.Expression init);
		public void add_iterator (Bala.Expression iter);
		public override bool check (Bala.CodeContext context);
		public unowned Bala.List<Bala.Expression> get_initializer ();
		public unowned Bala.List<Bala.Expression> get_iterator ();
		public override void replace_expression (Bala.Expression old_node, Bala.Expression new_node);
		public Bala.Block body { get; set; }
		public Bala.Expression? condition { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class ForeachStatement : Bala.Block {
		public ForeachStatement (Bala.DataType? type_reference, string variable_name, Bala.Expression collection, Bala.Block body, Bala.SourceReference? source_reference = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public override bool check (Bala.CodeContext context);
		public override void emit (Bala.CodeGenerator codegen);
		public override void get_defined_variables (Bala.Collection<Bala.Variable> collection);
		public override void get_error_types (Bala.Collection<Bala.DataType> collection, Bala.SourceReference? source_reference = null);
		public override void replace_expression (Bala.Expression old_node, Bala.Expression new_node);
		public override void replace_type (Bala.DataType old_type, Bala.DataType new_type);
		public Bala.Block body { get; set; }
		public Bala.Expression collection { get; set; }
		public Bala.LocalVariable collection_variable { get; set; }
		public Bala.LocalVariable element_variable { get; set; }
		public Bala.LocalVariable iterator_variable { get; set; }
		public Bala.DataType? type_reference { get; set; }
		public bool use_iterator { get; private set; }
		public string variable_name { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class GenericDestroyField : Bala.Field {
		public GenericDestroyField (Bala.SourceReference? source_reference = null);
	}
	[CCode (cheader_filename = "bala.h")]
	public class GenericDupField : Bala.Field {
		public GenericDupField (Bala.SourceReference? source_reference = null);
	}
	[CCode (cheader_filename = "bala.h")]
	public class GenericType : Bala.DataType {
		public GenericType (Bala.TypeParameter type_parameter);
		public override Bala.DataType copy ();
		public override Bala.DataType get_actual_type (Bala.DataType? derived_instance_type, Bala.List<Bala.DataType>? method_type_arguments, Bala.CodeNode? node_reference);
		public override Bala.Symbol? get_member (string member_name);
		public override Bala.DataType? infer_type_argument (Bala.TypeParameter type_param, Bala.DataType value_type);
		public override string to_qualified_string (Bala.Scope? scope = null);
		public weak Bala.TypeParameter type_parameter { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class GirComment : Bala.Comment {
		public GirComment (string? comment, Bala.SourceReference _source_reference);
		public Bala.Comment? get_content_for_parameter (string name);
		public Bala.MapIterator<string,Bala.Comment> parameter_iterator ();
		public Bala.Comment? return_content { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class GirParser : Bala.CodeVisitor {
		public GirParser ();
		public void parse (Bala.CodeContext context);
		public void parse_file (Bala.SourceFile source_file);
		public override void visit_source_file (Bala.SourceFile source_file);
	}
	[CCode (cheader_filename = "bala.h")]
	public class IfStatement : Bala.CodeNode, Bala.Statement {
		public IfStatement (Bala.Expression cond, Bala.Block true_stmt, Bala.Block? false_stmt, Bala.SourceReference? source = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public override bool check (Bala.CodeContext context);
		public override void emit (Bala.CodeGenerator codegen);
		public override void get_error_types (Bala.Collection<Bala.DataType> collection, Bala.SourceReference? source_reference = null);
		public override void replace_expression (Bala.Expression old_node, Bala.Expression new_node);
		public Bala.Expression condition { get; set; }
		public Bala.Block? false_statement { get; set; }
		public Bala.Block true_statement { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class InitializerList : Bala.Expression {
		public InitializerList (Bala.SourceReference? source_reference = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public void append (Bala.Expression expr);
		public override bool check (Bala.CodeContext context);
		public override void emit (Bala.CodeGenerator codegen);
		public unowned Bala.List<Bala.Expression> get_initializers ();
		public override void get_used_variables (Bala.Collection<Bala.Variable> collection);
		public override bool is_accessible (Bala.Symbol sym);
		public override bool is_constant ();
		public override bool is_pure ();
		public override void replace_expression (Bala.Expression old_node, Bala.Expression new_node);
		public override string to_string ();
		public int size { get; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class IntegerLiteral : Bala.Literal {
		public IntegerLiteral (string i, Bala.SourceReference? source = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override bool check (Bala.CodeContext context);
		public override void emit (Bala.CodeGenerator codegen);
		public override bool is_pure ();
		public override string to_string ();
		public string type_suffix { get; set; }
		public string value { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class IntegerType : Bala.ValueType {
		public IntegerType (Bala.Struct type_symbol, string? literal_value = null, string? literal_type_name = null);
		public override bool compatible (Bala.DataType target_type);
		public override Bala.DataType copy ();
	}
	[CCode (cheader_filename = "bala.h")]
	public class Interface : Bala.ObjectTypeSymbol {
		public Interface (string name, Bala.SourceReference? source_reference = null, Bala.Comment? comment = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public override void add_method (Bala.Method m);
		public void add_prerequisite (Bala.DataType type);
		public override void add_property (Bala.Property prop);
		public override bool check (Bala.CodeContext context);
		public unowned Bala.List<Bala.DataType> get_prerequisites ();
		public virtual Bala.List<Bala.Symbol> get_virtuals ();
		public override bool is_reference_type ();
		public override bool is_subtype_of (Bala.TypeSymbol t);
		public override void replace_type (Bala.DataType old_type, Bala.DataType new_type);
	}
	[CCode (cheader_filename = "bala.h")]
	public class InterfaceType : Bala.ReferenceType {
		public InterfaceType (Bala.Interface interface_symbol);
		public override Bala.DataType copy ();
		public weak Bala.Interface interface_symbol { get; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class InvalidType : Bala.DataType {
		public InvalidType ();
		public override Bala.DataType copy ();
	}
	[CCode (cheader_filename = "bala.h")]
	public class LambdaExpression : Bala.Expression {
		public LambdaExpression (Bala.Expression expression_body, Bala.SourceReference? source_reference = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public void add_parameter (Bala.Parameter param);
		public override bool check (Bala.CodeContext context);
		public override void emit (Bala.CodeGenerator codegen);
		public unowned Bala.List<Bala.Parameter> get_parameters ();
		public override void get_used_variables (Bala.Collection<Bala.Variable> collection);
		public override bool is_pure ();
		public LambdaExpression.with_statement_body (Bala.Block statement_body, Bala.SourceReference? source_reference = null);
		public Bala.Expression expression_body { get; set; }
		public Bala.Method method { get; set; }
		public Bala.Block statement_body { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public abstract class Literal : Bala.Expression {
		protected Literal ();
		public override bool is_constant ();
		public override bool is_pure ();
	}
	[CCode (cheader_filename = "bala.h")]
	public class LocalVariable : Bala.Variable {
		public LocalVariable (Bala.DataType? variable_type, string name, Bala.Expression? initializer = null, Bala.SourceReference? source_reference = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public override bool check (Bala.CodeContext context);
		public override void replace_expression (Bala.Expression old_node, Bala.Expression new_node);
		public override void replace_type (Bala.DataType old_type, Bala.DataType new_type);
		public bool captured { get; set; }
		public bool init { get; set; }
		public bool is_result { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class LockStatement : Bala.CodeNode, Bala.Statement {
		public LockStatement (Bala.Expression resource, Bala.Block? body, Bala.SourceReference? source_reference = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override bool check (Bala.CodeContext context);
		public override void emit (Bala.CodeGenerator codegen);
		public override void replace_expression (Bala.Expression old_node, Bala.Expression new_node);
		public Bala.Block? body { get; set; }
		public Bala.Expression resource { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class Loop : Bala.CodeNode, Bala.Statement {
		public Loop (Bala.Block body, Bala.SourceReference? source_reference = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public override bool check (Bala.CodeContext context);
		public override void emit (Bala.CodeGenerator codegen);
		public override void get_error_types (Bala.Collection<Bala.DataType> collection, Bala.SourceReference? source_reference = null);
		public Bala.Block body { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class MarkupReader {
		public MarkupReader (string filename);
		public MarkupReader.from_string (string filename, string content);
		public string? get_attribute (string attr);
		public Bala.Map<string,string> get_attributes ();
		public Bala.MarkupTokenType read_token (out Bala.SourceLocation token_begin, out Bala.SourceLocation token_end);
		public string content { get; private set; }
		public string filename { get; private set; }
		public string name { get; private set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class MemberAccess : Bala.Expression {
		public MemberAccess (Bala.Expression? inner, string member_name, Bala.SourceReference? source_reference = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public void add_type_argument (Bala.DataType arg);
		public override bool check (Bala.CodeContext context);
		public void check_lvalue_access ();
		public override void emit (Bala.CodeGenerator codegen);
		public override void get_defined_variables (Bala.Collection<Bala.Variable> collection);
		public override void get_error_types (Bala.Collection<Bala.DataType> collection, Bala.SourceReference? source_reference = null);
		public unowned Bala.List<Bala.DataType> get_type_arguments ();
		public override void get_used_variables (Bala.Collection<Bala.Variable> collection);
		public override bool is_accessible (Bala.Symbol sym);
		public override bool is_constant ();
		public override bool is_non_null ();
		public override bool is_pure ();
		public MemberAccess.pointer (Bala.Expression inner, string member_name, Bala.SourceReference? source_reference = null);
		public override void replace_expression (Bala.Expression old_node, Bala.Expression new_node);
		public override void replace_type (Bala.DataType old_type, Bala.DataType new_type);
		public MemberAccess.simple (string member_name, Bala.SourceReference? source_reference = null);
		public override string to_string ();
		public bool creation_member { get; set; }
		public Bala.Expression? inner { get; set; }
		public string member_name { get; set; }
		public bool pointer_member_access { get; set; }
		public bool prototype_access { get; set; }
		public bool qualified { get; set; }
		public bool tainted_access { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class MemberInitializer : Bala.CodeNode {
		public MemberInitializer (string name, Bala.Expression initializer, Bala.SourceReference? source_reference = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override bool check (Bala.CodeContext context);
		public override void emit (Bala.CodeGenerator codegen);
		public override void get_used_variables (Bala.Collection<Bala.Variable> collection);
		public override void replace_expression (Bala.Expression old_node, Bala.Expression new_node);
		public Bala.Expression initializer { get; set; }
		public string name { get; set; }
		public weak Bala.Symbol symbol_reference { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class Method : Bala.Subroutine, Bala.Callable {
		protected Bala.List<Bala.DataType> error_types;
		public Method (string? name, Bala.DataType return_type, Bala.SourceReference? source_reference = null, Bala.Comment? comment = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public void add_captured_variable (Bala.LocalVariable local);
		public void add_error_type (Bala.DataType error_type);
		public void add_postcondition (Bala.Expression postcondition);
		public void add_precondition (Bala.Expression precondition);
		public void add_type_parameter (Bala.TypeParameter p);
		public override bool check (Bala.CodeContext context);
		public void clear_parameters ();
		public bool compatible (Bala.Method base_method, out string? invalid_match);
		public bool compatible_no_error (Bala.Method base_method);
		public Bala.List<Bala.Parameter> get_async_begin_parameters ();
		public Bala.List<Bala.Parameter> get_async_end_parameters ();
		public unowned Bala.Method get_callback_method ();
		public void get_captured_variables (Bala.Collection<Bala.LocalVariable> variables);
		public override void get_defined_variables (Bala.Collection<Bala.Variable> collection);
		public unowned Bala.Method get_end_method ();
		public override void get_error_types (Bala.Collection<Bala.DataType> collection, Bala.SourceReference? source_reference = null);
		public int get_format_arg_index ();
		public unowned Bala.List<Bala.Expression> get_postconditions ();
		public unowned Bala.List<Bala.Expression> get_preconditions ();
		public int get_required_arguments ();
		public int get_type_parameter_index (string name);
		public unowned Bala.List<Bala.TypeParameter> get_type_parameters ();
		public bool has_error_type_parameter ();
		public bool has_type_parameters ();
		public bool is_variadic ();
		public override void replace_type (Bala.DataType old_type, Bala.DataType new_type);
		public Bala.Method base_interface_method { get; }
		public Bala.DataType base_interface_type { get; set; }
		public Bala.Method base_method { get; }
		public Bala.MemberBinding binding { get; set; }
		public bool closure { get; set; }
		public bool coroutine { get; set; }
		public bool entry_point { get; private set; }
		public bool has_construct_function { get; set; }
		public override bool has_result { get; }
		public bool is_abstract { get; set; }
		public bool is_async_callback { get; set; }
		public bool is_inline { get; set; }
		public bool is_virtual { get; set; }
		public bool overrides { get; set; }
		public Bala.LocalVariable? params_array_var { get; protected set; }
		public bool printf_format { get; set; }
		public bool returns_floating_reference { get; set; }
		public bool returns_modified_pointer { get; set; }
		public bool scanf_format { get; set; }
		public weak Bala.Signal signal_reference { get; set; }
		public Bala.Parameter this_parameter { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class MethodCall : Bala.Expression {
		public MethodCall (Bala.Expression call, Bala.SourceReference? source_reference = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public void add_argument (Bala.Expression arg);
		public override bool check (Bala.CodeContext context);
		public override void emit (Bala.CodeGenerator codegen);
		public unowned Bala.List<Bala.Expression> get_argument_list ();
		public override void get_defined_variables (Bala.Collection<Bala.Variable> collection);
		public override void get_error_types (Bala.Collection<Bala.DataType> collection, Bala.SourceReference? source_reference = null);
		public Bala.StringLiteral? get_format_literal ();
		public override void get_used_variables (Bala.Collection<Bala.Variable> collection);
		public override bool is_accessible (Bala.Symbol sym);
		public override bool is_constant ();
		public override bool is_pure ();
		public override void replace_expression (Bala.Expression old_node, Bala.Expression new_node);
		public override string to_string ();
		public Bala.Expression call { get; set; }
		public bool is_assert { get; private set; }
		public bool is_chainup { get; private set; }
		public bool is_constructv_chainup { get; private set; }
		public bool is_yield_expression { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class MethodType : Bala.CallableType {
		public MethodType (Bala.Method method_symbol);
		public override bool compatible (Bala.DataType target_type);
		public override Bala.DataType copy ();
		public override Bala.Symbol? get_member (string member_name);
		public override string to_qualified_string (Bala.Scope? scope);
		public weak Bala.Method method_symbol { get; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class NamedArgument : Bala.Expression {
		public NamedArgument (string name, Bala.Expression inner, Bala.SourceReference? source_reference = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public override bool check (Bala.CodeContext context);
		public override void emit (Bala.CodeGenerator codegen);
		public override void get_defined_variables (Bala.Collection<Bala.Variable> collection);
		public override void get_used_variables (Bala.Collection<Bala.Variable> collection);
		public override bool is_pure ();
		public override void replace_expression (Bala.Expression old_node, Bala.Expression new_node);
		public Bala.Expression inner { get; set; }
		public string name { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class Namespace : Bala.Symbol {
		public Namespace (string? name, Bala.SourceReference? source_reference = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public override void add_class (Bala.Class cl);
		public void add_comment (Bala.Comment comment);
		public override void add_constant (Bala.Constant constant);
		public override void add_delegate (Bala.Delegate d);
		public override void add_enum (Bala.Enum en);
		public override void add_error_domain (Bala.ErrorDomain edomain);
		public override void add_field (Bala.Field f);
		public override void add_interface (Bala.Interface iface);
		public override void add_method (Bala.Method m);
		public override void add_namespace (Bala.Namespace ns);
		public override void add_struct (Bala.Struct st);
		public void add_using_directive (Bala.UsingDirective ns);
		public override bool check (Bala.CodeContext context);
		public unowned Bala.List<Bala.Class> get_classes ();
		public unowned Bala.List<Bala.Comment> get_comments ();
		public unowned Bala.List<Bala.Constant> get_constants ();
		public unowned Bala.List<Bala.Delegate> get_delegates ();
		public unowned Bala.List<Bala.Enum> get_enums ();
		public unowned Bala.List<Bala.ErrorDomain> get_error_domains ();
		public unowned Bala.List<Bala.Field> get_fields ();
		public unowned Bala.List<Bala.Interface> get_interfaces ();
		public unowned Bala.List<Bala.Method> get_methods ();
		public unowned Bala.List<Bala.Namespace> get_namespaces ();
		public unowned Bala.List<Bala.Struct> get_structs ();
		public override string to_string ();
	}
	[CCode (cheader_filename = "bala.h")]
	public class NullLiteral : Bala.Literal {
		public NullLiteral (Bala.SourceReference? source = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override bool check (Bala.CodeContext context);
		public override void emit (Bala.CodeGenerator codegen);
		public override bool is_pure ();
		public override string to_string ();
	}
	[CCode (cheader_filename = "bala.h")]
	public class NullType : Bala.ReferenceType {
		public NullType (Bala.SourceReference? source_reference = null);
		public override bool compatible (Bala.DataType target_type);
		public override Bala.DataType copy ();
		public override bool is_disposable ();
		public override string to_qualified_string (Bala.Scope? scope = null);
	}
	[CCode (cheader_filename = "bala.h")]
	public class ObjectCreationExpression : Bala.Expression {
		public ObjectCreationExpression (Bala.MemberAccess? member_name, Bala.SourceReference? source_reference = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public void add_argument (Bala.Expression arg);
		public void add_member_initializer (Bala.MemberInitializer init);
		public override bool check (Bala.CodeContext context);
		public override void emit (Bala.CodeGenerator codegen);
		public unowned Bala.List<Bala.Expression> get_argument_list ();
		public override void get_defined_variables (Bala.Collection<Bala.Variable> collection);
		public override void get_error_types (Bala.Collection<Bala.DataType> collection, Bala.SourceReference? source_reference = null);
		public unowned Bala.List<Bala.MemberInitializer> get_object_initializer ();
		public override void get_used_variables (Bala.Collection<Bala.Variable> collection);
		public override bool is_accessible (Bala.Symbol sym);
		public override bool is_pure ();
		public override void replace_expression (Bala.Expression old_node, Bala.Expression new_node);
		public override void replace_type (Bala.DataType old_type, Bala.DataType new_type);
		public bool is_yield_expression { get; set; }
		public Bala.MemberAccess? member_name { get; set; }
		public bool struct_creation { get; set; }
		public Bala.DataType type_reference { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class ObjectType : Bala.ReferenceType {
		public ObjectType (Bala.ObjectTypeSymbol type_symbol);
		public override bool check (Bala.CodeContext context);
		public override Bala.DataType copy ();
		public override unowned Bala.List<Bala.Parameter>? get_parameters ();
		public override unowned Bala.DataType? get_return_type ();
		public override bool is_invokable ();
		public override bool stricter (Bala.DataType target_type);
		public weak Bala.ObjectTypeSymbol object_type_symbol { get; }
	}
	[CCode (cheader_filename = "bala.h")]
	public abstract class ObjectTypeSymbol : Bala.TypeSymbol {
		protected ObjectTypeSymbol (string name, Bala.SourceReference? source_reference = null, Bala.Comment? comment = null);
		public override void accept_children (Bala.CodeVisitor visitor);
		public override void add_class (Bala.Class cl);
		public override void add_constant (Bala.Constant c);
		public override void add_delegate (Bala.Delegate d);
		public override void add_enum (Bala.Enum en);
		public override void add_field (Bala.Field f);
		public void add_hidden_method (Bala.Method m);
		public override void add_interface (Bala.Interface iface);
		public override void add_method (Bala.Method m);
		public override void add_property (Bala.Property prop);
		public override void add_signal (Bala.Signal sig);
		public override void add_struct (Bala.Struct st);
		public void add_type_parameter (Bala.TypeParameter p);
		public override bool check (Bala.CodeContext context);
		public unowned Bala.List<Bala.Class> get_classes ();
		public unowned Bala.List<Bala.Constant> get_constants ();
		public unowned Bala.List<Bala.Delegate> get_delegates ();
		public unowned Bala.List<Bala.Enum> get_enums ();
		public unowned Bala.List<Bala.Field> get_fields ();
		public unowned Bala.List<Bala.Interface> get_interfaces ();
		public unowned Bala.List<Bala.Symbol> get_members ();
		public unowned Bala.List<Bala.Method> get_methods ();
		public unowned Bala.List<Bala.Property> get_properties ();
		public unowned Bala.List<Bala.Signal> get_signals ();
		public unowned Bala.List<Bala.Struct> get_structs ();
		public override int get_type_parameter_index (string name);
		public unowned Bala.List<Bala.TypeParameter> get_type_parameters ();
		public bool has_type_parameters ();
	}
	[CCode (cheader_filename = "bala.h")]
	public class Parameter : Bala.Variable {
		public Parameter (string name, Bala.DataType? variable_type, Bala.SourceReference? source_reference = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public override bool check (Bala.CodeContext context);
		public Bala.Parameter copy ();
		public override void replace_expression (Bala.Expression old_node, Bala.Expression new_node);
		public override void replace_type (Bala.DataType old_type, Bala.DataType new_type);
		public Parameter.with_ellipsis (Bala.SourceReference? source_reference = null);
		public Bala.Parameter base_parameter { get; set; }
		public bool captured { get; set; }
		public Bala.ParameterDirection direction { get; set; }
		public bool ellipsis { get; set; }
		public bool format_arg { get; }
		public bool params_array { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class Parser : Bala.CodeVisitor {
		public Parser ();
		public void parse (Bala.CodeContext context);
		public void parse_file (Bala.SourceFile source_file);
		public override void visit_source_file (Bala.SourceFile source_file);
	}
	[CCode (cheader_filename = "bala.h")]
	public class PhiFunction {
		public PhiFunction (Bala.Variable variable, int num_of_ops);
		public Bala.List<Bala.Variable?> operands { get; private set; }
		public Bala.Variable original_variable { get; private set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class PointerIndirection : Bala.Expression {
		public PointerIndirection (Bala.Expression inner, Bala.SourceReference? source_reference = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override bool check (Bala.CodeContext context);
		public override void emit (Bala.CodeGenerator codegen);
		public override void get_defined_variables (Bala.Collection<Bala.Variable> collection);
		public override void get_error_types (Bala.Collection<Bala.DataType> collection, Bala.SourceReference? source_reference = null);
		public override void get_used_variables (Bala.Collection<Bala.Variable> collection);
		public override bool is_accessible (Bala.Symbol sym);
		public override bool is_pure ();
		public override void replace_expression (Bala.Expression old_node, Bala.Expression new_node);
		public override string to_string ();
		public Bala.Expression inner { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class PointerType : Bala.DataType {
		public PointerType (Bala.DataType base_type, Bala.SourceReference? source_reference = null);
		public override void accept_children (Bala.CodeVisitor visitor);
		public override bool check (Bala.CodeContext context);
		public override bool compatible (Bala.DataType target_type);
		public override Bala.DataType copy ();
		public override Bala.DataType get_actual_type (Bala.DataType? derived_instance_type, Bala.List<Bala.DataType>? method_type_arguments, Bala.CodeNode? node_reference);
		public override Bala.Symbol? get_member (string member_name);
		public override Bala.Symbol? get_pointer_member (string member_name);
		public override Bala.DataType? infer_type_argument (Bala.TypeParameter type_param, Bala.DataType value_type);
		public override bool is_accessible (Bala.Symbol sym);
		public override bool is_disposable ();
		public override void replace_type (Bala.DataType old_type, Bala.DataType new_type);
		public override bool stricter (Bala.DataType type2);
		public override string to_qualified_string (Bala.Scope? scope);
		public Bala.DataType base_type { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class PostfixExpression : Bala.Expression {
		public PostfixExpression (Bala.Expression _inner, bool inc, Bala.SourceReference? source = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public override bool check (Bala.CodeContext context);
		public override void emit (Bala.CodeGenerator codegen);
		public override void get_defined_variables (Bala.Collection<Bala.Variable> collection);
		public override void get_used_variables (Bala.Collection<Bala.Variable> collection);
		public override bool is_accessible (Bala.Symbol sym);
		public override bool is_pure ();
		public override void replace_expression (Bala.Expression old_node, Bala.Expression new_node);
		public override string to_string ();
		public bool increment { get; set; }
		public Bala.Expression inner { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class Property : Bala.Symbol, Bala.Lockable {
		public Property (string name, Bala.DataType? property_type, Bala.PropertyAccessor? get_accessor, Bala.PropertyAccessor? set_accessor, Bala.SourceReference? source_reference = null, Bala.Comment? comment = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public override bool check (Bala.CodeContext context);
		public bool compatible (Bala.Property base_property, out string? invalid_match);
		public override void replace_expression (Bala.Expression old_node, Bala.Expression new_node);
		public override void replace_type (Bala.DataType old_type, Bala.DataType new_type);
		public Bala.Property base_interface_property { get; }
		public Bala.Property base_property { get; }
		public Bala.MemberBinding binding { get; set; }
		public string blurb { get; }
		public Bala.Field? field { get; }
		public Bala.PropertyAccessor? get_accessor { get; set; }
		public Bala.Expression initializer { get; set; }
		public bool interface_only { get; set; }
		public bool is_abstract { get; set; }
		public bool is_virtual { get; set; }
		public string nick { get; }
		public bool notify { get; }
		public bool overrides { get; set; }
		public Bala.DataType? property_type { get; set; }
		public Bala.PropertyAccessor? set_accessor { get; set; }
		public Bala.Parameter this_parameter { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class PropertyAccessor : Bala.Subroutine {
		public PropertyAccessor (bool readable, bool writable, bool construction, Bala.DataType? value_type, Bala.Block? body, Bala.SourceReference? source_reference = null, Bala.Comment? comment = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public override bool check (Bala.CodeContext context);
		public Bala.Method? get_method ();
		public override void replace_type (Bala.DataType old_type, Bala.DataType new_type);
		public bool automatic_body { get; private set; }
		public bool construction { get; private set; }
		public override bool has_result { get; }
		public Bala.Property prop { get; }
		public bool readable { get; private set; }
		public Bala.Parameter value_parameter { get; private set; }
		public Bala.DataType? value_type { get; private set; }
		public bool writable { get; private set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class PropertyPrototype : Bala.DataType {
		public PropertyPrototype (Bala.Property property_symbol);
		public override Bala.DataType copy ();
		public override string to_qualified_string (Bala.Scope? scope);
		public weak Bala.Property property_symbol { get; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class RealLiteral : Bala.Literal {
		public RealLiteral (string r, Bala.SourceReference? source = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override bool check (Bala.CodeContext context);
		public override void emit (Bala.CodeGenerator codegen);
		public string get_type_name ();
		public override bool is_pure ();
		public override string to_string ();
		public string value { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class ReferenceTransferExpression : Bala.Expression {
		public ReferenceTransferExpression (Bala.Expression inner, Bala.SourceReference? source_reference = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public override bool check (Bala.CodeContext context);
		public override void emit (Bala.CodeGenerator codegen);
		public override void get_defined_variables (Bala.Collection<Bala.Variable> collection);
		public override void get_used_variables (Bala.Collection<Bala.Variable> collection);
		public override bool is_accessible (Bala.Symbol sym);
		public override bool is_pure ();
		public override void replace_expression (Bala.Expression old_node, Bala.Expression new_node);
		public override string to_string ();
		public Bala.Expression inner { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public abstract class ReferenceType : Bala.DataType {
		protected ReferenceType (Bala.Symbol? symbol);
	}
	[CCode (cheader_filename = "bala.h")]
	public class RegexLiteral : Bala.Literal {
		public RegexLiteral (string value, Bala.SourceReference? source_reference = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override bool check (Bala.CodeContext context);
		public override void emit (Bala.CodeGenerator codegen);
		public override bool is_non_null ();
		public override bool is_pure ();
		public override string to_string ();
		public string value { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class Report {
		public enum Colored {
			AUTO,
			NEVER,
			ALWAYS
		}
		protected int errors;
		protected int warnings;
		public Report ();
		public virtual void depr (Bala.SourceReference? source, string message);
		public static void deprecated (Bala.SourceReference? source, string message);
		public virtual void err (Bala.SourceReference? source, string message);
		public static void error (Bala.SourceReference? source, string message);
		public static void experimental (Bala.SourceReference? source, string message);
		public int get_errors ();
		public int get_warnings ();
		public virtual void note (Bala.SourceReference? source, string message);
		public static void notice (Bala.SourceReference? source, string message);
		public bool set_colors (string str, Bala.Report.Colored colored_output = Report.Colored.AUTO);
		public void set_verbose_errors (bool verbose);
		public virtual void warn (Bala.SourceReference? source, string message);
		public static void warning (Bala.SourceReference? source, string message);
		public bool enable_warnings { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class ReturnStatement : Bala.CodeNode, Bala.Statement {
		public ReturnStatement (Bala.Expression? return_expression = null, Bala.SourceReference? source_reference = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public override bool check (Bala.CodeContext context);
		public override void emit (Bala.CodeGenerator codegen);
		public override void get_defined_variables (Bala.Collection<Bala.Variable> collection);
		public override void get_error_types (Bala.Collection<Bala.DataType> collection, Bala.SourceReference? source_reference = null);
		public override void get_used_variables (Bala.Collection<Bala.Variable> collection);
		public override void replace_expression (Bala.Expression old_node, Bala.Expression new_node);
		public Bala.Expression? return_expression { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class Scanner {
		public Scanner (Bala.SourceFile source_file);
		public static Bala.TokenType get_identifier_or_keyword (char* begin, int len);
		public void parse_file_comments ();
		public Bala.Comment? pop_comment ();
		public Bala.TokenType read_regex_token (out Bala.SourceLocation token_begin, out Bala.SourceLocation token_end);
		public Bala.TokenType read_template_token (out Bala.SourceLocation token_begin, out Bala.SourceLocation token_end);
		public Bala.TokenType read_token (out Bala.SourceLocation token_begin, out Bala.SourceLocation token_end);
		public void seek (Bala.SourceLocation location);
		public Bala.SourceFile source_file { get; private set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class Scope {
		public Scope (Bala.Symbol? owner = null);
		public void add (string? name, Bala.Symbol sym);
		public unowned Bala.Map<string,Bala.Symbol> get_symbol_table ();
		public bool is_subscope_of (Bala.Scope? scope);
		public Bala.Symbol? lookup (string name);
		public void remove (string name);
		public weak Bala.Symbol owner { get; set; }
		public weak Bala.Scope parent_scope { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class SemanticAnalyzer : Bala.CodeVisitor {
		public Bala.DataType bool_type;
		public Bala.DataType char_type;
		public Bala.DelegateType delegate_target_destroy_type;
		public Bala.DataType delegate_target_type;
		public Bala.DataType double_type;
		public Bala.DataType garray_type;
		public Bala.DelegateType generics_dup_func_type;
		public Bala.Class gerror_type;
		public Bala.DataType glist_type;
		public Bala.DataType gslist_type;
		public Bala.Class gsource_type;
		public Bala.StructValueType gvalue_type;
		public Bala.DataType gvaluearray_type;
		public Bala.ObjectType gvariant_type;
		public Bala.Block insert_block;
		public Bala.DataType int16_type;
		public Bala.DataType int32_type;
		public Bala.DataType int8_type;
		public Bala.DataType int_type;
		public Bala.DataType list_type;
		public Bala.DataType long_type;
		public Bala.Class object_type;
		public Bala.DataType regex_type;
		public Bala.List<Bala.CodeNode> replaced_nodes;
		public Bala.DataType short_type;
		public Bala.DataType size_t_type;
		public Bala.DataType ssize_t_type;
		public Bala.DataType string_type;
		public Bala.DataType tuple_type;
		public Bala.DataType type_type;
		public Bala.DataType uchar_type;
		public Bala.DataType uint16_type;
		public Bala.DataType uint32_type;
		public Bala.DataType uint8_type;
		public Bala.DataType uint_type;
		public Bala.DataType ulong_type;
		public Bala.DataType unichar_type;
		public Bala.DataType ushort_type;
		public Bala.DataType va_list_type;
		public Bala.DataType void_type;
		public SemanticAnalyzer ();
		public void analyze (Bala.CodeContext context);
		public bool check_arguments (Bala.Expression expr, Bala.DataType mtype, Bala.List<Bala.Parameter> @params, Bala.List<Bala.Expression> args);
		public bool check_print_format (string format, Bala.Iterator<Bala.Expression> arg_it, Bala.SourceReference? source_reference = null);
		public void check_type (Bala.DataType type);
		public void check_type_arguments (Bala.MemberAccess access);
		public bool check_variadic_arguments (Bala.Iterator<Bala.Expression>? arg_it, int i, Bala.SourceReference? source_reference = null);
		public static Bala.Expression create_temp_access (Bala.LocalVariable local, Bala.DataType? target_type);
		public unowned Bala.Method? find_current_method ();
		public static unowned Bala.Method? find_parent_method (Bala.Symbol sym);
		public static unowned Bala.Symbol? find_parent_method_or_property_accessor (Bala.Symbol sym);
		public static unowned Bala.TypeSymbol? find_parent_type_symbol (Bala.Symbol sym);
		public static Bala.DataType get_actual_type (Bala.DataType? derived_instance_type, Bala.List<Bala.DataType>? method_type_arguments, Bala.GenericType generic_type, Bala.CodeNode? node_reference);
		public unowned Bala.DataType? get_arithmetic_result_type (Bala.DataType left_type, Bala.DataType right_type);
		public static Bala.DataType get_data_type_for_symbol (Bala.Symbol sym);
		public static unowned Bala.Symbol? get_symbol_for_data_type (Bala.DataType type);
		public static Bala.DataType? get_this_type (Bala.Symbol s, Bala.TypeSymbol? parent = null);
		public Bala.DataType? get_value_type_for_symbol (Bala.Symbol sym, bool lvalue);
		public bool is_gobject_property (Bala.Property prop);
		public bool is_gobject_property_type (Bala.DataType property_type);
		public bool is_in_constructor ();
		public bool is_in_destructor ();
		public bool is_in_instance_method ();
		public bool is_nullable_value_type_argument (Bala.DataType type_arg);
		public bool is_reference_type_argument (Bala.DataType type_arg);
		public bool is_signed_integer_type_argument (Bala.DataType type_arg);
		public bool is_type_accessible (Bala.Symbol sym, Bala.DataType type);
		public bool is_unsigned_integer_type_argument (Bala.DataType type_arg);
		public static Bala.Symbol? symbol_lookup_inherited (Bala.Symbol sym, string name);
		public void visit_member_initializer (Bala.MemberInitializer init, Bala.DataType type);
		public override void visit_source_file (Bala.SourceFile file);
		public Bala.Method? current_async_method { get; }
		public Bala.Class? current_class { get; }
		public Bala.Method? current_method { get; }
		public Bala.Symbol? current_method_or_property_accessor { get; }
		public Bala.PropertyAccessor? current_property_accessor { get; }
		public Bala.DataType? current_return_type { get; }
		public Bala.SourceFile current_source_file { get; set; }
		public Bala.Struct? current_struct { get; }
		public Bala.Symbol? current_symbol { get; set; }
		public Bala.TypeSymbol? current_type_symbol { get; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class Signal : Bala.Symbol, Bala.Callable {
		public Signal (string name, Bala.DataType return_type, Bala.SourceReference? source_reference = null, Bala.Comment? comment = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public override bool check (Bala.CodeContext context);
		public Bala.Delegate get_delegate (Bala.DataType sender_type, Bala.CodeNode node_reference);
		public override void replace_type (Bala.DataType old_type, Bala.DataType new_type);
		public Bala.Block body { get; set; }
		public Bala.Method default_handler { get; private set; }
		public Bala.Method emitter { get; private set; }
		public bool is_virtual { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class SignalType : Bala.CallableType {
		public SignalType (Bala.Signal signal_symbol);
		public override bool compatible (Bala.DataType target_type);
		public override Bala.DataType copy ();
		public Bala.DelegateType get_handler_type ();
		public override Bala.Symbol? get_member (string member_name);
		public override bool is_accessible (Bala.Symbol sym);
		public override string to_qualified_string (Bala.Scope? scope);
		public weak Bala.Signal signal_symbol { get; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class SizeofExpression : Bala.Expression {
		public SizeofExpression (Bala.DataType type, Bala.SourceReference? source = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public override bool check (Bala.CodeContext context);
		public override void emit (Bala.CodeGenerator codegen);
		public override bool is_constant ();
		public override bool is_pure ();
		public override void replace_type (Bala.DataType old_type, Bala.DataType new_type);
		public Bala.DataType type_reference { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class SliceExpression : Bala.Expression {
		public SliceExpression (Bala.Expression container, Bala.Expression start, Bala.Expression stop, Bala.SourceReference? source_reference = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public override bool check (Bala.CodeContext context);
		public override void emit (Bala.CodeGenerator codegen);
		public override void get_defined_variables (Bala.Collection<Bala.Variable> collection);
		public override void get_used_variables (Bala.Collection<Bala.Variable> collection);
		public override bool is_accessible (Bala.Symbol sym);
		public override bool is_pure ();
		public override void replace_expression (Bala.Expression old_node, Bala.Expression new_node);
		public Bala.Expression container { get; set; }
		public Bala.Expression start { get; private set; }
		public Bala.Expression stop { get; private set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class SourceFile {
		public SourceFile (Bala.CodeContext context, Bala.SourceFileType type, string filename, string? content = null, bool cmdline = false);
		public void accept (Bala.CodeVisitor visitor);
		public void accept_children (Bala.CodeVisitor visitor);
		public void add_comment (Bala.Comment comment);
		public void add_node (Bala.CodeNode node);
		public void add_using_directive (Bala.UsingDirective ns);
		public bool check (Bala.CodeContext context);
		public string get_cinclude_filename ();
		public unowned Bala.List<Bala.Comment> get_comments ();
		public string get_csource_filename ();
		public char* get_mapped_contents ();
		public size_t get_mapped_length ();
		public unowned Bala.List<Bala.CodeNode> get_nodes ();
		public string get_relative_filename ();
		public string? get_source_line (int lineno);
		public void remove_node (Bala.CodeNode node);
		public string? content { get; set; }
		public weak Bala.CodeContext context { get; set; }
		public Bala.List<Bala.UsingDirective> current_using_directives { get; set; }
		public Bala.SourceFileType file_type { get; set; }
		public string filename { get; private set; }
		public bool from_commandline { get; set; }
		public string gir_namespace { get; set; }
		public string gir_version { get; set; }
		public string? installed_version { get; set; }
		public string? package_name { get; set; }
		public string? relative_filename { set; }
		public bool used { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class SourceReference {
		public SourceReference (Bala.SourceFile _file, Bala.SourceLocation begin, Bala.SourceLocation end);
		public bool contains (Bala.SourceLocation location);
		public string to_string ();
		public Bala.SourceLocation begin { get; set; }
		public Bala.SourceLocation end { get; set; }
		public weak Bala.SourceFile file { get; set; }
		public Bala.List<Bala.UsingDirective> using_directives { get; private set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class StatementList : Bala.CodeNode, Bala.Statement {
		public StatementList (Bala.SourceReference? source_reference = null);
		public override void accept (Bala.CodeVisitor visitor);
		public void add (Bala.Statement stmt);
		public override bool check (Bala.CodeContext context);
		public override void emit (Bala.CodeGenerator codegen);
		public Bala.Statement @get (int index);
		public override void get_error_types (Bala.Collection<Bala.DataType> collection, Bala.SourceReference? source_reference = null);
		public void insert (int index, Bala.Statement stmt);
		public void @set (int index, Bala.Statement stmt);
		public int length { get; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class StringLiteral : Bala.Literal {
		public StringLiteral (string value, Bala.SourceReference? source_reference = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override bool check (Bala.CodeContext context);
		public override void emit (Bala.CodeGenerator codegen);
		public string? eval ();
		public static Bala.StringLiteral? get_format_literal (Bala.Expression expr);
		public override bool is_non_null ();
		public override bool is_pure ();
		public override string to_string ();
		public bool translate { get; set; }
		public string value { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class Struct : Bala.TypeSymbol {
		public Struct (string name, Bala.SourceReference? source_reference = null, Bala.Comment? comment = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public override void add_constant (Bala.Constant c);
		public override void add_field (Bala.Field f);
		public override void add_method (Bala.Method m);
		public override void add_property (Bala.Property prop);
		public void add_type_parameter (Bala.TypeParameter p);
		public override bool check (Bala.CodeContext context);
		public unowned Bala.List<Bala.Constant> get_constants ();
		public unowned Bala.List<Bala.Field> get_fields ();
		public unowned Bala.List<Bala.Method> get_methods ();
		public unowned Bala.List<Bala.Property> get_properties ();
		public override int get_type_parameter_index (string name);
		public unowned Bala.List<Bala.TypeParameter> get_type_parameters ();
		public bool is_boolean_type ();
		public bool is_decimal_floating_type ();
		public bool is_disposable ();
		public bool is_floating_type ();
		public bool is_integer_type ();
		public bool is_simple_type ();
		public override bool is_subtype_of (Bala.TypeSymbol t);
		public override void replace_type (Bala.DataType old_type, Bala.DataType new_type);
		public void set_simple_type (bool simple_type);
		public Bala.Struct? base_struct { get; }
		public Bala.DataType? base_type { get; set; }
		public Bala.CreationMethod? default_construction_method { get; private set; }
		public bool is_immutable { get; set; }
		public int rank { get; set; }
		public bool signed { get; set; }
		public int width { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class StructValueType : Bala.ValueType {
		public StructValueType (Bala.Struct type_symbol);
		public override Bala.DataType copy ();
		public override unowned Bala.List<Bala.Parameter>? get_parameters ();
		public override unowned Bala.DataType? get_return_type ();
		public override bool is_invokable ();
	}
	[CCode (cheader_filename = "bala.h")]
	public abstract class Subroutine : Bala.Symbol {
		protected Subroutine (string? name, Bala.SourceReference? source_reference = null, Bala.Comment? comment = null);
		public Bala.Block body { get; set; }
		public Bala.BasicBlock entry_block { get; set; }
		public Bala.BasicBlock exit_block { get; set; }
		public abstract bool has_result { get; }
		public Bala.LocalVariable result_var { get; set; }
		public Bala.BasicBlock return_block { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class SwitchLabel : Bala.CodeNode {
		public SwitchLabel (Bala.Expression expr, Bala.SourceReference? source = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public override bool check (Bala.CodeContext context);
		public override void emit (Bala.CodeGenerator codegen);
		public SwitchLabel.with_default (Bala.SourceReference? source = null);
		public Bala.Expression expression { get; set; }
		public weak Bala.SwitchSection section { get; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class SwitchSection : Bala.Block {
		public SwitchSection (Bala.SourceReference? source_reference = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public void add_label (Bala.SwitchLabel label);
		public override bool check (Bala.CodeContext context);
		public override void emit (Bala.CodeGenerator codegen);
		public unowned Bala.List<Bala.SwitchLabel> get_labels ();
		public bool has_default_label ();
	}
	[CCode (cheader_filename = "bala.h")]
	public class SwitchStatement : Bala.CodeNode, Bala.Statement {
		public SwitchStatement (Bala.Expression expression, Bala.SourceReference? source_reference = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public void add_section (Bala.SwitchSection section);
		public override bool check (Bala.CodeContext context);
		public override void emit (Bala.CodeGenerator codegen);
		public override void get_error_types (Bala.Collection<Bala.DataType> collection, Bala.SourceReference? source_reference = null);
		public unowned Bala.List<Bala.SwitchSection> get_sections ();
		public override void replace_expression (Bala.Expression old_node, Bala.Expression new_node);
		public Bala.Expression expression { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public abstract class Symbol : Bala.CodeNode {
		protected Symbol (string? name, Bala.SourceReference? source_reference = null, Bala.Comment? comment = null);
		public virtual void add_class (Bala.Class cl);
		public virtual void add_constant (Bala.Constant constant);
		public virtual void add_constructor (Bala.Constructor c);
		public virtual void add_delegate (Bala.Delegate d);
		public virtual void add_destructor (Bala.Destructor d);
		public virtual void add_enum (Bala.Enum en);
		public virtual void add_error_domain (Bala.ErrorDomain edomain);
		public virtual void add_field (Bala.Field f);
		public virtual void add_interface (Bala.Interface iface);
		public virtual void add_method (Bala.Method m);
		public virtual void add_namespace (Bala.Namespace ns);
		public virtual void add_property (Bala.Property prop);
		public virtual void add_signal (Bala.Signal sig);
		public virtual void add_struct (Bala.Struct st);
		public static string camel_case_to_lower_case (string camel_case);
		public static bool equal_func (Bala.Symbol a, Bala.Symbol b);
		public string get_full_name ();
		public Bala.Symbol? get_hidden_member ();
		public Bala.Scope? get_top_accessible_scope (bool is_internal = false);
		public static uint hash_func (Bala.Symbol s);
		public bool is_accessible (Bala.Symbol sym);
		public virtual bool is_class_member ();
		public virtual bool is_instance_member ();
		public bool is_internal_symbol ();
		public bool is_private_symbol ();
		public static string lower_case_to_camel_case (string lower_case);
		public override string to_string ();
		public Bala.SymbolAccessibility access { get; set; }
		public bool active { get; set; }
		public bool anonymous { get; set; }
		public Bala.Comment? comment { get; set; }
		public bool external { get; set; }
		public bool external_package { get; }
		public bool from_commandline { get; }
		public bool hides { get; set; }
		public bool is_extern { get; set; }
		public string? name { get; set; }
		public weak Bala.Scope owner { get; set; }
		public weak Bala.Symbol? parent_symbol { get; }
		public Bala.Scope scope { get; }
		public Bala.SourceFileType source_type { get; }
		public bool used { get; set; }
		public Bala.VersionAttribute version { get; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class SymbolResolver : Bala.CodeVisitor {
		public SymbolResolver ();
		public void resolve (Bala.CodeContext context);
		public override void visit_addressof_expression (Bala.AddressofExpression expr);
		public override void visit_array_creation_expression (Bala.ArrayCreationExpression e);
		public override void visit_assignment (Bala.Assignment a);
		public override void visit_binary_expression (Bala.BinaryExpression expr);
		public override void visit_block (Bala.Block b);
		public override void visit_cast_expression (Bala.CastExpression expr);
		public override void visit_catch_clause (Bala.CatchClause clause);
		public override void visit_class (Bala.Class cl);
		public override void visit_conditional_expression (Bala.ConditionalExpression expr);
		public override void visit_constant (Bala.Constant c);
		public override void visit_constructor (Bala.Constructor c);
		public override void visit_creation_method (Bala.CreationMethod m);
		public override void visit_data_type (Bala.DataType data_type);
		public override void visit_declaration_statement (Bala.DeclarationStatement stmt);
		public override void visit_delegate (Bala.Delegate cb);
		public override void visit_delete_statement (Bala.DeleteStatement stmt);
		public override void visit_destructor (Bala.Destructor d);
		public override void visit_do_statement (Bala.DoStatement stmt);
		public override void visit_element_access (Bala.ElementAccess expr);
		public override void visit_enum (Bala.Enum en);
		public override void visit_error_domain (Bala.ErrorDomain ed);
		public override void visit_expression_statement (Bala.ExpressionStatement stmt);
		public override void visit_field (Bala.Field f);
		public override void visit_for_statement (Bala.ForStatement stmt);
		public override void visit_foreach_statement (Bala.ForeachStatement stmt);
		public override void visit_formal_parameter (Bala.Parameter p);
		public override void visit_if_statement (Bala.IfStatement stmt);
		public override void visit_initializer_list (Bala.InitializerList list);
		public override void visit_interface (Bala.Interface iface);
		public override void visit_lambda_expression (Bala.LambdaExpression l);
		public override void visit_local_variable (Bala.LocalVariable local);
		public override void visit_loop (Bala.Loop stmt);
		public override void visit_member_access (Bala.MemberAccess expr);
		public override void visit_method (Bala.Method m);
		public override void visit_method_call (Bala.MethodCall expr);
		public override void visit_named_argument (Bala.NamedArgument expr);
		public override void visit_namespace (Bala.Namespace ns);
		public override void visit_object_creation_expression (Bala.ObjectCreationExpression expr);
		public override void visit_postfix_expression (Bala.PostfixExpression expr);
		public override void visit_property (Bala.Property prop);
		public override void visit_property_accessor (Bala.PropertyAccessor acc);
		public override void visit_reference_transfer_expression (Bala.ReferenceTransferExpression expr);
		public override void visit_return_statement (Bala.ReturnStatement stmt);
		public override void visit_signal (Bala.Signal sig);
		public override void visit_sizeof_expression (Bala.SizeofExpression expr);
		public override void visit_slice_expression (Bala.SliceExpression expr);
		public override void visit_struct (Bala.Struct st);
		public override void visit_switch_label (Bala.SwitchLabel label);
		public override void visit_switch_section (Bala.SwitchSection section);
		public override void visit_switch_statement (Bala.SwitchStatement stmt);
		public override void visit_template (Bala.Template tmpl);
		public override void visit_throw_statement (Bala.ThrowStatement stmt);
		public override void visit_try_statement (Bala.TryStatement stmt);
		public override void visit_tuple (Bala.Tuple tuple);
		public override void visit_type_check (Bala.TypeCheck expr);
		public override void visit_typeof_expression (Bala.TypeofExpression expr);
		public override void visit_unary_expression (Bala.UnaryExpression expr);
		public override void visit_using_directive (Bala.UsingDirective ns);
		public override void visit_while_statement (Bala.WhileStatement stmt);
		public override void visit_yield_statement (Bala.YieldStatement stmt);
	}
	[CCode (cheader_filename = "bala.h")]
	public abstract class TargetValue {
		protected TargetValue (Bala.DataType? value_type);
		public Bala.DataType? actual_value_type { get; set; }
		public Bala.DataType? value_type { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class Template : Bala.Expression {
		public Template (Bala.SourceReference? source_reference = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public void add_expression (Bala.Expression expr);
		public override bool check (Bala.CodeContext context);
		public unowned Bala.List<Bala.Expression> get_expressions ();
		public override bool is_pure ();
		public override void replace_expression (Bala.Expression old_node, Bala.Expression new_node);
	}
	[CCode (cheader_filename = "bala.h")]
	public class ThrowStatement : Bala.CodeNode, Bala.Statement {
		public ThrowStatement (Bala.Expression error_expression, Bala.SourceReference? source_reference = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public override bool check (Bala.CodeContext context);
		public override void emit (Bala.CodeGenerator codegen);
		public override void get_defined_variables (Bala.Collection<Bala.Variable> collection);
		public override void get_error_types (Bala.Collection<Bala.DataType> collection, Bala.SourceReference? source_reference = null);
		public override void get_used_variables (Bala.Collection<Bala.Variable> collection);
		public override void replace_expression (Bala.Expression old_node, Bala.Expression new_node);
		public Bala.Expression error_expression { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class TraverseVisitor : Bala.CodeVisitor {
		public TraverseVisitor (owned Bala.TraverseFunc func);
		public override void visit_addressof_expression (Bala.AddressofExpression expr);
		public override void visit_array_creation_expression (Bala.ArrayCreationExpression expr);
		public override void visit_assignment (Bala.Assignment expr);
		public override void visit_binary_expression (Bala.BinaryExpression expr);
		public override void visit_block (Bala.Block b);
		public override void visit_break_statement (Bala.BreakStatement stmt);
		public override void visit_cast_expression (Bala.CastExpression expr);
		public override void visit_catch_clause (Bala.CatchClause clause);
		public override void visit_class (Bala.Class cl);
		public override void visit_conditional_expression (Bala.ConditionalExpression expr);
		public override void visit_constant (Bala.Constant c);
		public override void visit_constructor (Bala.Constructor c);
		public override void visit_continue_statement (Bala.ContinueStatement stmt);
		public override void visit_creation_method (Bala.CreationMethod m);
		public override void visit_declaration_statement (Bala.DeclarationStatement stmt);
		public override void visit_delegate (Bala.Delegate d);
		public override void visit_delete_statement (Bala.DeleteStatement stmt);
		public override void visit_destructor (Bala.Destructor d);
		public override void visit_do_statement (Bala.DoStatement stmt);
		public override void visit_element_access (Bala.ElementAccess expr);
		public override void visit_enum (Bala.Enum en);
		public override void visit_enum_value (Bala.EnumValue ev);
		public override void visit_error_code (Bala.ErrorCode ecode);
		public override void visit_error_domain (Bala.ErrorDomain edomain);
		public override void visit_expression_statement (Bala.ExpressionStatement stmt);
		public override void visit_field (Bala.Field f);
		public override void visit_for_statement (Bala.ForStatement stmt);
		public override void visit_foreach_statement (Bala.ForeachStatement stmt);
		public override void visit_formal_parameter (Bala.Parameter p);
		public override void visit_if_statement (Bala.IfStatement stmt);
		public override void visit_initializer_list (Bala.InitializerList list);
		public override void visit_interface (Bala.Interface iface);
		public override void visit_lambda_expression (Bala.LambdaExpression expr);
		public override void visit_local_variable (Bala.LocalVariable local);
		public override void visit_lock_statement (Bala.LockStatement stmt);
		public override void visit_loop (Bala.Loop loop);
		public override void visit_member_access (Bala.MemberAccess expr);
		public override void visit_method (Bala.Method m);
		public override void visit_method_call (Bala.MethodCall expr);
		public override void visit_namespace (Bala.Namespace ns);
		public override void visit_object_creation_expression (Bala.ObjectCreationExpression expr);
		public override void visit_pointer_indirection (Bala.PointerIndirection expr);
		public override void visit_postfix_expression (Bala.PostfixExpression expr);
		public override void visit_property (Bala.Property prop);
		public override void visit_property_accessor (Bala.PropertyAccessor acc);
		public override void visit_reference_transfer_expression (Bala.ReferenceTransferExpression expr);
		public override void visit_return_statement (Bala.ReturnStatement stmt);
		public override void visit_signal (Bala.Signal sig);
		public override void visit_slice_expression (Bala.SliceExpression expr);
		public override void visit_struct (Bala.Struct st);
		public override void visit_switch_label (Bala.SwitchLabel label);
		public override void visit_switch_section (Bala.SwitchSection section);
		public override void visit_switch_statement (Bala.SwitchStatement stmt);
		public override void visit_throw_statement (Bala.ThrowStatement stmt);
		public override void visit_try_statement (Bala.TryStatement stmt);
		public override void visit_unary_expression (Bala.UnaryExpression expr);
		public override void visit_unlock_statement (Bala.UnlockStatement stmt);
		public override void visit_while_statement (Bala.WhileStatement stmt);
		public override void visit_yield_statement (Bala.YieldStatement stmt);
	}
	[CCode (cheader_filename = "bala.h")]
	public class TryStatement : Bala.CodeNode, Bala.Statement {
		public TryStatement (Bala.Block body, Bala.Block? finally_body, Bala.SourceReference? source_reference = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public void add_catch_clause (Bala.CatchClause clause);
		public override bool check (Bala.CodeContext context);
		public override void emit (Bala.CodeGenerator codegen);
		public unowned Bala.List<Bala.CatchClause> get_catch_clauses ();
		public override void get_error_types (Bala.Collection<Bala.DataType> collection, Bala.SourceReference? source_reference = null);
		public bool after_try_block_reachable { get; set; }
		public Bala.Block body { get; set; }
		public Bala.Block? finally_body { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class Tuple : Bala.Expression {
		public Tuple (Bala.SourceReference? source_reference = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public void add_expression (Bala.Expression expr);
		public override bool check (Bala.CodeContext context);
		public override void emit (Bala.CodeGenerator codegen);
		public unowned Bala.List<Bala.Expression> get_expressions ();
		public override bool is_pure ();
		public override void replace_expression (Bala.Expression old_node, Bala.Expression new_node);
	}
	[CCode (cheader_filename = "bala.h")]
	public class TypeCheck : Bala.Expression {
		public TypeCheck (Bala.Expression expr, Bala.DataType type, Bala.SourceReference? source = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public override bool check (Bala.CodeContext context);
		public override void emit (Bala.CodeGenerator codegen);
		public override bool is_pure ();
		public override void replace_expression (Bala.Expression old_node, Bala.Expression new_node);
		public override void replace_type (Bala.DataType old_type, Bala.DataType new_type);
		public override string to_string ();
		public Bala.Expression expression { get; set; }
		public Bala.DataType type_reference { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class TypeParameter : Bala.Symbol {
		public TypeParameter (string name, Bala.SourceReference? source_reference = null);
		public override void accept (Bala.CodeVisitor visitor);
		public bool equals (Bala.TypeParameter param2);
	}
	[CCode (cheader_filename = "bala.h")]
	public abstract class TypeSymbol : Bala.Symbol {
		protected TypeSymbol (string? name, Bala.SourceReference? source_reference = null, Bala.Comment? comment = null);
		public virtual int get_type_parameter_index (string name);
		public virtual bool is_reference_type ();
		public virtual bool is_subtype_of (Bala.TypeSymbol t);
	}
	[CCode (cheader_filename = "bala.h")]
	public class TypeofExpression : Bala.Expression {
		public TypeofExpression (Bala.DataType type, Bala.SourceReference? source = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public override bool check (Bala.CodeContext context);
		public override void emit (Bala.CodeGenerator codegen);
		public override bool is_pure ();
		public override void replace_type (Bala.DataType old_type, Bala.DataType new_type);
		public Bala.DataType type_reference { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class UnaryExpression : Bala.Expression {
		public UnaryExpression (Bala.UnaryOperator op, Bala.Expression _inner, Bala.SourceReference? source = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public override bool check (Bala.CodeContext context);
		public override void emit (Bala.CodeGenerator codegen);
		public override void get_defined_variables (Bala.Collection<Bala.Variable> collection);
		public override void get_error_types (Bala.Collection<Bala.DataType> collection, Bala.SourceReference? source_reference = null);
		public override void get_used_variables (Bala.Collection<Bala.Variable> collection);
		public override bool is_accessible (Bala.Symbol sym);
		public override bool is_constant ();
		public override bool is_pure ();
		public override void replace_expression (Bala.Expression old_node, Bala.Expression new_node);
		public override string to_string ();
		public Bala.Expression inner { get; set; }
		public Bala.UnaryOperator operator { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class UnlockStatement : Bala.CodeNode, Bala.Statement {
		public UnlockStatement (Bala.Expression resource, Bala.SourceReference? source_reference = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override bool check (Bala.CodeContext context);
		public override void emit (Bala.CodeGenerator codegen);
		public override void replace_expression (Bala.Expression old_node, Bala.Expression new_node);
		public Bala.Expression resource { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class UnresolvedSymbol : Bala.Symbol {
		public UnresolvedSymbol (Bala.UnresolvedSymbol? inner, string name, Bala.SourceReference? source_reference = null);
		public Bala.UnresolvedSymbol copy ();
		public static Bala.UnresolvedSymbol? new_from_expression (Bala.Expression expr);
		public override string to_string ();
		public Bala.UnresolvedSymbol? inner { get; set; }
		public bool qualified { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class UnresolvedType : Bala.DataType {
		public UnresolvedType ();
		public override Bala.DataType copy ();
		public UnresolvedType.from_symbol (Bala.UnresolvedSymbol symbol, Bala.SourceReference? source = null);
		public override bool is_disposable ();
		public static Bala.UnresolvedType? new_from_expression (Bala.Expression expr);
		public override string to_qualified_string (Bala.Scope? scope);
		public Bala.UnresolvedSymbol unresolved_symbol { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class UsedAttr : Bala.CodeVisitor {
		public Bala.Map<string,Bala.Set<string>> marked;
		public UsedAttr ();
		public void check_unused (Bala.CodeContext context);
		public void mark (string attribute, string? argument);
		public override void visit_class (Bala.Class cl);
		public override void visit_constant (Bala.Constant c);
		public override void visit_creation_method (Bala.CreationMethod m);
		public override void visit_delegate (Bala.Delegate cb);
		public override void visit_enum (Bala.Enum en);
		public override void visit_error_domain (Bala.ErrorDomain ed);
		public override void visit_field (Bala.Field f);
		public override void visit_formal_parameter (Bala.Parameter p);
		public override void visit_interface (Bala.Interface iface);
		public override void visit_method (Bala.Method m);
		public override void visit_namespace (Bala.Namespace ns);
		public override void visit_property (Bala.Property prop);
		public override void visit_signal (Bala.Signal sig);
		public override void visit_struct (Bala.Struct st);
	}
	[CCode (cheader_filename = "bala.h")]
	public class UsingDirective : Bala.CodeNode {
		public UsingDirective (Bala.Symbol namespace_symbol, Bala.SourceReference? source_reference = null);
		public override void accept (Bala.CodeVisitor visitor);
		public weak Bala.Symbol namespace_symbol { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public abstract class ValueType : Bala.DataType {
		protected ValueType (Bala.TypeSymbol type_symbol);
		public override bool check (Bala.CodeContext context);
		public override bool is_disposable ();
	}
	[CCode (cheader_filename = "bala.h")]
	public class VarType : Bala.DataType {
		public VarType (bool value_owned = true);
		public override Bala.DataType copy ();
		public override string to_qualified_string (Bala.Scope? scope);
	}
	[CCode (cheader_filename = "bala.h")]
	public class Variable : Bala.Symbol {
		public Variable (Bala.DataType? variable_type, string? name, Bala.Expression? initializer = null, Bala.SourceReference? source_reference = null, Bala.Comment? comment = null);
		public Bala.Expression? initializer { get; set; }
		public bool single_assignment { get; set; }
		public Bala.DataType? variable_type { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class VersionAttribute {
		public VersionAttribute (Bala.Symbol symbol);
		public bool check (Bala.SourceReference? source_ref = null);
		public static int cmp_versions (string v1str, string v2str);
		public bool deprecated { get; set; }
		public string? deprecated_since { owned get; set; }
		public bool experimental { get; set; }
		public string? experimental_until { owned get; set; }
		public string? replacement { owned get; set; }
		public string? since { owned get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class VoidType : Bala.DataType {
		public VoidType (Bala.SourceReference? source_reference = null);
		public override bool compatible (Bala.DataType type2);
		public override Bala.DataType copy ();
		public override bool stricter (Bala.DataType type2);
		public override string to_qualified_string (Bala.Scope? scope);
	}
	[CCode (cheader_filename = "bala.h")]
	public class WhileStatement : Bala.CodeNode, Bala.Statement {
		public WhileStatement (Bala.Expression condition, Bala.Block body, Bala.SourceReference? source_reference = null);
		public override void accept (Bala.CodeVisitor visitor);
		public override void accept_children (Bala.CodeVisitor visitor);
		public override bool check (Bala.CodeContext context);
		public override void replace_expression (Bala.Expression old_node, Bala.Expression new_node);
		public Bala.Block body { get; set; }
		public Bala.Expression condition { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public class YieldStatement : Bala.CodeNode, Bala.Statement {
		public YieldStatement (Bala.SourceReference? source_reference = null);
		public override bool check (Bala.CodeContext context);
		public override void emit (Bala.CodeGenerator codegen);
	}
	[CCode (cheader_filename = "bala.h")]
	public interface Callable : Bala.Symbol {
		public abstract void add_parameter (Bala.Parameter param);
		public abstract unowned Bala.List<Bala.Parameter> get_parameters ();
		public abstract Bala.DataType return_type { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public interface Lockable {
		public abstract bool lock_used { get; set; }
	}
	[CCode (cheader_filename = "bala.h")]
	public interface Statement : Bala.CodeNode {
	}
	[CCode (cheader_filename = "bala.h")]
	public struct SourceLocation {
		public char* pos;
		public int line;
		public int column;
		public SourceLocation (char* _pos, int _line, int _column);
		public string to_string ();
	}
	[CCode (cheader_filename = "bala.h")]
	public enum AssignmentOperator {
		NONE,
		SIMPLE,
		BITWISE_OR,
		BITWISE_AND,
		BITWISE_XOR,
		ADD,
		SUB,
		MUL,
		DIV,
		PERCENT,
		SHIFT_LEFT,
		SHIFT_RIGHT;
		public unowned string to_string ();
	}
	[CCode (cheader_filename = "bala.h")]
	public enum BinaryOperator {
		NONE,
		PLUS,
		MINUS,
		MUL,
		DIV,
		MOD,
		SHIFT_LEFT,
		SHIFT_RIGHT,
		LESS_THAN,
		GREATER_THAN,
		LESS_THAN_OR_EQUAL,
		GREATER_THAN_OR_EQUAL,
		EQUALITY,
		INEQUALITY,
		BITWISE_AND,
		BITWISE_OR,
		BITWISE_XOR,
		AND,
		OR,
		IN,
		COALESCE;
		public unowned string to_string ();
	}
	[CCode (cheader_filename = "bala.h")]
	public enum CodeWriterType {
		EXTERNAL,
		INTERNAL,
		FAST,
		DUMP,
		BAPIGEN
	}
	[CCode (cheader_filename = "bala.h")]
	public enum MarkupTokenType {
		NONE,
		START_ELEMENT,
		END_ELEMENT,
		TEXT,
		EOF;
		public unowned string to_string ();
	}
	[CCode (cheader_filename = "bala.h")]
	public enum MemberBinding {
		INSTANCE,
		CLASS,
		STATIC
	}
	[CCode (cheader_filename = "bala.h")]
	public enum ParameterDirection {
		IN,
		OUT,
		REF
	}
	[CCode (cheader_filename = "bala.h")]
	public enum Profile {
		GOBJECT,
		POSIX
	}
	[CCode (cheader_filename = "bala.h")]
	public enum SourceFileType {
		NONE,
		SOURCE,
		PACKAGE,
		FAST
	}
	[CCode (cheader_filename = "bala.h")]
	public enum SymbolAccessibility {
		PRIVATE,
		INTERNAL,
		PROTECTED,
		PUBLIC;
		public unowned string to_string ();
	}
	[CCode (cheader_filename = "bala.h")]
	public enum TokenType {
		NONE,
		ABSTRACT,
		AS,
		ASSIGN,
		ASSIGN_ADD,
		ASSIGN_BITWISE_AND,
		ASSIGN_BITWISE_OR,
		ASSIGN_BITWISE_XOR,
		ASSIGN_DIV,
		ASSIGN_MUL,
		ASSIGN_PERCENT,
		ASSIGN_SHIFT_LEFT,
		ASSIGN_SUB,
		ASYNC,
		BASE,
		BITWISE_AND,
		BITWISE_OR,
		BREAK,
		CARRET,
		CASE,
		CATCH,
		CHARACTER_LITERAL,
		CLASS,
		CLOSE_BRACE,
		CLOSE_BRACKET,
		CLOSE_PARENS,
		CLOSE_REGEX_LITERAL,
		CLOSE_TEMPLATE,
		COLON,
		COMMA,
		CONST,
		CONSTRUCT,
		CONTINUE,
		DEFAULT,
		DELEGATE,
		DELETE,
		DIV,
		DO,
		DOUBLE_COLON,
		DOT,
		DYNAMIC,
		ELLIPSIS,
		ELSE,
		ENUM,
		ENSURES,
		ERRORDOMAIN,
		EOF,
		EXTERN,
		FALSE,
		FINALLY,
		FOR,
		FOREACH,
		GET,
		HASH,
		IDENTIFIER,
		IF,
		IN,
		INLINE,
		INTEGER_LITERAL,
		INTERFACE,
		INTERNAL,
		INTERR,
		IS,
		LAMBDA,
		LOCK,
		MINUS,
		NAMESPACE,
		NEW,
		NULL,
		OUT,
		OP_AND,
		OP_COALESCING,
		OP_DEC,
		OP_EQ,
		OP_GE,
		OP_GT,
		OP_INC,
		OP_LE,
		OP_LT,
		OP_NE,
		OP_NEG,
		OP_OR,
		OP_PTR,
		OP_SHIFT_LEFT,
		OPEN_BRACE,
		OPEN_BRACKET,
		OPEN_PARENS,
		OPEN_REGEX_LITERAL,
		OPEN_TEMPLATE,
		OVERRIDE,
		OWNED,
		PARAMS,
		PERCENT,
		PLUS,
		PRIVATE,
		PROTECTED,
		PUBLIC,
		REAL_LITERAL,
		REF,
		REGEX_LITERAL,
		REQUIRES,
		RETURN,
		SEALED,
		SEMICOLON,
		SET,
		SIGNAL,
		SIZEOF,
		STAR,
		STATIC,
		STRING_LITERAL,
		STRUCT,
		SWITCH,
		TEMPLATE_STRING_LITERAL,
		THIS,
		THROW,
		THROWS,
		TILDE,
		TRUE,
		TRY,
		TYPEOF,
		UNLOCK,
		UNOWNED,
		USING,
		VAR,
		VERBATIM_STRING_LITERAL,
		VIRTUAL,
		VOID,
		VOLATILE,
		WEAK,
		WHILE,
		YIELD;
		public unowned string to_string ();
	}
	[CCode (cheader_filename = "bala.h")]
	public enum TraverseStatus {
		STOP,
		CONTINUE
	}
	[CCode (cheader_filename = "bala.h")]
	public enum UnaryOperator {
		NONE,
		PLUS,
		MINUS,
		LOGICAL_NEGATION,
		BITWISE_COMPLEMENT,
		INCREMENT,
		DECREMENT,
		REF,
		OUT;
		public unowned string to_string ();
	}
	[CCode (cheader_filename = "bala.h")]
	public errordomain ParseError {
		FAILED,
		SYNTAX
	}
	[CCode (cheader_filename = "bala.h")]
	public delegate Bala.TraverseStatus TraverseFunc (Bala.CodeNode node);
	[CCode (cheader_filename = "bala.h")]
	public const string API_VERSION;
	[CCode (cheader_filename = "bala.h")]
	public const string BUILD_VERSION;
	[CCode (cheader_filename = "bala.h")]
	public const int MAJOR_VERSION;
	[CCode (cheader_filename = "bala.h")]
	public const int MICRO_VERSION;
	[CCode (cheader_filename = "bala.h")]
	public const int MINOR_VERSION;
	[CCode (cheader_filename = "bala.h")]
	public static unowned string? check_version (uint required_major, uint required_minor, uint required_micro);
	[CCode (cheader_filename = "bala.h")]
	public static unowned string get_build_version ();
	[CCode (cheader_filename = "bala.h")]
	public static uint get_major_version ();
	[CCode (cheader_filename = "bala.h")]
	public static uint get_micro_version ();
	[CCode (cheader_filename = "bala.h")]
	public static uint get_minor_version ();
}
