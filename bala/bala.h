/* bala.h generated by balac, the Bala compiler, do not modify */

#ifndef __BALA_H__
#define __BALA_H__

#include <glib-object.h>
#include <glib.h>
#include <stdlib.h>
#include <string.h>
#include <balagee.h>
#include <float.h>
#include <math.h>

G_BEGIN_DECLS

#define BALA_TYPE_CODE_NODE (bala_code_node_get_type ())
#define BALA_CODE_NODE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_CODE_NODE, BalaCodeNode))
#define BALA_CODE_NODE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_CODE_NODE, BalaCodeNodeClass))
#define BALA_IS_CODE_NODE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_CODE_NODE))
#define BALA_IS_CODE_NODE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_CODE_NODE))
#define BALA_CODE_NODE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_CODE_NODE, BalaCodeNodeClass))

typedef struct _BalaCodeNode BalaCodeNode;
typedef struct _BalaCodeNodeClass BalaCodeNodeClass;
typedef struct _BalaCodeNodePrivate BalaCodeNodePrivate;

#define BALA_TYPE_ATTRIBUTE (bala_attribute_get_type ())
#define BALA_ATTRIBUTE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_ATTRIBUTE, BalaAttribute))
#define BALA_ATTRIBUTE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_ATTRIBUTE, BalaAttributeClass))
#define BALA_IS_ATTRIBUTE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_ATTRIBUTE))
#define BALA_IS_ATTRIBUTE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_ATTRIBUTE))
#define BALA_ATTRIBUTE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_ATTRIBUTE, BalaAttributeClass))

typedef struct _BalaAttribute BalaAttribute;
typedef struct _BalaAttributeClass BalaAttributeClass;

#define BALA_TYPE_CODE_VISITOR (bala_code_visitor_get_type ())
#define BALA_CODE_VISITOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_CODE_VISITOR, BalaCodeVisitor))
#define BALA_CODE_VISITOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_CODE_VISITOR, BalaCodeVisitorClass))
#define BALA_IS_CODE_VISITOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_CODE_VISITOR))
#define BALA_IS_CODE_VISITOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_CODE_VISITOR))
#define BALA_CODE_VISITOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_CODE_VISITOR, BalaCodeVisitorClass))

typedef struct _BalaCodeVisitor BalaCodeVisitor;
typedef struct _BalaCodeVisitorClass BalaCodeVisitorClass;

#define BALA_TYPE_CODE_CONTEXT (bala_code_context_get_type ())
#define BALA_CODE_CONTEXT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_CODE_CONTEXT, BalaCodeContext))
#define BALA_CODE_CONTEXT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_CODE_CONTEXT, BalaCodeContextClass))
#define BALA_IS_CODE_CONTEXT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_CODE_CONTEXT))
#define BALA_IS_CODE_CONTEXT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_CODE_CONTEXT))
#define BALA_CODE_CONTEXT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_CODE_CONTEXT, BalaCodeContextClass))

typedef struct _BalaCodeContext BalaCodeContext;
typedef struct _BalaCodeContextClass BalaCodeContextClass;

#define BALA_TYPE_CODE_GENERATOR (bala_code_generator_get_type ())
#define BALA_CODE_GENERATOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_CODE_GENERATOR, BalaCodeGenerator))
#define BALA_CODE_GENERATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_CODE_GENERATOR, BalaCodeGeneratorClass))
#define BALA_IS_CODE_GENERATOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_CODE_GENERATOR))
#define BALA_IS_CODE_GENERATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_CODE_GENERATOR))
#define BALA_CODE_GENERATOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_CODE_GENERATOR, BalaCodeGeneratorClass))

typedef struct _BalaCodeGenerator BalaCodeGenerator;
typedef struct _BalaCodeGeneratorClass BalaCodeGeneratorClass;

#define BALA_TYPE_DATA_TYPE (bala_data_type_get_type ())
#define BALA_DATA_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_DATA_TYPE, BalaDataType))
#define BALA_DATA_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_DATA_TYPE, BalaDataTypeClass))
#define BALA_IS_DATA_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_DATA_TYPE))
#define BALA_IS_DATA_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_DATA_TYPE))
#define BALA_DATA_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_DATA_TYPE, BalaDataTypeClass))

typedef struct _BalaDataType BalaDataType;
typedef struct _BalaDataTypeClass BalaDataTypeClass;

#define BALA_TYPE_EXPRESSION (bala_expression_get_type ())
#define BALA_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_EXPRESSION, BalaExpression))
#define BALA_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_EXPRESSION, BalaExpressionClass))
#define BALA_IS_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_EXPRESSION))
#define BALA_IS_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_EXPRESSION))
#define BALA_EXPRESSION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_EXPRESSION, BalaExpressionClass))

typedef struct _BalaExpression BalaExpression;
typedef struct _BalaExpressionClass BalaExpressionClass;

#define BALA_TYPE_SYMBOL (bala_symbol_get_type ())
#define BALA_SYMBOL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_SYMBOL, BalaSymbol))
#define BALA_SYMBOL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_SYMBOL, BalaSymbolClass))
#define BALA_IS_SYMBOL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_SYMBOL))
#define BALA_IS_SYMBOL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_SYMBOL))
#define BALA_SYMBOL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_SYMBOL, BalaSymbolClass))

typedef struct _BalaSymbol BalaSymbol;
typedef struct _BalaSymbolClass BalaSymbolClass;

#define BALA_TYPE_VARIABLE (bala_variable_get_type ())
#define BALA_VARIABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_VARIABLE, BalaVariable))
#define BALA_VARIABLE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_VARIABLE, BalaVariableClass))
#define BALA_IS_VARIABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_VARIABLE))
#define BALA_IS_VARIABLE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_VARIABLE))
#define BALA_VARIABLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_VARIABLE, BalaVariableClass))

typedef struct _BalaVariable BalaVariable;
typedef struct _BalaVariableClass BalaVariableClass;

#define BALA_TYPE_SOURCE_REFERENCE (bala_source_reference_get_type ())
#define BALA_SOURCE_REFERENCE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_SOURCE_REFERENCE, BalaSourceReference))
#define BALA_SOURCE_REFERENCE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_SOURCE_REFERENCE, BalaSourceReferenceClass))
#define BALA_IS_SOURCE_REFERENCE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_SOURCE_REFERENCE))
#define BALA_IS_SOURCE_REFERENCE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_SOURCE_REFERENCE))
#define BALA_SOURCE_REFERENCE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_SOURCE_REFERENCE, BalaSourceReferenceClass))

typedef struct _BalaSourceReference BalaSourceReference;
typedef struct _BalaSourceReferenceClass BalaSourceReferenceClass;
typedef struct _BalaExpressionPrivate BalaExpressionPrivate;

#define BALA_TYPE_ADDRESSOF_EXPRESSION (bala_addressof_expression_get_type ())
#define BALA_ADDRESSOF_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_ADDRESSOF_EXPRESSION, BalaAddressofExpression))
#define BALA_ADDRESSOF_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_ADDRESSOF_EXPRESSION, BalaAddressofExpressionClass))
#define BALA_IS_ADDRESSOF_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_ADDRESSOF_EXPRESSION))
#define BALA_IS_ADDRESSOF_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_ADDRESSOF_EXPRESSION))
#define BALA_ADDRESSOF_EXPRESSION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_ADDRESSOF_EXPRESSION, BalaAddressofExpressionClass))

typedef struct _BalaAddressofExpression BalaAddressofExpression;
typedef struct _BalaAddressofExpressionClass BalaAddressofExpressionClass;
typedef struct _BalaAddressofExpressionPrivate BalaAddressofExpressionPrivate;
typedef struct _BalaSymbolPrivate BalaSymbolPrivate;

#define BALA_TYPE_NAMESPACE (bala_namespace_get_type ())
#define BALA_NAMESPACE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_NAMESPACE, BalaNamespace))
#define BALA_NAMESPACE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_NAMESPACE, BalaNamespaceClass))
#define BALA_IS_NAMESPACE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_NAMESPACE))
#define BALA_IS_NAMESPACE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_NAMESPACE))
#define BALA_NAMESPACE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_NAMESPACE, BalaNamespaceClass))

typedef struct _BalaNamespace BalaNamespace;
typedef struct _BalaNamespaceClass BalaNamespaceClass;

#define BALA_TYPE_TYPESYMBOL (bala_typesymbol_get_type ())
#define BALA_TYPESYMBOL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_TYPESYMBOL, BalaTypeSymbol))
#define BALA_TYPESYMBOL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_TYPESYMBOL, BalaTypeSymbolClass))
#define BALA_IS_TYPESYMBOL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_TYPESYMBOL))
#define BALA_IS_TYPESYMBOL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_TYPESYMBOL))
#define BALA_TYPESYMBOL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_TYPESYMBOL, BalaTypeSymbolClass))

typedef struct _BalaTypeSymbol BalaTypeSymbol;
typedef struct _BalaTypeSymbolClass BalaTypeSymbolClass;

#define BALA_TYPE_OBJECT_TYPE_SYMBOL (bala_object_type_symbol_get_type ())
#define BALA_OBJECT_TYPE_SYMBOL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_OBJECT_TYPE_SYMBOL, BalaObjectTypeSymbol))
#define BALA_OBJECT_TYPE_SYMBOL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_OBJECT_TYPE_SYMBOL, BalaObjectTypeSymbolClass))
#define BALA_IS_OBJECT_TYPE_SYMBOL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_OBJECT_TYPE_SYMBOL))
#define BALA_IS_OBJECT_TYPE_SYMBOL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_OBJECT_TYPE_SYMBOL))
#define BALA_OBJECT_TYPE_SYMBOL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_OBJECT_TYPE_SYMBOL, BalaObjectTypeSymbolClass))

typedef struct _BalaObjectTypeSymbol BalaObjectTypeSymbol;
typedef struct _BalaObjectTypeSymbolClass BalaObjectTypeSymbolClass;

#define BALA_TYPE_CLASS (bala_class_get_type ())
#define BALA_CLASS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_CLASS, BalaClass))
#define BALA_CLASS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_CLASS, BalaClassClass))
#define BALA_IS_CLASS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_CLASS))
#define BALA_IS_CLASS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_CLASS))
#define BALA_CLASS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_CLASS, BalaClassClass))

typedef struct _BalaClass BalaClass;
typedef struct _BalaClassClass BalaClassClass;

#define BALA_TYPE_INTERFACE (bala_interface_get_type ())
#define BALA_INTERFACE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_INTERFACE, BalaInterface))
#define BALA_INTERFACE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_INTERFACE, BalaInterfaceClass))
#define BALA_IS_INTERFACE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_INTERFACE))
#define BALA_IS_INTERFACE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_INTERFACE))
#define BALA_INTERFACE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_INTERFACE, BalaInterfaceClass))

typedef struct _BalaInterface BalaInterface;
typedef struct _BalaInterfaceClass BalaInterfaceClass;

#define BALA_TYPE_STRUCT (bala_struct_get_type ())
#define BALA_STRUCT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_STRUCT, BalaStruct))
#define BALA_STRUCT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_STRUCT, BalaStructClass))
#define BALA_IS_STRUCT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_STRUCT))
#define BALA_IS_STRUCT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_STRUCT))
#define BALA_STRUCT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_STRUCT, BalaStructClass))

typedef struct _BalaStruct BalaStruct;
typedef struct _BalaStructClass BalaStructClass;

#define BALA_TYPE_ENUM (bala_enum_get_type ())
#define BALA_ENUM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_ENUM, BalaEnum))
#define BALA_ENUM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_ENUM, BalaEnumClass))
#define BALA_IS_ENUM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_ENUM))
#define BALA_IS_ENUM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_ENUM))
#define BALA_ENUM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_ENUM, BalaEnumClass))

typedef struct _BalaEnum BalaEnum;
typedef struct _BalaEnumClass BalaEnumClass;

#define BALA_TYPE_ERROR_DOMAIN (bala_error_domain_get_type ())
#define BALA_ERROR_DOMAIN(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_ERROR_DOMAIN, BalaErrorDomain))
#define BALA_ERROR_DOMAIN_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_ERROR_DOMAIN, BalaErrorDomainClass))
#define BALA_IS_ERROR_DOMAIN(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_ERROR_DOMAIN))
#define BALA_IS_ERROR_DOMAIN_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_ERROR_DOMAIN))
#define BALA_ERROR_DOMAIN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_ERROR_DOMAIN, BalaErrorDomainClass))

typedef struct _BalaErrorDomain BalaErrorDomain;
typedef struct _BalaErrorDomainClass BalaErrorDomainClass;

#define BALA_TYPE_DELEGATE (bala_delegate_get_type ())
#define BALA_DELEGATE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_DELEGATE, BalaDelegate))
#define BALA_DELEGATE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_DELEGATE, BalaDelegateClass))
#define BALA_IS_DELEGATE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_DELEGATE))
#define BALA_IS_DELEGATE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_DELEGATE))
#define BALA_DELEGATE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_DELEGATE, BalaDelegateClass))

typedef struct _BalaDelegate BalaDelegate;
typedef struct _BalaDelegateClass BalaDelegateClass;

#define BALA_TYPE_CONSTANT (bala_constant_get_type ())
#define BALA_CONSTANT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_CONSTANT, BalaConstant))
#define BALA_CONSTANT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_CONSTANT, BalaConstantClass))
#define BALA_IS_CONSTANT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_CONSTANT))
#define BALA_IS_CONSTANT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_CONSTANT))
#define BALA_CONSTANT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_CONSTANT, BalaConstantClass))

typedef struct _BalaConstant BalaConstant;
typedef struct _BalaConstantClass BalaConstantClass;

#define BALA_TYPE_FIELD (bala_field_get_type ())
#define BALA_FIELD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_FIELD, BalaField))
#define BALA_FIELD_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_FIELD, BalaFieldClass))
#define BALA_IS_FIELD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_FIELD))
#define BALA_IS_FIELD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_FIELD))
#define BALA_FIELD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_FIELD, BalaFieldClass))

typedef struct _BalaField BalaField;
typedef struct _BalaFieldClass BalaFieldClass;

#define BALA_TYPE_SUBROUTINE (bala_subroutine_get_type ())
#define BALA_SUBROUTINE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_SUBROUTINE, BalaSubroutine))
#define BALA_SUBROUTINE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_SUBROUTINE, BalaSubroutineClass))
#define BALA_IS_SUBROUTINE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_SUBROUTINE))
#define BALA_IS_SUBROUTINE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_SUBROUTINE))
#define BALA_SUBROUTINE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_SUBROUTINE, BalaSubroutineClass))

typedef struct _BalaSubroutine BalaSubroutine;
typedef struct _BalaSubroutineClass BalaSubroutineClass;

#define BALA_TYPE_METHOD (bala_method_get_type ())
#define BALA_METHOD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_METHOD, BalaMethod))
#define BALA_METHOD_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_METHOD, BalaMethodClass))
#define BALA_IS_METHOD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_METHOD))
#define BALA_IS_METHOD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_METHOD))
#define BALA_METHOD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_METHOD, BalaMethodClass))

typedef struct _BalaMethod BalaMethod;
typedef struct _BalaMethodClass BalaMethodClass;

#define BALA_TYPE_PROPERTY (bala_property_get_type ())
#define BALA_PROPERTY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_PROPERTY, BalaProperty))
#define BALA_PROPERTY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_PROPERTY, BalaPropertyClass))
#define BALA_IS_PROPERTY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_PROPERTY))
#define BALA_IS_PROPERTY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_PROPERTY))
#define BALA_PROPERTY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_PROPERTY, BalaPropertyClass))

typedef struct _BalaProperty BalaProperty;
typedef struct _BalaPropertyClass BalaPropertyClass;

#define BALA_TYPE_SIGNAL (bala_signal_get_type ())
#define BALA_SIGNAL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_SIGNAL, BalaSignal))
#define BALA_SIGNAL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_SIGNAL, BalaSignalClass))
#define BALA_IS_SIGNAL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_SIGNAL))
#define BALA_IS_SIGNAL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_SIGNAL))
#define BALA_SIGNAL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_SIGNAL, BalaSignalClass))

typedef struct _BalaSignal BalaSignal;
typedef struct _BalaSignalClass BalaSignalClass;

#define BALA_TYPE_CONSTRUCTOR (bala_constructor_get_type ())
#define BALA_CONSTRUCTOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_CONSTRUCTOR, BalaConstructor))
#define BALA_CONSTRUCTOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_CONSTRUCTOR, BalaConstructorClass))
#define BALA_IS_CONSTRUCTOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_CONSTRUCTOR))
#define BALA_IS_CONSTRUCTOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_CONSTRUCTOR))
#define BALA_CONSTRUCTOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_CONSTRUCTOR, BalaConstructorClass))

typedef struct _BalaConstructor BalaConstructor;
typedef struct _BalaConstructorClass BalaConstructorClass;

#define BALA_TYPE_DESTRUCTOR (bala_destructor_get_type ())
#define BALA_DESTRUCTOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_DESTRUCTOR, BalaDestructor))
#define BALA_DESTRUCTOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_DESTRUCTOR, BalaDestructorClass))
#define BALA_IS_DESTRUCTOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_DESTRUCTOR))
#define BALA_IS_DESTRUCTOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_DESTRUCTOR))
#define BALA_DESTRUCTOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_DESTRUCTOR, BalaDestructorClass))

typedef struct _BalaDestructor BalaDestructor;
typedef struct _BalaDestructorClass BalaDestructorClass;
typedef struct _BalaSubroutinePrivate BalaSubroutinePrivate;

#define BALA_TYPE_CALLABLE (bala_callable_get_type ())
#define BALA_CALLABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_CALLABLE, BalaCallable))
#define BALA_IS_CALLABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_CALLABLE))
#define BALA_CALLABLE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), BALA_TYPE_CALLABLE, BalaCallableIface))

typedef struct _BalaCallable BalaCallable;
typedef struct _BalaCallableIface BalaCallableIface;

#define BALA_TYPE_PARAMETER (bala_parameter_get_type ())
#define BALA_PARAMETER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_PARAMETER, BalaParameter))
#define BALA_PARAMETER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_PARAMETER, BalaParameterClass))
#define BALA_IS_PARAMETER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_PARAMETER))
#define BALA_IS_PARAMETER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_PARAMETER))
#define BALA_PARAMETER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_PARAMETER, BalaParameterClass))

typedef struct _BalaParameter BalaParameter;
typedef struct _BalaParameterClass BalaParameterClass;
typedef struct _BalaMethodPrivate BalaMethodPrivate;

#define BALA_TYPE_ARRAY_COPY_METHOD (bala_array_copy_method_get_type ())
#define BALA_ARRAY_COPY_METHOD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_ARRAY_COPY_METHOD, BalaArrayCopyMethod))
#define BALA_ARRAY_COPY_METHOD_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_ARRAY_COPY_METHOD, BalaArrayCopyMethodClass))
#define BALA_IS_ARRAY_COPY_METHOD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_ARRAY_COPY_METHOD))
#define BALA_IS_ARRAY_COPY_METHOD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_ARRAY_COPY_METHOD))
#define BALA_ARRAY_COPY_METHOD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_ARRAY_COPY_METHOD, BalaArrayCopyMethodClass))

typedef struct _BalaArrayCopyMethod BalaArrayCopyMethod;
typedef struct _BalaArrayCopyMethodClass BalaArrayCopyMethodClass;
typedef struct _BalaArrayCopyMethodPrivate BalaArrayCopyMethodPrivate;

#define BALA_TYPE_ARRAY_CREATION_EXPRESSION (bala_array_creation_expression_get_type ())
#define BALA_ARRAY_CREATION_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_ARRAY_CREATION_EXPRESSION, BalaArrayCreationExpression))
#define BALA_ARRAY_CREATION_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_ARRAY_CREATION_EXPRESSION, BalaArrayCreationExpressionClass))
#define BALA_IS_ARRAY_CREATION_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_ARRAY_CREATION_EXPRESSION))
#define BALA_IS_ARRAY_CREATION_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_ARRAY_CREATION_EXPRESSION))
#define BALA_ARRAY_CREATION_EXPRESSION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_ARRAY_CREATION_EXPRESSION, BalaArrayCreationExpressionClass))

typedef struct _BalaArrayCreationExpression BalaArrayCreationExpression;
typedef struct _BalaArrayCreationExpressionClass BalaArrayCreationExpressionClass;
typedef struct _BalaArrayCreationExpressionPrivate BalaArrayCreationExpressionPrivate;

#define BALA_TYPE_INITIALIZER_LIST (bala_initializer_list_get_type ())
#define BALA_INITIALIZER_LIST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_INITIALIZER_LIST, BalaInitializerList))
#define BALA_INITIALIZER_LIST_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_INITIALIZER_LIST, BalaInitializerListClass))
#define BALA_IS_INITIALIZER_LIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_INITIALIZER_LIST))
#define BALA_IS_INITIALIZER_LIST_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_INITIALIZER_LIST))
#define BALA_INITIALIZER_LIST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_INITIALIZER_LIST, BalaInitializerListClass))

typedef struct _BalaInitializerList BalaInitializerList;
typedef struct _BalaInitializerListClass BalaInitializerListClass;
typedef struct _BalaVariablePrivate BalaVariablePrivate;

#define BALA_TYPE_LOCKABLE (bala_lockable_get_type ())
#define BALA_LOCKABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_LOCKABLE, BalaLockable))
#define BALA_IS_LOCKABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_LOCKABLE))
#define BALA_LOCKABLE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), BALA_TYPE_LOCKABLE, BalaLockableIface))

typedef struct _BalaLockable BalaLockable;
typedef struct _BalaLockableIface BalaLockableIface;
typedef struct _BalaFieldPrivate BalaFieldPrivate;

#define BALA_TYPE_ARRAY_LENGTH_FIELD (bala_array_length_field_get_type ())
#define BALA_ARRAY_LENGTH_FIELD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_ARRAY_LENGTH_FIELD, BalaArrayLengthField))
#define BALA_ARRAY_LENGTH_FIELD_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_ARRAY_LENGTH_FIELD, BalaArrayLengthFieldClass))
#define BALA_IS_ARRAY_LENGTH_FIELD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_ARRAY_LENGTH_FIELD))
#define BALA_IS_ARRAY_LENGTH_FIELD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_ARRAY_LENGTH_FIELD))
#define BALA_ARRAY_LENGTH_FIELD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_ARRAY_LENGTH_FIELD, BalaArrayLengthFieldClass))

typedef struct _BalaArrayLengthField BalaArrayLengthField;
typedef struct _BalaArrayLengthFieldClass BalaArrayLengthFieldClass;
typedef struct _BalaArrayLengthFieldPrivate BalaArrayLengthFieldPrivate;

#define BALA_TYPE_ARRAY_MOVE_METHOD (bala_array_move_method_get_type ())
#define BALA_ARRAY_MOVE_METHOD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_ARRAY_MOVE_METHOD, BalaArrayMoveMethod))
#define BALA_ARRAY_MOVE_METHOD_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_ARRAY_MOVE_METHOD, BalaArrayMoveMethodClass))
#define BALA_IS_ARRAY_MOVE_METHOD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_ARRAY_MOVE_METHOD))
#define BALA_IS_ARRAY_MOVE_METHOD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_ARRAY_MOVE_METHOD))
#define BALA_ARRAY_MOVE_METHOD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_ARRAY_MOVE_METHOD, BalaArrayMoveMethodClass))

typedef struct _BalaArrayMoveMethod BalaArrayMoveMethod;
typedef struct _BalaArrayMoveMethodClass BalaArrayMoveMethodClass;
typedef struct _BalaArrayMoveMethodPrivate BalaArrayMoveMethodPrivate;

#define BALA_TYPE_ARRAY_RESIZE_METHOD (bala_array_resize_method_get_type ())
#define BALA_ARRAY_RESIZE_METHOD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_ARRAY_RESIZE_METHOD, BalaArrayResizeMethod))
#define BALA_ARRAY_RESIZE_METHOD_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_ARRAY_RESIZE_METHOD, BalaArrayResizeMethodClass))
#define BALA_IS_ARRAY_RESIZE_METHOD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_ARRAY_RESIZE_METHOD))
#define BALA_IS_ARRAY_RESIZE_METHOD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_ARRAY_RESIZE_METHOD))
#define BALA_ARRAY_RESIZE_METHOD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_ARRAY_RESIZE_METHOD, BalaArrayResizeMethodClass))

typedef struct _BalaArrayResizeMethod BalaArrayResizeMethod;
typedef struct _BalaArrayResizeMethodClass BalaArrayResizeMethodClass;
typedef struct _BalaArrayResizeMethodPrivate BalaArrayResizeMethodPrivate;
typedef struct _BalaDataTypePrivate BalaDataTypePrivate;

#define BALA_TYPE_SCOPE (bala_scope_get_type ())
#define BALA_SCOPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_SCOPE, BalaScope))
#define BALA_SCOPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_SCOPE, BalaScopeClass))
#define BALA_IS_SCOPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_SCOPE))
#define BALA_IS_SCOPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_SCOPE))
#define BALA_SCOPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_SCOPE, BalaScopeClass))

typedef struct _BalaScope BalaScope;
typedef struct _BalaScopeClass BalaScopeClass;

#define BALA_TYPE_TYPEPARAMETER (bala_typeparameter_get_type ())
#define BALA_TYPEPARAMETER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_TYPEPARAMETER, BalaTypeParameter))
#define BALA_TYPEPARAMETER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_TYPEPARAMETER, BalaTypeParameterClass))
#define BALA_IS_TYPEPARAMETER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_TYPEPARAMETER))
#define BALA_IS_TYPEPARAMETER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_TYPEPARAMETER))
#define BALA_TYPEPARAMETER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_TYPEPARAMETER, BalaTypeParameterClass))

typedef struct _BalaTypeParameter BalaTypeParameter;
typedef struct _BalaTypeParameterClass BalaTypeParameterClass;

#define BALA_TYPE_REFERENCE_TYPE (bala_reference_type_get_type ())
#define BALA_REFERENCE_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_REFERENCE_TYPE, BalaReferenceType))
#define BALA_REFERENCE_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_REFERENCE_TYPE, BalaReferenceTypeClass))
#define BALA_IS_REFERENCE_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_REFERENCE_TYPE))
#define BALA_IS_REFERENCE_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_REFERENCE_TYPE))
#define BALA_REFERENCE_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_REFERENCE_TYPE, BalaReferenceTypeClass))

typedef struct _BalaReferenceType BalaReferenceType;
typedef struct _BalaReferenceTypeClass BalaReferenceTypeClass;
typedef struct _BalaReferenceTypePrivate BalaReferenceTypePrivate;

#define BALA_TYPE_ARRAY_TYPE (bala_array_type_get_type ())
#define BALA_ARRAY_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_ARRAY_TYPE, BalaArrayType))
#define BALA_ARRAY_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_ARRAY_TYPE, BalaArrayTypeClass))
#define BALA_IS_ARRAY_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_ARRAY_TYPE))
#define BALA_IS_ARRAY_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_ARRAY_TYPE))
#define BALA_ARRAY_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_ARRAY_TYPE, BalaArrayTypeClass))

typedef struct _BalaArrayType BalaArrayType;
typedef struct _BalaArrayTypeClass BalaArrayTypeClass;
typedef struct _BalaArrayTypePrivate BalaArrayTypePrivate;

#define BALA_TYPE_ASSIGNMENT (bala_assignment_get_type ())
#define BALA_ASSIGNMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_ASSIGNMENT, BalaAssignment))
#define BALA_ASSIGNMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_ASSIGNMENT, BalaAssignmentClass))
#define BALA_IS_ASSIGNMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_ASSIGNMENT))
#define BALA_IS_ASSIGNMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_ASSIGNMENT))
#define BALA_ASSIGNMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_ASSIGNMENT, BalaAssignmentClass))

typedef struct _BalaAssignment BalaAssignment;
typedef struct _BalaAssignmentClass BalaAssignmentClass;
typedef struct _BalaAssignmentPrivate BalaAssignmentPrivate;
typedef enum  {
	BALA_ASSIGNMENT_OPERATOR_NONE,
	BALA_ASSIGNMENT_OPERATOR_SIMPLE,
	BALA_ASSIGNMENT_OPERATOR_BITWISE_OR,
	BALA_ASSIGNMENT_OPERATOR_BITWISE_AND,
	BALA_ASSIGNMENT_OPERATOR_BITWISE_XOR,
	BALA_ASSIGNMENT_OPERATOR_ADD,
	BALA_ASSIGNMENT_OPERATOR_SUB,
	BALA_ASSIGNMENT_OPERATOR_MUL,
	BALA_ASSIGNMENT_OPERATOR_DIV,
	BALA_ASSIGNMENT_OPERATOR_PERCENT,
	BALA_ASSIGNMENT_OPERATOR_SHIFT_LEFT,
	BALA_ASSIGNMENT_OPERATOR_SHIFT_RIGHT
} BalaAssignmentOperator;

#define BALA_TYPE_ASSIGNMENT_OPERATOR (bala_assignment_operator_get_type ())
typedef struct _BalaAttributePrivate BalaAttributePrivate;

#define BALA_TYPE_BASE_ACCESS (bala_base_access_get_type ())
#define BALA_BASE_ACCESS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_BASE_ACCESS, BalaBaseAccess))
#define BALA_BASE_ACCESS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_BASE_ACCESS, BalaBaseAccessClass))
#define BALA_IS_BASE_ACCESS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_BASE_ACCESS))
#define BALA_IS_BASE_ACCESS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_BASE_ACCESS))
#define BALA_BASE_ACCESS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_BASE_ACCESS, BalaBaseAccessClass))

typedef struct _BalaBaseAccess BalaBaseAccess;
typedef struct _BalaBaseAccessClass BalaBaseAccessClass;
typedef struct _BalaBaseAccessPrivate BalaBaseAccessPrivate;

#define BALA_TYPE_BASIC_BLOCK (bala_basic_block_get_type ())
#define BALA_BASIC_BLOCK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_BASIC_BLOCK, BalaBasicBlock))
#define BALA_BASIC_BLOCK_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_BASIC_BLOCK, BalaBasicBlockClass))
#define BALA_IS_BASIC_BLOCK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_BASIC_BLOCK))
#define BALA_IS_BASIC_BLOCK_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_BASIC_BLOCK))
#define BALA_BASIC_BLOCK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_BASIC_BLOCK, BalaBasicBlockClass))

typedef struct _BalaBasicBlock BalaBasicBlock;
typedef struct _BalaBasicBlockClass BalaBasicBlockClass;
typedef struct _BalaBasicBlockPrivate BalaBasicBlockPrivate;

#define BALA_TYPE_PHI_FUNCTION (bala_phi_function_get_type ())
#define BALA_PHI_FUNCTION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_PHI_FUNCTION, BalaPhiFunction))
#define BALA_PHI_FUNCTION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_PHI_FUNCTION, BalaPhiFunctionClass))
#define BALA_IS_PHI_FUNCTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_PHI_FUNCTION))
#define BALA_IS_PHI_FUNCTION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_PHI_FUNCTION))
#define BALA_PHI_FUNCTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_PHI_FUNCTION, BalaPhiFunctionClass))

typedef struct _BalaPhiFunction BalaPhiFunction;
typedef struct _BalaPhiFunctionClass BalaPhiFunctionClass;

#define BALA_TYPE_BINARY_EXPRESSION (bala_binary_expression_get_type ())
#define BALA_BINARY_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_BINARY_EXPRESSION, BalaBinaryExpression))
#define BALA_BINARY_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_BINARY_EXPRESSION, BalaBinaryExpressionClass))
#define BALA_IS_BINARY_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_BINARY_EXPRESSION))
#define BALA_IS_BINARY_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_BINARY_EXPRESSION))
#define BALA_BINARY_EXPRESSION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_BINARY_EXPRESSION, BalaBinaryExpressionClass))

typedef struct _BalaBinaryExpression BalaBinaryExpression;
typedef struct _BalaBinaryExpressionClass BalaBinaryExpressionClass;
typedef struct _BalaBinaryExpressionPrivate BalaBinaryExpressionPrivate;
typedef enum  {
	BALA_BINARY_OPERATOR_NONE,
	BALA_BINARY_OPERATOR_PLUS,
	BALA_BINARY_OPERATOR_MINUS,
	BALA_BINARY_OPERATOR_MUL,
	BALA_BINARY_OPERATOR_DIV,
	BALA_BINARY_OPERATOR_MOD,
	BALA_BINARY_OPERATOR_SHIFT_LEFT,
	BALA_BINARY_OPERATOR_SHIFT_RIGHT,
	BALA_BINARY_OPERATOR_LESS_THAN,
	BALA_BINARY_OPERATOR_GREATER_THAN,
	BALA_BINARY_OPERATOR_LESS_THAN_OR_EQUAL,
	BALA_BINARY_OPERATOR_GREATER_THAN_OR_EQUAL,
	BALA_BINARY_OPERATOR_EQUALITY,
	BALA_BINARY_OPERATOR_INEQUALITY,
	BALA_BINARY_OPERATOR_BITWISE_AND,
	BALA_BINARY_OPERATOR_BITWISE_OR,
	BALA_BINARY_OPERATOR_BITWISE_XOR,
	BALA_BINARY_OPERATOR_AND,
	BALA_BINARY_OPERATOR_OR,
	BALA_BINARY_OPERATOR_IN,
	BALA_BINARY_OPERATOR_COALESCE
} BalaBinaryOperator;

#define BALA_TYPE_BINARY_OPERATOR (bala_binary_operator_get_type ())

#define BALA_TYPE_STATEMENT (bala_statement_get_type ())
#define BALA_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_STATEMENT, BalaStatement))
#define BALA_IS_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_STATEMENT))
#define BALA_STATEMENT_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), BALA_TYPE_STATEMENT, BalaStatementIface))

typedef struct _BalaStatement BalaStatement;
typedef struct _BalaStatementIface BalaStatementIface;

#define BALA_TYPE_BLOCK (bala_block_get_type ())
#define BALA_BLOCK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_BLOCK, BalaBlock))
#define BALA_BLOCK_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_BLOCK, BalaBlockClass))
#define BALA_IS_BLOCK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_BLOCK))
#define BALA_IS_BLOCK_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_BLOCK))
#define BALA_BLOCK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_BLOCK, BalaBlockClass))

typedef struct _BalaBlock BalaBlock;
typedef struct _BalaBlockClass BalaBlockClass;
typedef struct _BalaBlockPrivate BalaBlockPrivate;

#define BALA_TYPE_LOCAL_VARIABLE (bala_local_variable_get_type ())
#define BALA_LOCAL_VARIABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_LOCAL_VARIABLE, BalaLocalVariable))
#define BALA_LOCAL_VARIABLE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_LOCAL_VARIABLE, BalaLocalVariableClass))
#define BALA_IS_LOCAL_VARIABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_LOCAL_VARIABLE))
#define BALA_IS_LOCAL_VARIABLE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_LOCAL_VARIABLE))
#define BALA_LOCAL_VARIABLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_LOCAL_VARIABLE, BalaLocalVariableClass))

typedef struct _BalaLocalVariable BalaLocalVariable;
typedef struct _BalaLocalVariableClass BalaLocalVariableClass;

#define BALA_TYPE_LITERAL (bala_literal_get_type ())
#define BALA_LITERAL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_LITERAL, BalaLiteral))
#define BALA_LITERAL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_LITERAL, BalaLiteralClass))
#define BALA_IS_LITERAL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_LITERAL))
#define BALA_IS_LITERAL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_LITERAL))
#define BALA_LITERAL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_LITERAL, BalaLiteralClass))

typedef struct _BalaLiteral BalaLiteral;
typedef struct _BalaLiteralClass BalaLiteralClass;
typedef struct _BalaLiteralPrivate BalaLiteralPrivate;

#define BALA_TYPE_BOOLEAN_LITERAL (bala_boolean_literal_get_type ())
#define BALA_BOOLEAN_LITERAL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_BOOLEAN_LITERAL, BalaBooleanLiteral))
#define BALA_BOOLEAN_LITERAL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_BOOLEAN_LITERAL, BalaBooleanLiteralClass))
#define BALA_IS_BOOLEAN_LITERAL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_BOOLEAN_LITERAL))
#define BALA_IS_BOOLEAN_LITERAL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_BOOLEAN_LITERAL))
#define BALA_BOOLEAN_LITERAL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_BOOLEAN_LITERAL, BalaBooleanLiteralClass))

typedef struct _BalaBooleanLiteral BalaBooleanLiteral;
typedef struct _BalaBooleanLiteralClass BalaBooleanLiteralClass;
typedef struct _BalaBooleanLiteralPrivate BalaBooleanLiteralPrivate;

#define BALA_TYPE_VALUE_TYPE (bala_value_type_get_type ())
#define BALA_VALUE_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_VALUE_TYPE, BalaValueType))
#define BALA_VALUE_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_VALUE_TYPE, BalaValueTypeClass))
#define BALA_IS_VALUE_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_VALUE_TYPE))
#define BALA_IS_VALUE_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_VALUE_TYPE))
#define BALA_VALUE_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_VALUE_TYPE, BalaValueTypeClass))

typedef struct _BalaValueType BalaValueType;
typedef struct _BalaValueTypeClass BalaValueTypeClass;
typedef struct _BalaValueTypePrivate BalaValueTypePrivate;

#define BALA_TYPE_BOOLEAN_TYPE (bala_boolean_type_get_type ())
#define BALA_BOOLEAN_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_BOOLEAN_TYPE, BalaBooleanType))
#define BALA_BOOLEAN_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_BOOLEAN_TYPE, BalaBooleanTypeClass))
#define BALA_IS_BOOLEAN_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_BOOLEAN_TYPE))
#define BALA_IS_BOOLEAN_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_BOOLEAN_TYPE))
#define BALA_BOOLEAN_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_BOOLEAN_TYPE, BalaBooleanTypeClass))

typedef struct _BalaBooleanType BalaBooleanType;
typedef struct _BalaBooleanTypeClass BalaBooleanTypeClass;
typedef struct _BalaBooleanTypePrivate BalaBooleanTypePrivate;

#define BALA_TYPE_BREAK_STATEMENT (bala_break_statement_get_type ())
#define BALA_BREAK_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_BREAK_STATEMENT, BalaBreakStatement))
#define BALA_BREAK_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_BREAK_STATEMENT, BalaBreakStatementClass))
#define BALA_IS_BREAK_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_BREAK_STATEMENT))
#define BALA_IS_BREAK_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_BREAK_STATEMENT))
#define BALA_BREAK_STATEMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_BREAK_STATEMENT, BalaBreakStatementClass))

typedef struct _BalaBreakStatement BalaBreakStatement;
typedef struct _BalaBreakStatementClass BalaBreakStatementClass;
typedef struct _BalaBreakStatementPrivate BalaBreakStatementPrivate;

#define BALA_TYPE_CALLABLE_TYPE (bala_callable_type_get_type ())
#define BALA_CALLABLE_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_CALLABLE_TYPE, BalaCallableType))
#define BALA_CALLABLE_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_CALLABLE_TYPE, BalaCallableTypeClass))
#define BALA_IS_CALLABLE_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_CALLABLE_TYPE))
#define BALA_IS_CALLABLE_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_CALLABLE_TYPE))
#define BALA_CALLABLE_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_CALLABLE_TYPE, BalaCallableTypeClass))

typedef struct _BalaCallableType BalaCallableType;
typedef struct _BalaCallableTypeClass BalaCallableTypeClass;
typedef struct _BalaCallableTypePrivate BalaCallableTypePrivate;

#define BALA_TYPE_CAST_EXPRESSION (bala_cast_expression_get_type ())
#define BALA_CAST_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_CAST_EXPRESSION, BalaCastExpression))
#define BALA_CAST_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_CAST_EXPRESSION, BalaCastExpressionClass))
#define BALA_IS_CAST_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_CAST_EXPRESSION))
#define BALA_IS_CAST_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_CAST_EXPRESSION))
#define BALA_CAST_EXPRESSION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_CAST_EXPRESSION, BalaCastExpressionClass))

typedef struct _BalaCastExpression BalaCastExpression;
typedef struct _BalaCastExpressionClass BalaCastExpressionClass;
typedef struct _BalaCastExpressionPrivate BalaCastExpressionPrivate;

#define BALA_TYPE_CATCH_CLAUSE (bala_catch_clause_get_type ())
#define BALA_CATCH_CLAUSE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_CATCH_CLAUSE, BalaCatchClause))
#define BALA_CATCH_CLAUSE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_CATCH_CLAUSE, BalaCatchClauseClass))
#define BALA_IS_CATCH_CLAUSE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_CATCH_CLAUSE))
#define BALA_IS_CATCH_CLAUSE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_CATCH_CLAUSE))
#define BALA_CATCH_CLAUSE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_CATCH_CLAUSE, BalaCatchClauseClass))

typedef struct _BalaCatchClause BalaCatchClause;
typedef struct _BalaCatchClauseClass BalaCatchClauseClass;
typedef struct _BalaCatchClausePrivate BalaCatchClausePrivate;

#define BALA_TYPE_CHARACTER_LITERAL (bala_character_literal_get_type ())
#define BALA_CHARACTER_LITERAL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_CHARACTER_LITERAL, BalaCharacterLiteral))
#define BALA_CHARACTER_LITERAL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_CHARACTER_LITERAL, BalaCharacterLiteralClass))
#define BALA_IS_CHARACTER_LITERAL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_CHARACTER_LITERAL))
#define BALA_IS_CHARACTER_LITERAL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_CHARACTER_LITERAL))
#define BALA_CHARACTER_LITERAL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_CHARACTER_LITERAL, BalaCharacterLiteralClass))

typedef struct _BalaCharacterLiteral BalaCharacterLiteral;
typedef struct _BalaCharacterLiteralClass BalaCharacterLiteralClass;
typedef struct _BalaCharacterLiteralPrivate BalaCharacterLiteralPrivate;
typedef struct _BalaTypeSymbolPrivate BalaTypeSymbolPrivate;
typedef struct _BalaObjectTypeSymbolPrivate BalaObjectTypeSymbolPrivate;
typedef struct _BalaClassPrivate BalaClassPrivate;

#define BALA_TYPE_CREATION_METHOD (bala_creation_method_get_type ())
#define BALA_CREATION_METHOD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_CREATION_METHOD, BalaCreationMethod))
#define BALA_CREATION_METHOD_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_CREATION_METHOD, BalaCreationMethodClass))
#define BALA_IS_CREATION_METHOD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_CREATION_METHOD))
#define BALA_IS_CREATION_METHOD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_CREATION_METHOD))
#define BALA_CREATION_METHOD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_CREATION_METHOD, BalaCreationMethodClass))

typedef struct _BalaCreationMethod BalaCreationMethod;
typedef struct _BalaCreationMethodClass BalaCreationMethodClass;

#define BALA_TYPE_COMMENT (bala_comment_get_type ())
#define BALA_COMMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_COMMENT, BalaComment))
#define BALA_COMMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_COMMENT, BalaCommentClass))
#define BALA_IS_COMMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_COMMENT))
#define BALA_IS_COMMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_COMMENT))
#define BALA_COMMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_COMMENT, BalaCommentClass))

typedef struct _BalaComment BalaComment;
typedef struct _BalaCommentClass BalaCommentClass;

#define BALA_TYPE_CLASS_TYPE (bala_class_type_get_type ())
#define BALA_CLASS_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_CLASS_TYPE, BalaClassType))
#define BALA_CLASS_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_CLASS_TYPE, BalaClassTypeClass))
#define BALA_IS_CLASS_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_CLASS_TYPE))
#define BALA_IS_CLASS_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_CLASS_TYPE))
#define BALA_CLASS_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_CLASS_TYPE, BalaClassTypeClass))

typedef struct _BalaClassType BalaClassType;
typedef struct _BalaClassTypeClass BalaClassTypeClass;
typedef struct _BalaClassTypePrivate BalaClassTypePrivate;
typedef struct _BalaCodeContextPrivate BalaCodeContextPrivate;
typedef enum  {
	BALA_PROFILE_GOBJECT,
	BALA_PROFILE_POSIX
} BalaProfile;

#define BALA_TYPE_PROFILE (bala_profile_get_type ())

#define BALA_TYPE_REPORT (bala_report_get_type ())
#define BALA_REPORT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_REPORT, BalaReport))
#define BALA_REPORT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_REPORT, BalaReportClass))
#define BALA_IS_REPORT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_REPORT))
#define BALA_IS_REPORT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_REPORT))
#define BALA_REPORT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_REPORT, BalaReportClass))

typedef struct _BalaReport BalaReport;
typedef struct _BalaReportClass BalaReportClass;

#define BALA_TYPE_SYMBOL_RESOLVER (bala_symbol_resolver_get_type ())
#define BALA_SYMBOL_RESOLVER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_SYMBOL_RESOLVER, BalaSymbolResolver))
#define BALA_SYMBOL_RESOLVER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_SYMBOL_RESOLVER, BalaSymbolResolverClass))
#define BALA_IS_SYMBOL_RESOLVER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_SYMBOL_RESOLVER))
#define BALA_IS_SYMBOL_RESOLVER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_SYMBOL_RESOLVER))
#define BALA_SYMBOL_RESOLVER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_SYMBOL_RESOLVER, BalaSymbolResolverClass))

typedef struct _BalaSymbolResolver BalaSymbolResolver;
typedef struct _BalaSymbolResolverClass BalaSymbolResolverClass;

#define BALA_TYPE_SEMANTIC_ANALYZER (bala_semantic_analyzer_get_type ())
#define BALA_SEMANTIC_ANALYZER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_SEMANTIC_ANALYZER, BalaSemanticAnalyzer))
#define BALA_SEMANTIC_ANALYZER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_SEMANTIC_ANALYZER, BalaSemanticAnalyzerClass))
#define BALA_IS_SEMANTIC_ANALYZER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_SEMANTIC_ANALYZER))
#define BALA_IS_SEMANTIC_ANALYZER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_SEMANTIC_ANALYZER))
#define BALA_SEMANTIC_ANALYZER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_SEMANTIC_ANALYZER, BalaSemanticAnalyzerClass))

typedef struct _BalaSemanticAnalyzer BalaSemanticAnalyzer;
typedef struct _BalaSemanticAnalyzerClass BalaSemanticAnalyzerClass;

#define BALA_TYPE_FLOW_ANALYZER (bala_flow_analyzer_get_type ())
#define BALA_FLOW_ANALYZER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_FLOW_ANALYZER, BalaFlowAnalyzer))
#define BALA_FLOW_ANALYZER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_FLOW_ANALYZER, BalaFlowAnalyzerClass))
#define BALA_IS_FLOW_ANALYZER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_FLOW_ANALYZER))
#define BALA_IS_FLOW_ANALYZER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_FLOW_ANALYZER))
#define BALA_FLOW_ANALYZER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_FLOW_ANALYZER, BalaFlowAnalyzerClass))

typedef struct _BalaFlowAnalyzer BalaFlowAnalyzer;
typedef struct _BalaFlowAnalyzerClass BalaFlowAnalyzerClass;

#define BALA_TYPE_USED_ATTR (bala_used_attr_get_type ())
#define BALA_USED_ATTR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_USED_ATTR, BalaUsedAttr))
#define BALA_USED_ATTR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_USED_ATTR, BalaUsedAttrClass))
#define BALA_IS_USED_ATTR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_USED_ATTR))
#define BALA_IS_USED_ATTR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_USED_ATTR))
#define BALA_USED_ATTR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_USED_ATTR, BalaUsedAttrClass))

typedef struct _BalaUsedAttr BalaUsedAttr;
typedef struct _BalaUsedAttrClass BalaUsedAttrClass;

#define BALA_TYPE_SOURCE_FILE (bala_source_file_get_type ())
#define BALA_SOURCE_FILE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_SOURCE_FILE, BalaSourceFile))
#define BALA_SOURCE_FILE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_SOURCE_FILE, BalaSourceFileClass))
#define BALA_IS_SOURCE_FILE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_SOURCE_FILE))
#define BALA_IS_SOURCE_FILE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_SOURCE_FILE))
#define BALA_SOURCE_FILE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_SOURCE_FILE, BalaSourceFileClass))

typedef struct _BalaSourceFile BalaSourceFile;
typedef struct _BalaSourceFileClass BalaSourceFileClass;
typedef struct _BalaCodeVisitorPrivate BalaCodeVisitorPrivate;

#define BALA_TYPE_ENUM_VALUE (bala_enum_value_get_type ())
#define BALA_ENUM_VALUE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_ENUM_VALUE, BalaEnumValue))
#define BALA_ENUM_VALUE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_ENUM_VALUE, BalaEnumValueClass))
#define BALA_IS_ENUM_VALUE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_ENUM_VALUE))
#define BALA_IS_ENUM_VALUE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_ENUM_VALUE))
#define BALA_ENUM_VALUE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_ENUM_VALUE, BalaEnumValueClass))

typedef struct _BalaEnumValue BalaEnumValue;
typedef struct _BalaEnumValueClass BalaEnumValueClass;

#define BALA_TYPE_ERROR_CODE (bala_error_code_get_type ())
#define BALA_ERROR_CODE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_ERROR_CODE, BalaErrorCode))
#define BALA_ERROR_CODE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_ERROR_CODE, BalaErrorCodeClass))
#define BALA_IS_ERROR_CODE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_ERROR_CODE))
#define BALA_IS_ERROR_CODE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_ERROR_CODE))
#define BALA_ERROR_CODE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_ERROR_CODE, BalaErrorCodeClass))

typedef struct _BalaErrorCode BalaErrorCode;
typedef struct _BalaErrorCodeClass BalaErrorCodeClass;

#define BALA_TYPE_PROPERTY_ACCESSOR (bala_property_accessor_get_type ())
#define BALA_PROPERTY_ACCESSOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_PROPERTY_ACCESSOR, BalaPropertyAccessor))
#define BALA_PROPERTY_ACCESSOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_PROPERTY_ACCESSOR, BalaPropertyAccessorClass))
#define BALA_IS_PROPERTY_ACCESSOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_PROPERTY_ACCESSOR))
#define BALA_IS_PROPERTY_ACCESSOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_PROPERTY_ACCESSOR))
#define BALA_PROPERTY_ACCESSOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_PROPERTY_ACCESSOR, BalaPropertyAccessorClass))

typedef struct _BalaPropertyAccessor BalaPropertyAccessor;
typedef struct _BalaPropertyAccessorClass BalaPropertyAccessorClass;

#define BALA_TYPE_USING_DIRECTIVE (bala_using_directive_get_type ())
#define BALA_USING_DIRECTIVE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_USING_DIRECTIVE, BalaUsingDirective))
#define BALA_USING_DIRECTIVE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_USING_DIRECTIVE, BalaUsingDirectiveClass))
#define BALA_IS_USING_DIRECTIVE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_USING_DIRECTIVE))
#define BALA_IS_USING_DIRECTIVE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_USING_DIRECTIVE))
#define BALA_USING_DIRECTIVE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_USING_DIRECTIVE, BalaUsingDirectiveClass))

typedef struct _BalaUsingDirective BalaUsingDirective;
typedef struct _BalaUsingDirectiveClass BalaUsingDirectiveClass;

#define BALA_TYPE_EMPTY_STATEMENT (bala_empty_statement_get_type ())
#define BALA_EMPTY_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_EMPTY_STATEMENT, BalaEmptyStatement))
#define BALA_EMPTY_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_EMPTY_STATEMENT, BalaEmptyStatementClass))
#define BALA_IS_EMPTY_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_EMPTY_STATEMENT))
#define BALA_IS_EMPTY_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_EMPTY_STATEMENT))
#define BALA_EMPTY_STATEMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_EMPTY_STATEMENT, BalaEmptyStatementClass))

typedef struct _BalaEmptyStatement BalaEmptyStatement;
typedef struct _BalaEmptyStatementClass BalaEmptyStatementClass;

#define BALA_TYPE_DECLARATION_STATEMENT (bala_declaration_statement_get_type ())
#define BALA_DECLARATION_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_DECLARATION_STATEMENT, BalaDeclarationStatement))
#define BALA_DECLARATION_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_DECLARATION_STATEMENT, BalaDeclarationStatementClass))
#define BALA_IS_DECLARATION_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_DECLARATION_STATEMENT))
#define BALA_IS_DECLARATION_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_DECLARATION_STATEMENT))
#define BALA_DECLARATION_STATEMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_DECLARATION_STATEMENT, BalaDeclarationStatementClass))

typedef struct _BalaDeclarationStatement BalaDeclarationStatement;
typedef struct _BalaDeclarationStatementClass BalaDeclarationStatementClass;

#define BALA_TYPE_EXPRESSION_STATEMENT (bala_expression_statement_get_type ())
#define BALA_EXPRESSION_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_EXPRESSION_STATEMENT, BalaExpressionStatement))
#define BALA_EXPRESSION_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_EXPRESSION_STATEMENT, BalaExpressionStatementClass))
#define BALA_IS_EXPRESSION_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_EXPRESSION_STATEMENT))
#define BALA_IS_EXPRESSION_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_EXPRESSION_STATEMENT))
#define BALA_EXPRESSION_STATEMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_EXPRESSION_STATEMENT, BalaExpressionStatementClass))

typedef struct _BalaExpressionStatement BalaExpressionStatement;
typedef struct _BalaExpressionStatementClass BalaExpressionStatementClass;

#define BALA_TYPE_IF_STATEMENT (bala_if_statement_get_type ())
#define BALA_IF_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_IF_STATEMENT, BalaIfStatement))
#define BALA_IF_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_IF_STATEMENT, BalaIfStatementClass))
#define BALA_IS_IF_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_IF_STATEMENT))
#define BALA_IS_IF_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_IF_STATEMENT))
#define BALA_IF_STATEMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_IF_STATEMENT, BalaIfStatementClass))

typedef struct _BalaIfStatement BalaIfStatement;
typedef struct _BalaIfStatementClass BalaIfStatementClass;

#define BALA_TYPE_SWITCH_STATEMENT (bala_switch_statement_get_type ())
#define BALA_SWITCH_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_SWITCH_STATEMENT, BalaSwitchStatement))
#define BALA_SWITCH_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_SWITCH_STATEMENT, BalaSwitchStatementClass))
#define BALA_IS_SWITCH_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_SWITCH_STATEMENT))
#define BALA_IS_SWITCH_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_SWITCH_STATEMENT))
#define BALA_SWITCH_STATEMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_SWITCH_STATEMENT, BalaSwitchStatementClass))

typedef struct _BalaSwitchStatement BalaSwitchStatement;
typedef struct _BalaSwitchStatementClass BalaSwitchStatementClass;

#define BALA_TYPE_SWITCH_SECTION (bala_switch_section_get_type ())
#define BALA_SWITCH_SECTION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_SWITCH_SECTION, BalaSwitchSection))
#define BALA_SWITCH_SECTION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_SWITCH_SECTION, BalaSwitchSectionClass))
#define BALA_IS_SWITCH_SECTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_SWITCH_SECTION))
#define BALA_IS_SWITCH_SECTION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_SWITCH_SECTION))
#define BALA_SWITCH_SECTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_SWITCH_SECTION, BalaSwitchSectionClass))

typedef struct _BalaSwitchSection BalaSwitchSection;
typedef struct _BalaSwitchSectionClass BalaSwitchSectionClass;

#define BALA_TYPE_SWITCH_LABEL (bala_switch_label_get_type ())
#define BALA_SWITCH_LABEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_SWITCH_LABEL, BalaSwitchLabel))
#define BALA_SWITCH_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_SWITCH_LABEL, BalaSwitchLabelClass))
#define BALA_IS_SWITCH_LABEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_SWITCH_LABEL))
#define BALA_IS_SWITCH_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_SWITCH_LABEL))
#define BALA_SWITCH_LABEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_SWITCH_LABEL, BalaSwitchLabelClass))

typedef struct _BalaSwitchLabel BalaSwitchLabel;
typedef struct _BalaSwitchLabelClass BalaSwitchLabelClass;

#define BALA_TYPE_LOOP (bala_loop_get_type ())
#define BALA_LOOP(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_LOOP, BalaLoop))
#define BALA_LOOP_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_LOOP, BalaLoopClass))
#define BALA_IS_LOOP(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_LOOP))
#define BALA_IS_LOOP_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_LOOP))
#define BALA_LOOP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_LOOP, BalaLoopClass))

typedef struct _BalaLoop BalaLoop;
typedef struct _BalaLoopClass BalaLoopClass;

#define BALA_TYPE_WHILE_STATEMENT (bala_while_statement_get_type ())
#define BALA_WHILE_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_WHILE_STATEMENT, BalaWhileStatement))
#define BALA_WHILE_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_WHILE_STATEMENT, BalaWhileStatementClass))
#define BALA_IS_WHILE_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_WHILE_STATEMENT))
#define BALA_IS_WHILE_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_WHILE_STATEMENT))
#define BALA_WHILE_STATEMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_WHILE_STATEMENT, BalaWhileStatementClass))

typedef struct _BalaWhileStatement BalaWhileStatement;
typedef struct _BalaWhileStatementClass BalaWhileStatementClass;

#define BALA_TYPE_DO_STATEMENT (bala_do_statement_get_type ())
#define BALA_DO_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_DO_STATEMENT, BalaDoStatement))
#define BALA_DO_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_DO_STATEMENT, BalaDoStatementClass))
#define BALA_IS_DO_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_DO_STATEMENT))
#define BALA_IS_DO_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_DO_STATEMENT))
#define BALA_DO_STATEMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_DO_STATEMENT, BalaDoStatementClass))

typedef struct _BalaDoStatement BalaDoStatement;
typedef struct _BalaDoStatementClass BalaDoStatementClass;

#define BALA_TYPE_FOR_STATEMENT (bala_for_statement_get_type ())
#define BALA_FOR_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_FOR_STATEMENT, BalaForStatement))
#define BALA_FOR_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_FOR_STATEMENT, BalaForStatementClass))
#define BALA_IS_FOR_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_FOR_STATEMENT))
#define BALA_IS_FOR_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_FOR_STATEMENT))
#define BALA_FOR_STATEMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_FOR_STATEMENT, BalaForStatementClass))

typedef struct _BalaForStatement BalaForStatement;
typedef struct _BalaForStatementClass BalaForStatementClass;

#define BALA_TYPE_FOREACH_STATEMENT (bala_foreach_statement_get_type ())
#define BALA_FOREACH_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_FOREACH_STATEMENT, BalaForeachStatement))
#define BALA_FOREACH_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_FOREACH_STATEMENT, BalaForeachStatementClass))
#define BALA_IS_FOREACH_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_FOREACH_STATEMENT))
#define BALA_IS_FOREACH_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_FOREACH_STATEMENT))
#define BALA_FOREACH_STATEMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_FOREACH_STATEMENT, BalaForeachStatementClass))

typedef struct _BalaForeachStatement BalaForeachStatement;
typedef struct _BalaForeachStatementClass BalaForeachStatementClass;

#define BALA_TYPE_CONTINUE_STATEMENT (bala_continue_statement_get_type ())
#define BALA_CONTINUE_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_CONTINUE_STATEMENT, BalaContinueStatement))
#define BALA_CONTINUE_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_CONTINUE_STATEMENT, BalaContinueStatementClass))
#define BALA_IS_CONTINUE_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_CONTINUE_STATEMENT))
#define BALA_IS_CONTINUE_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_CONTINUE_STATEMENT))
#define BALA_CONTINUE_STATEMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_CONTINUE_STATEMENT, BalaContinueStatementClass))

typedef struct _BalaContinueStatement BalaContinueStatement;
typedef struct _BalaContinueStatementClass BalaContinueStatementClass;

#define BALA_TYPE_RETURN_STATEMENT (bala_return_statement_get_type ())
#define BALA_RETURN_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_RETURN_STATEMENT, BalaReturnStatement))
#define BALA_RETURN_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_RETURN_STATEMENT, BalaReturnStatementClass))
#define BALA_IS_RETURN_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_RETURN_STATEMENT))
#define BALA_IS_RETURN_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_RETURN_STATEMENT))
#define BALA_RETURN_STATEMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_RETURN_STATEMENT, BalaReturnStatementClass))

typedef struct _BalaReturnStatement BalaReturnStatement;
typedef struct _BalaReturnStatementClass BalaReturnStatementClass;

#define BALA_TYPE_YIELD_STATEMENT (bala_yield_statement_get_type ())
#define BALA_YIELD_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_YIELD_STATEMENT, BalaYieldStatement))
#define BALA_YIELD_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_YIELD_STATEMENT, BalaYieldStatementClass))
#define BALA_IS_YIELD_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_YIELD_STATEMENT))
#define BALA_IS_YIELD_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_YIELD_STATEMENT))
#define BALA_YIELD_STATEMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_YIELD_STATEMENT, BalaYieldStatementClass))

typedef struct _BalaYieldStatement BalaYieldStatement;
typedef struct _BalaYieldStatementClass BalaYieldStatementClass;

#define BALA_TYPE_THROW_STATEMENT (bala_throw_statement_get_type ())
#define BALA_THROW_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_THROW_STATEMENT, BalaThrowStatement))
#define BALA_THROW_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_THROW_STATEMENT, BalaThrowStatementClass))
#define BALA_IS_THROW_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_THROW_STATEMENT))
#define BALA_IS_THROW_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_THROW_STATEMENT))
#define BALA_THROW_STATEMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_THROW_STATEMENT, BalaThrowStatementClass))

typedef struct _BalaThrowStatement BalaThrowStatement;
typedef struct _BalaThrowStatementClass BalaThrowStatementClass;

#define BALA_TYPE_TRY_STATEMENT (bala_try_statement_get_type ())
#define BALA_TRY_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_TRY_STATEMENT, BalaTryStatement))
#define BALA_TRY_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_TRY_STATEMENT, BalaTryStatementClass))
#define BALA_IS_TRY_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_TRY_STATEMENT))
#define BALA_IS_TRY_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_TRY_STATEMENT))
#define BALA_TRY_STATEMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_TRY_STATEMENT, BalaTryStatementClass))

typedef struct _BalaTryStatement BalaTryStatement;
typedef struct _BalaTryStatementClass BalaTryStatementClass;

#define BALA_TYPE_LOCK_STATEMENT (bala_lock_statement_get_type ())
#define BALA_LOCK_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_LOCK_STATEMENT, BalaLockStatement))
#define BALA_LOCK_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_LOCK_STATEMENT, BalaLockStatementClass))
#define BALA_IS_LOCK_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_LOCK_STATEMENT))
#define BALA_IS_LOCK_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_LOCK_STATEMENT))
#define BALA_LOCK_STATEMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_LOCK_STATEMENT, BalaLockStatementClass))

typedef struct _BalaLockStatement BalaLockStatement;
typedef struct _BalaLockStatementClass BalaLockStatementClass;

#define BALA_TYPE_UNLOCK_STATEMENT (bala_unlock_statement_get_type ())
#define BALA_UNLOCK_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_UNLOCK_STATEMENT, BalaUnlockStatement))
#define BALA_UNLOCK_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_UNLOCK_STATEMENT, BalaUnlockStatementClass))
#define BALA_IS_UNLOCK_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_UNLOCK_STATEMENT))
#define BALA_IS_UNLOCK_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_UNLOCK_STATEMENT))
#define BALA_UNLOCK_STATEMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_UNLOCK_STATEMENT, BalaUnlockStatementClass))

typedef struct _BalaUnlockStatement BalaUnlockStatement;
typedef struct _BalaUnlockStatementClass BalaUnlockStatementClass;

#define BALA_TYPE_DELETE_STATEMENT (bala_delete_statement_get_type ())
#define BALA_DELETE_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_DELETE_STATEMENT, BalaDeleteStatement))
#define BALA_DELETE_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_DELETE_STATEMENT, BalaDeleteStatementClass))
#define BALA_IS_DELETE_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_DELETE_STATEMENT))
#define BALA_IS_DELETE_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_DELETE_STATEMENT))
#define BALA_DELETE_STATEMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_DELETE_STATEMENT, BalaDeleteStatementClass))

typedef struct _BalaDeleteStatement BalaDeleteStatement;
typedef struct _BalaDeleteStatementClass BalaDeleteStatementClass;

#define BALA_TYPE_INTEGER_LITERAL (bala_integer_literal_get_type ())
#define BALA_INTEGER_LITERAL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_INTEGER_LITERAL, BalaIntegerLiteral))
#define BALA_INTEGER_LITERAL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_INTEGER_LITERAL, BalaIntegerLiteralClass))
#define BALA_IS_INTEGER_LITERAL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_INTEGER_LITERAL))
#define BALA_IS_INTEGER_LITERAL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_INTEGER_LITERAL))
#define BALA_INTEGER_LITERAL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_INTEGER_LITERAL, BalaIntegerLiteralClass))

typedef struct _BalaIntegerLiteral BalaIntegerLiteral;
typedef struct _BalaIntegerLiteralClass BalaIntegerLiteralClass;

#define BALA_TYPE_REAL_LITERAL (bala_real_literal_get_type ())
#define BALA_REAL_LITERAL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_REAL_LITERAL, BalaRealLiteral))
#define BALA_REAL_LITERAL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_REAL_LITERAL, BalaRealLiteralClass))
#define BALA_IS_REAL_LITERAL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_REAL_LITERAL))
#define BALA_IS_REAL_LITERAL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_REAL_LITERAL))
#define BALA_REAL_LITERAL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_REAL_LITERAL, BalaRealLiteralClass))

typedef struct _BalaRealLiteral BalaRealLiteral;
typedef struct _BalaRealLiteralClass BalaRealLiteralClass;

#define BALA_TYPE_REGEX_LITERAL (bala_regex_literal_get_type ())
#define BALA_REGEX_LITERAL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_REGEX_LITERAL, BalaRegexLiteral))
#define BALA_REGEX_LITERAL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_REGEX_LITERAL, BalaRegexLiteralClass))
#define BALA_IS_REGEX_LITERAL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_REGEX_LITERAL))
#define BALA_IS_REGEX_LITERAL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_REGEX_LITERAL))
#define BALA_REGEX_LITERAL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_REGEX_LITERAL, BalaRegexLiteralClass))

typedef struct _BalaRegexLiteral BalaRegexLiteral;
typedef struct _BalaRegexLiteralClass BalaRegexLiteralClass;

#define BALA_TYPE_STRING_LITERAL (bala_string_literal_get_type ())
#define BALA_STRING_LITERAL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_STRING_LITERAL, BalaStringLiteral))
#define BALA_STRING_LITERAL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_STRING_LITERAL, BalaStringLiteralClass))
#define BALA_IS_STRING_LITERAL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_STRING_LITERAL))
#define BALA_IS_STRING_LITERAL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_STRING_LITERAL))
#define BALA_STRING_LITERAL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_STRING_LITERAL, BalaStringLiteralClass))

typedef struct _BalaStringLiteral BalaStringLiteral;
typedef struct _BalaStringLiteralClass BalaStringLiteralClass;

#define BALA_TYPE_TEMPLATE (bala_template_get_type ())
#define BALA_TEMPLATE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_TEMPLATE, BalaTemplate))
#define BALA_TEMPLATE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_TEMPLATE, BalaTemplateClass))
#define BALA_IS_TEMPLATE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_TEMPLATE))
#define BALA_IS_TEMPLATE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_TEMPLATE))
#define BALA_TEMPLATE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_TEMPLATE, BalaTemplateClass))

typedef struct _BalaTemplate BalaTemplate;
typedef struct _BalaTemplateClass BalaTemplateClass;

#define BALA_TYPE_TUPLE (bala_tuple_get_type ())
#define BALA_TUPLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_TUPLE, BalaTuple))
#define BALA_TUPLE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_TUPLE, BalaTupleClass))
#define BALA_IS_TUPLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_TUPLE))
#define BALA_IS_TUPLE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_TUPLE))
#define BALA_TUPLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_TUPLE, BalaTupleClass))

typedef struct _BalaTuple BalaTuple;
typedef struct _BalaTupleClass BalaTupleClass;

#define BALA_TYPE_NULL_LITERAL (bala_null_literal_get_type ())
#define BALA_NULL_LITERAL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_NULL_LITERAL, BalaNullLiteral))
#define BALA_NULL_LITERAL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_NULL_LITERAL, BalaNullLiteralClass))
#define BALA_IS_NULL_LITERAL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_NULL_LITERAL))
#define BALA_IS_NULL_LITERAL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_NULL_LITERAL))
#define BALA_NULL_LITERAL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_NULL_LITERAL, BalaNullLiteralClass))

typedef struct _BalaNullLiteral BalaNullLiteral;
typedef struct _BalaNullLiteralClass BalaNullLiteralClass;

#define BALA_TYPE_MEMBER_ACCESS (bala_member_access_get_type ())
#define BALA_MEMBER_ACCESS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_MEMBER_ACCESS, BalaMemberAccess))
#define BALA_MEMBER_ACCESS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_MEMBER_ACCESS, BalaMemberAccessClass))
#define BALA_IS_MEMBER_ACCESS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_MEMBER_ACCESS))
#define BALA_IS_MEMBER_ACCESS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_MEMBER_ACCESS))
#define BALA_MEMBER_ACCESS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_MEMBER_ACCESS, BalaMemberAccessClass))

typedef struct _BalaMemberAccess BalaMemberAccess;
typedef struct _BalaMemberAccessClass BalaMemberAccessClass;

#define BALA_TYPE_METHOD_CALL (bala_method_call_get_type ())
#define BALA_METHOD_CALL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_METHOD_CALL, BalaMethodCall))
#define BALA_METHOD_CALL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_METHOD_CALL, BalaMethodCallClass))
#define BALA_IS_METHOD_CALL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_METHOD_CALL))
#define BALA_IS_METHOD_CALL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_METHOD_CALL))
#define BALA_METHOD_CALL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_METHOD_CALL, BalaMethodCallClass))

typedef struct _BalaMethodCall BalaMethodCall;
typedef struct _BalaMethodCallClass BalaMethodCallClass;

#define BALA_TYPE_ELEMENT_ACCESS (bala_element_access_get_type ())
#define BALA_ELEMENT_ACCESS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_ELEMENT_ACCESS, BalaElementAccess))
#define BALA_ELEMENT_ACCESS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_ELEMENT_ACCESS, BalaElementAccessClass))
#define BALA_IS_ELEMENT_ACCESS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_ELEMENT_ACCESS))
#define BALA_IS_ELEMENT_ACCESS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_ELEMENT_ACCESS))
#define BALA_ELEMENT_ACCESS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_ELEMENT_ACCESS, BalaElementAccessClass))

typedef struct _BalaElementAccess BalaElementAccess;
typedef struct _BalaElementAccessClass BalaElementAccessClass;

#define BALA_TYPE_SLICE_EXPRESSION (bala_slice_expression_get_type ())
#define BALA_SLICE_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_SLICE_EXPRESSION, BalaSliceExpression))
#define BALA_SLICE_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_SLICE_EXPRESSION, BalaSliceExpressionClass))
#define BALA_IS_SLICE_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_SLICE_EXPRESSION))
#define BALA_IS_SLICE_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_SLICE_EXPRESSION))
#define BALA_SLICE_EXPRESSION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_SLICE_EXPRESSION, BalaSliceExpressionClass))

typedef struct _BalaSliceExpression BalaSliceExpression;
typedef struct _BalaSliceExpressionClass BalaSliceExpressionClass;

#define BALA_TYPE_POSTFIX_EXPRESSION (bala_postfix_expression_get_type ())
#define BALA_POSTFIX_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_POSTFIX_EXPRESSION, BalaPostfixExpression))
#define BALA_POSTFIX_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_POSTFIX_EXPRESSION, BalaPostfixExpressionClass))
#define BALA_IS_POSTFIX_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_POSTFIX_EXPRESSION))
#define BALA_IS_POSTFIX_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_POSTFIX_EXPRESSION))
#define BALA_POSTFIX_EXPRESSION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_POSTFIX_EXPRESSION, BalaPostfixExpressionClass))

typedef struct _BalaPostfixExpression BalaPostfixExpression;
typedef struct _BalaPostfixExpressionClass BalaPostfixExpressionClass;

#define BALA_TYPE_OBJECT_CREATION_EXPRESSION (bala_object_creation_expression_get_type ())
#define BALA_OBJECT_CREATION_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_OBJECT_CREATION_EXPRESSION, BalaObjectCreationExpression))
#define BALA_OBJECT_CREATION_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_OBJECT_CREATION_EXPRESSION, BalaObjectCreationExpressionClass))
#define BALA_IS_OBJECT_CREATION_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_OBJECT_CREATION_EXPRESSION))
#define BALA_IS_OBJECT_CREATION_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_OBJECT_CREATION_EXPRESSION))
#define BALA_OBJECT_CREATION_EXPRESSION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_OBJECT_CREATION_EXPRESSION, BalaObjectCreationExpressionClass))

typedef struct _BalaObjectCreationExpression BalaObjectCreationExpression;
typedef struct _BalaObjectCreationExpressionClass BalaObjectCreationExpressionClass;

#define BALA_TYPE_SIZEOF_EXPRESSION (bala_sizeof_expression_get_type ())
#define BALA_SIZEOF_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_SIZEOF_EXPRESSION, BalaSizeofExpression))
#define BALA_SIZEOF_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_SIZEOF_EXPRESSION, BalaSizeofExpressionClass))
#define BALA_IS_SIZEOF_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_SIZEOF_EXPRESSION))
#define BALA_IS_SIZEOF_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_SIZEOF_EXPRESSION))
#define BALA_SIZEOF_EXPRESSION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_SIZEOF_EXPRESSION, BalaSizeofExpressionClass))

typedef struct _BalaSizeofExpression BalaSizeofExpression;
typedef struct _BalaSizeofExpressionClass BalaSizeofExpressionClass;

#define BALA_TYPE_TYPEOF_EXPRESSION (bala_typeof_expression_get_type ())
#define BALA_TYPEOF_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_TYPEOF_EXPRESSION, BalaTypeofExpression))
#define BALA_TYPEOF_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_TYPEOF_EXPRESSION, BalaTypeofExpressionClass))
#define BALA_IS_TYPEOF_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_TYPEOF_EXPRESSION))
#define BALA_IS_TYPEOF_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_TYPEOF_EXPRESSION))
#define BALA_TYPEOF_EXPRESSION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_TYPEOF_EXPRESSION, BalaTypeofExpressionClass))

typedef struct _BalaTypeofExpression BalaTypeofExpression;
typedef struct _BalaTypeofExpressionClass BalaTypeofExpressionClass;

#define BALA_TYPE_UNARY_EXPRESSION (bala_unary_expression_get_type ())
#define BALA_UNARY_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_UNARY_EXPRESSION, BalaUnaryExpression))
#define BALA_UNARY_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_UNARY_EXPRESSION, BalaUnaryExpressionClass))
#define BALA_IS_UNARY_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_UNARY_EXPRESSION))
#define BALA_IS_UNARY_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_UNARY_EXPRESSION))
#define BALA_UNARY_EXPRESSION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_UNARY_EXPRESSION, BalaUnaryExpressionClass))

typedef struct _BalaUnaryExpression BalaUnaryExpression;
typedef struct _BalaUnaryExpressionClass BalaUnaryExpressionClass;

#define BALA_TYPE_NAMED_ARGUMENT (bala_named_argument_get_type ())
#define BALA_NAMED_ARGUMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_NAMED_ARGUMENT, BalaNamedArgument))
#define BALA_NAMED_ARGUMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_NAMED_ARGUMENT, BalaNamedArgumentClass))
#define BALA_IS_NAMED_ARGUMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_NAMED_ARGUMENT))
#define BALA_IS_NAMED_ARGUMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_NAMED_ARGUMENT))
#define BALA_NAMED_ARGUMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_NAMED_ARGUMENT, BalaNamedArgumentClass))

typedef struct _BalaNamedArgument BalaNamedArgument;
typedef struct _BalaNamedArgumentClass BalaNamedArgumentClass;

#define BALA_TYPE_POINTER_INDIRECTION (bala_pointer_indirection_get_type ())
#define BALA_POINTER_INDIRECTION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_POINTER_INDIRECTION, BalaPointerIndirection))
#define BALA_POINTER_INDIRECTION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_POINTER_INDIRECTION, BalaPointerIndirectionClass))
#define BALA_IS_POINTER_INDIRECTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_POINTER_INDIRECTION))
#define BALA_IS_POINTER_INDIRECTION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_POINTER_INDIRECTION))
#define BALA_POINTER_INDIRECTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_POINTER_INDIRECTION, BalaPointerIndirectionClass))

typedef struct _BalaPointerIndirection BalaPointerIndirection;
typedef struct _BalaPointerIndirectionClass BalaPointerIndirectionClass;

#define BALA_TYPE_REFERENCE_TRANSFER_EXPRESSION (bala_reference_transfer_expression_get_type ())
#define BALA_REFERENCE_TRANSFER_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_REFERENCE_TRANSFER_EXPRESSION, BalaReferenceTransferExpression))
#define BALA_REFERENCE_TRANSFER_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_REFERENCE_TRANSFER_EXPRESSION, BalaReferenceTransferExpressionClass))
#define BALA_IS_REFERENCE_TRANSFER_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_REFERENCE_TRANSFER_EXPRESSION))
#define BALA_IS_REFERENCE_TRANSFER_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_REFERENCE_TRANSFER_EXPRESSION))
#define BALA_REFERENCE_TRANSFER_EXPRESSION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_REFERENCE_TRANSFER_EXPRESSION, BalaReferenceTransferExpressionClass))

typedef struct _BalaReferenceTransferExpression BalaReferenceTransferExpression;
typedef struct _BalaReferenceTransferExpressionClass BalaReferenceTransferExpressionClass;

#define BALA_TYPE_TYPECHECK (bala_typecheck_get_type ())
#define BALA_TYPECHECK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_TYPECHECK, BalaTypeCheck))
#define BALA_TYPECHECK_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_TYPECHECK, BalaTypeCheckClass))
#define BALA_IS_TYPECHECK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_TYPECHECK))
#define BALA_IS_TYPECHECK_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_TYPECHECK))
#define BALA_TYPECHECK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_TYPECHECK, BalaTypeCheckClass))

typedef struct _BalaTypeCheck BalaTypeCheck;
typedef struct _BalaTypeCheckClass BalaTypeCheckClass;

#define BALA_TYPE_CONDITIONAL_EXPRESSION (bala_conditional_expression_get_type ())
#define BALA_CONDITIONAL_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_CONDITIONAL_EXPRESSION, BalaConditionalExpression))
#define BALA_CONDITIONAL_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_CONDITIONAL_EXPRESSION, BalaConditionalExpressionClass))
#define BALA_IS_CONDITIONAL_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_CONDITIONAL_EXPRESSION))
#define BALA_IS_CONDITIONAL_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_CONDITIONAL_EXPRESSION))
#define BALA_CONDITIONAL_EXPRESSION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_CONDITIONAL_EXPRESSION, BalaConditionalExpressionClass))

typedef struct _BalaConditionalExpression BalaConditionalExpression;
typedef struct _BalaConditionalExpressionClass BalaConditionalExpressionClass;

#define BALA_TYPE_LAMBDA_EXPRESSION (bala_lambda_expression_get_type ())
#define BALA_LAMBDA_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_LAMBDA_EXPRESSION, BalaLambdaExpression))
#define BALA_LAMBDA_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_LAMBDA_EXPRESSION, BalaLambdaExpressionClass))
#define BALA_IS_LAMBDA_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_LAMBDA_EXPRESSION))
#define BALA_IS_LAMBDA_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_LAMBDA_EXPRESSION))
#define BALA_LAMBDA_EXPRESSION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_LAMBDA_EXPRESSION, BalaLambdaExpressionClass))

typedef struct _BalaLambdaExpression BalaLambdaExpression;
typedef struct _BalaLambdaExpressionClass BalaLambdaExpressionClass;
typedef struct _BalaCodeGeneratorPrivate BalaCodeGeneratorPrivate;

#define BALA_TYPE_TARGET_VALUE (bala_target_value_get_type ())
#define BALA_TARGET_VALUE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_TARGET_VALUE, BalaTargetValue))
#define BALA_TARGET_VALUE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_TARGET_VALUE, BalaTargetValueClass))
#define BALA_IS_TARGET_VALUE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_TARGET_VALUE))
#define BALA_IS_TARGET_VALUE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_TARGET_VALUE))
#define BALA_TARGET_VALUE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_TARGET_VALUE, BalaTargetValueClass))

typedef struct _BalaTargetValue BalaTargetValue;
typedef struct _BalaTargetValueClass BalaTargetValueClass;

#define BALA_TYPE_ATTRIBUTE_CACHE (bala_attribute_cache_get_type ())
#define BALA_ATTRIBUTE_CACHE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_ATTRIBUTE_CACHE, BalaAttributeCache))
#define BALA_ATTRIBUTE_CACHE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_ATTRIBUTE_CACHE, BalaAttributeCacheClass))
#define BALA_IS_ATTRIBUTE_CACHE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_ATTRIBUTE_CACHE))
#define BALA_IS_ATTRIBUTE_CACHE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_ATTRIBUTE_CACHE))
#define BALA_ATTRIBUTE_CACHE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_ATTRIBUTE_CACHE, BalaAttributeCacheClass))

typedef struct _BalaAttributeCache BalaAttributeCache;
typedef struct _BalaAttributeCacheClass BalaAttributeCacheClass;
typedef struct _BalaAttributeCachePrivate BalaAttributeCachePrivate;

#define BALA_TYPE_CODE_WRITER (bala_code_writer_get_type ())
#define BALA_CODE_WRITER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_CODE_WRITER, BalaCodeWriter))
#define BALA_CODE_WRITER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_CODE_WRITER, BalaCodeWriterClass))
#define BALA_IS_CODE_WRITER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_CODE_WRITER))
#define BALA_IS_CODE_WRITER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_CODE_WRITER))
#define BALA_CODE_WRITER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_CODE_WRITER, BalaCodeWriterClass))

typedef struct _BalaCodeWriter BalaCodeWriter;
typedef struct _BalaCodeWriterClass BalaCodeWriterClass;
typedef struct _BalaCodeWriterPrivate BalaCodeWriterPrivate;
typedef enum  {
	BALA_CODE_WRITER_TYPE_EXTERNAL,
	BALA_CODE_WRITER_TYPE_INTERNAL,
	BALA_CODE_WRITER_TYPE_FAST,
	BALA_CODE_WRITER_TYPE_DUMP,
	BALA_CODE_WRITER_TYPE_BAPIGEN
} BalaCodeWriterType;

#define BALA_TYPE_CODE_WRITER_TYPE (bala_code_writer_type_get_type ())
typedef struct _BalaCommentPrivate BalaCommentPrivate;

#define BALA_TYPE_GIR_COMMENT (bala_gir_comment_get_type ())
#define BALA_GIR_COMMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_GIR_COMMENT, BalaGirComment))
#define BALA_GIR_COMMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_GIR_COMMENT, BalaGirCommentClass))
#define BALA_IS_GIR_COMMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_GIR_COMMENT))
#define BALA_IS_GIR_COMMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_GIR_COMMENT))
#define BALA_GIR_COMMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_GIR_COMMENT, BalaGirCommentClass))

typedef struct _BalaGirComment BalaGirComment;
typedef struct _BalaGirCommentClass BalaGirCommentClass;
typedef struct _BalaGirCommentPrivate BalaGirCommentPrivate;
typedef struct _BalaConditionalExpressionPrivate BalaConditionalExpressionPrivate;
typedef struct _BalaConstantPrivate BalaConstantPrivate;
typedef struct _BalaConstructorPrivate BalaConstructorPrivate;
typedef enum  {
	BALA_MEMBER_BINDING_INSTANCE,
	BALA_MEMBER_BINDING_CLASS,
	BALA_MEMBER_BINDING_STATIC
} BalaMemberBinding;

#define BALA_TYPE_MEMBER_BINDING (bala_member_binding_get_type ())
typedef struct _BalaContinueStatementPrivate BalaContinueStatementPrivate;
typedef struct _BalaCreationMethodPrivate BalaCreationMethodPrivate;
typedef struct _BalaDeclarationStatementPrivate BalaDeclarationStatementPrivate;
typedef struct _BalaDelegatePrivate BalaDelegatePrivate;

#define BALA_TYPE_DELEGATE_DESTROY_FIELD (bala_delegate_destroy_field_get_type ())
#define BALA_DELEGATE_DESTROY_FIELD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_DELEGATE_DESTROY_FIELD, BalaDelegateDestroyField))
#define BALA_DELEGATE_DESTROY_FIELD_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_DELEGATE_DESTROY_FIELD, BalaDelegateDestroyFieldClass))
#define BALA_IS_DELEGATE_DESTROY_FIELD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_DELEGATE_DESTROY_FIELD))
#define BALA_IS_DELEGATE_DESTROY_FIELD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_DELEGATE_DESTROY_FIELD))
#define BALA_DELEGATE_DESTROY_FIELD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_DELEGATE_DESTROY_FIELD, BalaDelegateDestroyFieldClass))

typedef struct _BalaDelegateDestroyField BalaDelegateDestroyField;
typedef struct _BalaDelegateDestroyFieldClass BalaDelegateDestroyFieldClass;
typedef struct _BalaDelegateDestroyFieldPrivate BalaDelegateDestroyFieldPrivate;

#define BALA_TYPE_DELEGATE_TARGET_FIELD (bala_delegate_target_field_get_type ())
#define BALA_DELEGATE_TARGET_FIELD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_DELEGATE_TARGET_FIELD, BalaDelegateTargetField))
#define BALA_DELEGATE_TARGET_FIELD_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_DELEGATE_TARGET_FIELD, BalaDelegateTargetFieldClass))
#define BALA_IS_DELEGATE_TARGET_FIELD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_DELEGATE_TARGET_FIELD))
#define BALA_IS_DELEGATE_TARGET_FIELD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_DELEGATE_TARGET_FIELD))
#define BALA_DELEGATE_TARGET_FIELD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_DELEGATE_TARGET_FIELD, BalaDelegateTargetFieldClass))

typedef struct _BalaDelegateTargetField BalaDelegateTargetField;
typedef struct _BalaDelegateTargetFieldClass BalaDelegateTargetFieldClass;
typedef struct _BalaDelegateTargetFieldPrivate BalaDelegateTargetFieldPrivate;

#define BALA_TYPE_DELEGATE_TYPE (bala_delegate_type_get_type ())
#define BALA_DELEGATE_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_DELEGATE_TYPE, BalaDelegateType))
#define BALA_DELEGATE_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_DELEGATE_TYPE, BalaDelegateTypeClass))
#define BALA_IS_DELEGATE_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_DELEGATE_TYPE))
#define BALA_IS_DELEGATE_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_DELEGATE_TYPE))
#define BALA_DELEGATE_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_DELEGATE_TYPE, BalaDelegateTypeClass))

typedef struct _BalaDelegateType BalaDelegateType;
typedef struct _BalaDelegateTypeClass BalaDelegateTypeClass;
typedef struct _BalaDelegateTypePrivate BalaDelegateTypePrivate;
typedef struct _BalaDeleteStatementPrivate BalaDeleteStatementPrivate;
typedef struct _BalaDestructorPrivate BalaDestructorPrivate;
typedef struct _BalaDoStatementPrivate BalaDoStatementPrivate;

#define BALA_TYPE_DYNAMIC_METHOD (bala_dynamic_method_get_type ())
#define BALA_DYNAMIC_METHOD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_DYNAMIC_METHOD, BalaDynamicMethod))
#define BALA_DYNAMIC_METHOD_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_DYNAMIC_METHOD, BalaDynamicMethodClass))
#define BALA_IS_DYNAMIC_METHOD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_DYNAMIC_METHOD))
#define BALA_IS_DYNAMIC_METHOD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_DYNAMIC_METHOD))
#define BALA_DYNAMIC_METHOD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_DYNAMIC_METHOD, BalaDynamicMethodClass))

typedef struct _BalaDynamicMethod BalaDynamicMethod;
typedef struct _BalaDynamicMethodClass BalaDynamicMethodClass;
typedef struct _BalaDynamicMethodPrivate BalaDynamicMethodPrivate;
typedef struct _BalaPropertyPrivate BalaPropertyPrivate;

#define BALA_TYPE_DYNAMIC_PROPERTY (bala_dynamic_property_get_type ())
#define BALA_DYNAMIC_PROPERTY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_DYNAMIC_PROPERTY, BalaDynamicProperty))
#define BALA_DYNAMIC_PROPERTY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_DYNAMIC_PROPERTY, BalaDynamicPropertyClass))
#define BALA_IS_DYNAMIC_PROPERTY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_DYNAMIC_PROPERTY))
#define BALA_IS_DYNAMIC_PROPERTY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_DYNAMIC_PROPERTY))
#define BALA_DYNAMIC_PROPERTY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_DYNAMIC_PROPERTY, BalaDynamicPropertyClass))

typedef struct _BalaDynamicProperty BalaDynamicProperty;
typedef struct _BalaDynamicPropertyClass BalaDynamicPropertyClass;
typedef struct _BalaDynamicPropertyPrivate BalaDynamicPropertyPrivate;
typedef struct _BalaSignalPrivate BalaSignalPrivate;

#define BALA_TYPE_DYNAMIC_SIGNAL (bala_dynamic_signal_get_type ())
#define BALA_DYNAMIC_SIGNAL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_DYNAMIC_SIGNAL, BalaDynamicSignal))
#define BALA_DYNAMIC_SIGNAL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_DYNAMIC_SIGNAL, BalaDynamicSignalClass))
#define BALA_IS_DYNAMIC_SIGNAL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_DYNAMIC_SIGNAL))
#define BALA_IS_DYNAMIC_SIGNAL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_DYNAMIC_SIGNAL))
#define BALA_DYNAMIC_SIGNAL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_DYNAMIC_SIGNAL, BalaDynamicSignalClass))

typedef struct _BalaDynamicSignal BalaDynamicSignal;
typedef struct _BalaDynamicSignalClass BalaDynamicSignalClass;
typedef struct _BalaDynamicSignalPrivate BalaDynamicSignalPrivate;
typedef struct _BalaElementAccessPrivate BalaElementAccessPrivate;
typedef struct _BalaEmptyStatementPrivate BalaEmptyStatementPrivate;
typedef struct _BalaEnumPrivate BalaEnumPrivate;
typedef struct _BalaEnumValuePrivate BalaEnumValuePrivate;

#define BALA_TYPE_ENUM_VALUE_TYPE (bala_enum_value_type_get_type ())
#define BALA_ENUM_VALUE_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_ENUM_VALUE_TYPE, BalaEnumValueType))
#define BALA_ENUM_VALUE_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_ENUM_VALUE_TYPE, BalaEnumValueTypeClass))
#define BALA_IS_ENUM_VALUE_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_ENUM_VALUE_TYPE))
#define BALA_IS_ENUM_VALUE_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_ENUM_VALUE_TYPE))
#define BALA_ENUM_VALUE_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_ENUM_VALUE_TYPE, BalaEnumValueTypeClass))

typedef struct _BalaEnumValueType BalaEnumValueType;
typedef struct _BalaEnumValueTypeClass BalaEnumValueTypeClass;
typedef struct _BalaEnumValueTypePrivate BalaEnumValueTypePrivate;
typedef struct _BalaErrorCodePrivate BalaErrorCodePrivate;
typedef struct _BalaErrorDomainPrivate BalaErrorDomainPrivate;

#define BALA_TYPE_ERROR_TYPE (bala_error_type_get_type ())
#define BALA_ERROR_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_ERROR_TYPE, BalaErrorType))
#define BALA_ERROR_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_ERROR_TYPE, BalaErrorTypeClass))
#define BALA_IS_ERROR_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_ERROR_TYPE))
#define BALA_IS_ERROR_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_ERROR_TYPE))
#define BALA_ERROR_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_ERROR_TYPE, BalaErrorTypeClass))

typedef struct _BalaErrorType BalaErrorType;
typedef struct _BalaErrorTypeClass BalaErrorTypeClass;
typedef struct _BalaErrorTypePrivate BalaErrorTypePrivate;
typedef struct _BalaExpressionStatementPrivate BalaExpressionStatementPrivate;

#define BALA_TYPE_FIELD_PROTOTYPE (bala_field_prototype_get_type ())
#define BALA_FIELD_PROTOTYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_FIELD_PROTOTYPE, BalaFieldPrototype))
#define BALA_FIELD_PROTOTYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_FIELD_PROTOTYPE, BalaFieldPrototypeClass))
#define BALA_IS_FIELD_PROTOTYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_FIELD_PROTOTYPE))
#define BALA_IS_FIELD_PROTOTYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_FIELD_PROTOTYPE))
#define BALA_FIELD_PROTOTYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_FIELD_PROTOTYPE, BalaFieldPrototypeClass))

typedef struct _BalaFieldPrototype BalaFieldPrototype;
typedef struct _BalaFieldPrototypeClass BalaFieldPrototypeClass;
typedef struct _BalaFieldPrototypePrivate BalaFieldPrototypePrivate;

#define BALA_TYPE_FLOATING_TYPE (bala_floating_type_get_type ())
#define BALA_FLOATING_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_FLOATING_TYPE, BalaFloatingType))
#define BALA_FLOATING_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_FLOATING_TYPE, BalaFloatingTypeClass))
#define BALA_IS_FLOATING_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_FLOATING_TYPE))
#define BALA_IS_FLOATING_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_FLOATING_TYPE))
#define BALA_FLOATING_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_FLOATING_TYPE, BalaFloatingTypeClass))

typedef struct _BalaFloatingType BalaFloatingType;
typedef struct _BalaFloatingTypeClass BalaFloatingTypeClass;
typedef struct _BalaFloatingTypePrivate BalaFloatingTypePrivate;
typedef struct _BalaFlowAnalyzerPrivate BalaFlowAnalyzerPrivate;
typedef struct _BalaForeachStatementPrivate BalaForeachStatementPrivate;
typedef struct _BalaForStatementPrivate BalaForStatementPrivate;

#define BALA_TYPE_GIR_PARSER (bala_gir_parser_get_type ())
#define BALA_GIR_PARSER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_GIR_PARSER, BalaGirParser))
#define BALA_GIR_PARSER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_GIR_PARSER, BalaGirParserClass))
#define BALA_IS_GIR_PARSER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_GIR_PARSER))
#define BALA_IS_GIR_PARSER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_GIR_PARSER))
#define BALA_GIR_PARSER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_GIR_PARSER, BalaGirParserClass))

typedef struct _BalaGirParser BalaGirParser;
typedef struct _BalaGirParserClass BalaGirParserClass;
typedef struct _BalaGirParserPrivate BalaGirParserPrivate;

#define BALA_TYPE_GENERIC_DESTROY_FIELD (bala_generic_destroy_field_get_type ())
#define BALA_GENERIC_DESTROY_FIELD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_GENERIC_DESTROY_FIELD, BalaGenericDestroyField))
#define BALA_GENERIC_DESTROY_FIELD_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_GENERIC_DESTROY_FIELD, BalaGenericDestroyFieldClass))
#define BALA_IS_GENERIC_DESTROY_FIELD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_GENERIC_DESTROY_FIELD))
#define BALA_IS_GENERIC_DESTROY_FIELD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_GENERIC_DESTROY_FIELD))
#define BALA_GENERIC_DESTROY_FIELD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_GENERIC_DESTROY_FIELD, BalaGenericDestroyFieldClass))

typedef struct _BalaGenericDestroyField BalaGenericDestroyField;
typedef struct _BalaGenericDestroyFieldClass BalaGenericDestroyFieldClass;
typedef struct _BalaGenericDestroyFieldPrivate BalaGenericDestroyFieldPrivate;

#define BALA_TYPE_GENERIC_DUP_FIELD (bala_generic_dup_field_get_type ())
#define BALA_GENERIC_DUP_FIELD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_GENERIC_DUP_FIELD, BalaGenericDupField))
#define BALA_GENERIC_DUP_FIELD_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_GENERIC_DUP_FIELD, BalaGenericDupFieldClass))
#define BALA_IS_GENERIC_DUP_FIELD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_GENERIC_DUP_FIELD))
#define BALA_IS_GENERIC_DUP_FIELD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_GENERIC_DUP_FIELD))
#define BALA_GENERIC_DUP_FIELD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_GENERIC_DUP_FIELD, BalaGenericDupFieldClass))

typedef struct _BalaGenericDupField BalaGenericDupField;
typedef struct _BalaGenericDupFieldClass BalaGenericDupFieldClass;
typedef struct _BalaGenericDupFieldPrivate BalaGenericDupFieldPrivate;

#define BALA_TYPE_GENERIC_TYPE (bala_generic_type_get_type ())
#define BALA_GENERIC_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_GENERIC_TYPE, BalaGenericType))
#define BALA_GENERIC_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_GENERIC_TYPE, BalaGenericTypeClass))
#define BALA_IS_GENERIC_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_GENERIC_TYPE))
#define BALA_IS_GENERIC_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_GENERIC_TYPE))
#define BALA_GENERIC_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_GENERIC_TYPE, BalaGenericTypeClass))

typedef struct _BalaGenericType BalaGenericType;
typedef struct _BalaGenericTypeClass BalaGenericTypeClass;
typedef struct _BalaGenericTypePrivate BalaGenericTypePrivate;

#define BALA_GENIE_TYPE_PARSER (bala_genie_parser_get_type ())
#define BALA_GENIE_PARSER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_GENIE_TYPE_PARSER, BalaGenieParser))
#define BALA_GENIE_PARSER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_GENIE_TYPE_PARSER, BalaGenieParserClass))
#define BALA_GENIE_IS_PARSER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_GENIE_TYPE_PARSER))
#define BALA_GENIE_IS_PARSER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_GENIE_TYPE_PARSER))
#define BALA_GENIE_PARSER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_GENIE_TYPE_PARSER, BalaGenieParserClass))

typedef struct _BalaGenieParser BalaGenieParser;
typedef struct _BalaGenieParserClass BalaGenieParserClass;
typedef struct _BalaGenieParserPrivate BalaGenieParserPrivate;

#define BALA_GENIE_TYPE_SCANNER (bala_genie_scanner_get_type ())
#define BALA_GENIE_SCANNER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_GENIE_TYPE_SCANNER, BalaGenieScanner))
#define BALA_GENIE_SCANNER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_GENIE_TYPE_SCANNER, BalaGenieScannerClass))
#define BALA_GENIE_IS_SCANNER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_GENIE_TYPE_SCANNER))
#define BALA_GENIE_IS_SCANNER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_GENIE_TYPE_SCANNER))
#define BALA_GENIE_SCANNER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_GENIE_TYPE_SCANNER, BalaGenieScannerClass))

typedef struct _BalaGenieScanner BalaGenieScanner;
typedef struct _BalaGenieScannerClass BalaGenieScannerClass;
typedef struct _BalaGenieScannerPrivate BalaGenieScannerPrivate;

#define BALA_TYPE_SOURCE_LOCATION (bala_source_location_get_type ())
typedef struct _BalaSourceLocation BalaSourceLocation;
typedef enum  {
	BALA_GENIE_TOKEN_TYPE_NONE,
	BALA_GENIE_TOKEN_TYPE_ABSTRACT,
	BALA_GENIE_TOKEN_TYPE_ARRAY,
	BALA_GENIE_TOKEN_TYPE_AS,
	BALA_GENIE_TOKEN_TYPE_ASSERT,
	BALA_GENIE_TOKEN_TYPE_ASSIGN,
	BALA_GENIE_TOKEN_TYPE_ASSIGN_ADD,
	BALA_GENIE_TOKEN_TYPE_ASSIGN_BITWISE_AND,
	BALA_GENIE_TOKEN_TYPE_ASSIGN_BITWISE_OR,
	BALA_GENIE_TOKEN_TYPE_ASSIGN_BITWISE_XOR,
	BALA_GENIE_TOKEN_TYPE_ASSIGN_DIV,
	BALA_GENIE_TOKEN_TYPE_ASSIGN_MUL,
	BALA_GENIE_TOKEN_TYPE_ASSIGN_PERCENT,
	BALA_GENIE_TOKEN_TYPE_ASSIGN_SHIFT_LEFT,
	BALA_GENIE_TOKEN_TYPE_ASSIGN_SUB,
	BALA_GENIE_TOKEN_TYPE_ASYNC,
	BALA_GENIE_TOKEN_TYPE_BITWISE_AND,
	BALA_GENIE_TOKEN_TYPE_BITWISE_OR,
	BALA_GENIE_TOKEN_TYPE_BREAK,
	BALA_GENIE_TOKEN_TYPE_CARRET,
	BALA_GENIE_TOKEN_TYPE_CASE,
	BALA_GENIE_TOKEN_TYPE_CHARACTER_LITERAL,
	BALA_GENIE_TOKEN_TYPE_CLASS,
	BALA_GENIE_TOKEN_TYPE_CLOSE_BRACE,
	BALA_GENIE_TOKEN_TYPE_CLOSE_BRACKET,
	BALA_GENIE_TOKEN_TYPE_CLOSE_PARENS,
	BALA_GENIE_TOKEN_TYPE_CLOSE_REGEX_LITERAL,
	BALA_GENIE_TOKEN_TYPE_CLOSE_TEMPLATE,
	BALA_GENIE_TOKEN_TYPE_COLON,
	BALA_GENIE_TOKEN_TYPE_COMMA,
	BALA_GENIE_TOKEN_TYPE_CONST,
	BALA_GENIE_TOKEN_TYPE_CONSTRUCT,
	BALA_GENIE_TOKEN_TYPE_CONTINUE,
	BALA_GENIE_TOKEN_TYPE_DEDENT,
	BALA_GENIE_TOKEN_TYPE_DEF,
	BALA_GENIE_TOKEN_TYPE_DEFAULT,
	BALA_GENIE_TOKEN_TYPE_DELEGATE,
	BALA_GENIE_TOKEN_TYPE_DELETE,
	BALA_GENIE_TOKEN_TYPE_DICT,
	BALA_GENIE_TOKEN_TYPE_DIV,
	BALA_GENIE_TOKEN_TYPE_DO,
	BALA_GENIE_TOKEN_TYPE_DOT,
	BALA_GENIE_TOKEN_TYPE_DOWNTO,
	BALA_GENIE_TOKEN_TYPE_DYNAMIC,
	BALA_GENIE_TOKEN_TYPE_ELLIPSIS,
	BALA_GENIE_TOKEN_TYPE_ELSE,
	BALA_GENIE_TOKEN_TYPE_ENUM,
	BALA_GENIE_TOKEN_TYPE_ENSURES,
	BALA_GENIE_TOKEN_TYPE_ERRORDOMAIN,
	BALA_GENIE_TOKEN_TYPE_EOF,
	BALA_GENIE_TOKEN_TYPE_EOL,
	BALA_GENIE_TOKEN_TYPE_EVENT,
	BALA_GENIE_TOKEN_TYPE_EXCEPT,
	BALA_GENIE_TOKEN_TYPE_EXTERN,
	BALA_GENIE_TOKEN_TYPE_FALSE,
	BALA_GENIE_TOKEN_TYPE_FINAL,
	BALA_GENIE_TOKEN_TYPE_FINALLY,
	BALA_GENIE_TOKEN_TYPE_FOR,
	BALA_GENIE_TOKEN_TYPE_GET,
	BALA_GENIE_TOKEN_TYPE_HASH,
	BALA_GENIE_TOKEN_TYPE_IDENTIFIER,
	BALA_GENIE_TOKEN_TYPE_IF,
	BALA_GENIE_TOKEN_TYPE_IMPLEMENTS,
	BALA_GENIE_TOKEN_TYPE_IN,
	BALA_GENIE_TOKEN_TYPE_INDENT,
	BALA_GENIE_TOKEN_TYPE_INIT,
	BALA_GENIE_TOKEN_TYPE_INLINE,
	BALA_GENIE_TOKEN_TYPE_INTEGER_LITERAL,
	BALA_GENIE_TOKEN_TYPE_INTERFACE,
	BALA_GENIE_TOKEN_TYPE_INTERNAL,
	BALA_GENIE_TOKEN_TYPE_INTERR,
	BALA_GENIE_TOKEN_TYPE_IS,
	BALA_GENIE_TOKEN_TYPE_ISA,
	BALA_GENIE_TOKEN_TYPE_LAMBDA,
	BALA_GENIE_TOKEN_TYPE_LIST,
	BALA_GENIE_TOKEN_TYPE_LOCK,
	BALA_GENIE_TOKEN_TYPE_MINUS,
	BALA_GENIE_TOKEN_TYPE_NAMESPACE,
	BALA_GENIE_TOKEN_TYPE_NEW,
	BALA_GENIE_TOKEN_TYPE_NULL,
	BALA_GENIE_TOKEN_TYPE_OF,
	BALA_GENIE_TOKEN_TYPE_OUT,
	BALA_GENIE_TOKEN_TYPE_OP_AND,
	BALA_GENIE_TOKEN_TYPE_OP_DEC,
	BALA_GENIE_TOKEN_TYPE_OP_EQ,
	BALA_GENIE_TOKEN_TYPE_OP_GE,
	BALA_GENIE_TOKEN_TYPE_OP_GT,
	BALA_GENIE_TOKEN_TYPE_OP_INC,
	BALA_GENIE_TOKEN_TYPE_OP_LE,
	BALA_GENIE_TOKEN_TYPE_OP_LT,
	BALA_GENIE_TOKEN_TYPE_OP_NE,
	BALA_GENIE_TOKEN_TYPE_OP_NEG,
	BALA_GENIE_TOKEN_TYPE_OP_OR,
	BALA_GENIE_TOKEN_TYPE_OP_PTR,
	BALA_GENIE_TOKEN_TYPE_OP_SHIFT_LEFT,
	BALA_GENIE_TOKEN_TYPE_OPEN_BRACE,
	BALA_GENIE_TOKEN_TYPE_OPEN_BRACKET,
	BALA_GENIE_TOKEN_TYPE_OPEN_PARENS,
	BALA_GENIE_TOKEN_TYPE_OPEN_REGEX_LITERAL,
	BALA_GENIE_TOKEN_TYPE_OPEN_TEMPLATE,
	BALA_GENIE_TOKEN_TYPE_OVERRIDE,
	BALA_GENIE_TOKEN_TYPE_OWNED,
	BALA_GENIE_TOKEN_TYPE_PARAMS,
	BALA_GENIE_TOKEN_TYPE_PASS,
	BALA_GENIE_TOKEN_TYPE_PERCENT,
	BALA_GENIE_TOKEN_TYPE_PLUS,
	BALA_GENIE_TOKEN_TYPE_PRINT,
	BALA_GENIE_TOKEN_TYPE_PRIVATE,
	BALA_GENIE_TOKEN_TYPE_PROP,
	BALA_GENIE_TOKEN_TYPE_PROTECTED,
	BALA_GENIE_TOKEN_TYPE_PUBLIC,
	BALA_GENIE_TOKEN_TYPE_RAISE,
	BALA_GENIE_TOKEN_TYPE_RAISES,
	BALA_GENIE_TOKEN_TYPE_READONLY,
	BALA_GENIE_TOKEN_TYPE_REAL_LITERAL,
	BALA_GENIE_TOKEN_TYPE_REF,
	BALA_GENIE_TOKEN_TYPE_REGEX_LITERAL,
	BALA_GENIE_TOKEN_TYPE_REQUIRES,
	BALA_GENIE_TOKEN_TYPE_RETURN,
	BALA_GENIE_TOKEN_TYPE_SEALED,
	BALA_GENIE_TOKEN_TYPE_SELF,
	BALA_GENIE_TOKEN_TYPE_SEMICOLON,
	BALA_GENIE_TOKEN_TYPE_SET,
	BALA_GENIE_TOKEN_TYPE_SIZEOF,
	BALA_GENIE_TOKEN_TYPE_STAR,
	BALA_GENIE_TOKEN_TYPE_STATIC,
	BALA_GENIE_TOKEN_TYPE_STRING_LITERAL,
	BALA_GENIE_TOKEN_TYPE_STRUCT,
	BALA_GENIE_TOKEN_TYPE_SUPER,
	BALA_GENIE_TOKEN_TYPE_TEMPLATE_STRING_LITERAL,
	BALA_GENIE_TOKEN_TYPE_TILDE,
	BALA_GENIE_TOKEN_TYPE_TO,
	BALA_GENIE_TOKEN_TYPE_TRUE,
	BALA_GENIE_TOKEN_TYPE_TRY,
	BALA_GENIE_TOKEN_TYPE_TYPEOF,
	BALA_GENIE_TOKEN_TYPE_UNOWNED,
	BALA_GENIE_TOKEN_TYPE_USES,
	BALA_GENIE_TOKEN_TYPE_VAR,
	BALA_GENIE_TOKEN_TYPE_VERBATIM_STRING_LITERAL,
	BALA_GENIE_TOKEN_TYPE_VIRTUAL,
	BALA_GENIE_TOKEN_TYPE_VOID,
	BALA_GENIE_TOKEN_TYPE_VOLATILE,
	BALA_GENIE_TOKEN_TYPE_WEAK,
	BALA_GENIE_TOKEN_TYPE_WHEN,
	BALA_GENIE_TOKEN_TYPE_WHILE,
	BALA_GENIE_TOKEN_TYPE_YIELD
} BalaGenieTokenType;

#define BALA_GENIE_TYPE_TOKEN_TYPE (bala_genie_token_type_get_type ())
typedef struct _BalaIfStatementPrivate BalaIfStatementPrivate;
typedef struct _BalaInitializerListPrivate BalaInitializerListPrivate;
typedef struct _BalaIntegerLiteralPrivate BalaIntegerLiteralPrivate;

#define BALA_TYPE_INTEGER_TYPE (bala_integer_type_get_type ())
#define BALA_INTEGER_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_INTEGER_TYPE, BalaIntegerType))
#define BALA_INTEGER_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_INTEGER_TYPE, BalaIntegerTypeClass))
#define BALA_IS_INTEGER_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_INTEGER_TYPE))
#define BALA_IS_INTEGER_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_INTEGER_TYPE))
#define BALA_INTEGER_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_INTEGER_TYPE, BalaIntegerTypeClass))

typedef struct _BalaIntegerType BalaIntegerType;
typedef struct _BalaIntegerTypeClass BalaIntegerTypeClass;
typedef struct _BalaIntegerTypePrivate BalaIntegerTypePrivate;
typedef struct _BalaInterfacePrivate BalaInterfacePrivate;

#define BALA_TYPE_INTERFACE_TYPE (bala_interface_type_get_type ())
#define BALA_INTERFACE_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_INTERFACE_TYPE, BalaInterfaceType))
#define BALA_INTERFACE_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_INTERFACE_TYPE, BalaInterfaceTypeClass))
#define BALA_IS_INTERFACE_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_INTERFACE_TYPE))
#define BALA_IS_INTERFACE_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_INTERFACE_TYPE))
#define BALA_INTERFACE_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_INTERFACE_TYPE, BalaInterfaceTypeClass))

typedef struct _BalaInterfaceType BalaInterfaceType;
typedef struct _BalaInterfaceTypeClass BalaInterfaceTypeClass;
typedef struct _BalaInterfaceTypePrivate BalaInterfaceTypePrivate;

#define BALA_TYPE_INVALID_TYPE (bala_invalid_type_get_type ())
#define BALA_INVALID_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_INVALID_TYPE, BalaInvalidType))
#define BALA_INVALID_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_INVALID_TYPE, BalaInvalidTypeClass))
#define BALA_IS_INVALID_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_INVALID_TYPE))
#define BALA_IS_INVALID_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_INVALID_TYPE))
#define BALA_INVALID_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_INVALID_TYPE, BalaInvalidTypeClass))

typedef struct _BalaInvalidType BalaInvalidType;
typedef struct _BalaInvalidTypeClass BalaInvalidTypeClass;
typedef struct _BalaInvalidTypePrivate BalaInvalidTypePrivate;
typedef struct _BalaLambdaExpressionPrivate BalaLambdaExpressionPrivate;
typedef struct _BalaLocalVariablePrivate BalaLocalVariablePrivate;
typedef struct _BalaLockStatementPrivate BalaLockStatementPrivate;
typedef struct _BalaLoopPrivate BalaLoopPrivate;

#define BALA_TYPE_MARKUP_READER (bala_markup_reader_get_type ())
#define BALA_MARKUP_READER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_MARKUP_READER, BalaMarkupReader))
#define BALA_MARKUP_READER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_MARKUP_READER, BalaMarkupReaderClass))
#define BALA_IS_MARKUP_READER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_MARKUP_READER))
#define BALA_IS_MARKUP_READER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_MARKUP_READER))
#define BALA_MARKUP_READER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_MARKUP_READER, BalaMarkupReaderClass))

typedef struct _BalaMarkupReader BalaMarkupReader;
typedef struct _BalaMarkupReaderClass BalaMarkupReaderClass;
typedef struct _BalaMarkupReaderPrivate BalaMarkupReaderPrivate;
typedef enum  {
	BALA_MARKUP_TOKEN_TYPE_NONE,
	BALA_MARKUP_TOKEN_TYPE_START_ELEMENT,
	BALA_MARKUP_TOKEN_TYPE_END_ELEMENT,
	BALA_MARKUP_TOKEN_TYPE_TEXT,
	BALA_MARKUP_TOKEN_TYPE_EOF
} BalaMarkupTokenType;

#define BALA_TYPE_MARKUP_TOKEN_TYPE (bala_markup_token_type_get_type ())
typedef struct _BalaMemberAccessPrivate BalaMemberAccessPrivate;

#define BALA_TYPE_MEMBER_INITIALIZER (bala_member_initializer_get_type ())
#define BALA_MEMBER_INITIALIZER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_MEMBER_INITIALIZER, BalaMemberInitializer))
#define BALA_MEMBER_INITIALIZER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_MEMBER_INITIALIZER, BalaMemberInitializerClass))
#define BALA_IS_MEMBER_INITIALIZER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_MEMBER_INITIALIZER))
#define BALA_IS_MEMBER_INITIALIZER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_MEMBER_INITIALIZER))
#define BALA_MEMBER_INITIALIZER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_MEMBER_INITIALIZER, BalaMemberInitializerClass))

typedef struct _BalaMemberInitializer BalaMemberInitializer;
typedef struct _BalaMemberInitializerClass BalaMemberInitializerClass;
typedef struct _BalaMemberInitializerPrivate BalaMemberInitializerPrivate;
typedef struct _BalaMethodCallPrivate BalaMethodCallPrivate;

#define BALA_TYPE_METHOD_TYPE (bala_method_type_get_type ())
#define BALA_METHOD_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_METHOD_TYPE, BalaMethodType))
#define BALA_METHOD_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_METHOD_TYPE, BalaMethodTypeClass))
#define BALA_IS_METHOD_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_METHOD_TYPE))
#define BALA_IS_METHOD_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_METHOD_TYPE))
#define BALA_METHOD_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_METHOD_TYPE, BalaMethodTypeClass))

typedef struct _BalaMethodType BalaMethodType;
typedef struct _BalaMethodTypeClass BalaMethodTypeClass;
typedef struct _BalaMethodTypePrivate BalaMethodTypePrivate;
typedef struct _BalaNamedArgumentPrivate BalaNamedArgumentPrivate;
typedef struct _BalaNamespacePrivate BalaNamespacePrivate;
typedef struct _BalaNullLiteralPrivate BalaNullLiteralPrivate;

#define BALA_TYPE_NULL_TYPE (bala_null_type_get_type ())
#define BALA_NULL_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_NULL_TYPE, BalaNullType))
#define BALA_NULL_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_NULL_TYPE, BalaNullTypeClass))
#define BALA_IS_NULL_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_NULL_TYPE))
#define BALA_IS_NULL_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_NULL_TYPE))
#define BALA_NULL_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_NULL_TYPE, BalaNullTypeClass))

typedef struct _BalaNullType BalaNullType;
typedef struct _BalaNullTypeClass BalaNullTypeClass;
typedef struct _BalaNullTypePrivate BalaNullTypePrivate;
typedef struct _BalaObjectCreationExpressionPrivate BalaObjectCreationExpressionPrivate;

#define BALA_TYPE_OBJECT_TYPE (bala_object_type_get_type ())
#define BALA_OBJECT_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_OBJECT_TYPE, BalaObjectType))
#define BALA_OBJECT_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_OBJECT_TYPE, BalaObjectTypeClass))
#define BALA_IS_OBJECT_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_OBJECT_TYPE))
#define BALA_IS_OBJECT_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_OBJECT_TYPE))
#define BALA_OBJECT_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_OBJECT_TYPE, BalaObjectTypeClass))

typedef struct _BalaObjectType BalaObjectType;
typedef struct _BalaObjectTypeClass BalaObjectTypeClass;
typedef struct _BalaObjectTypePrivate BalaObjectTypePrivate;
typedef struct _BalaParameterPrivate BalaParameterPrivate;
typedef enum  {
	BALA_PARAMETER_DIRECTION_IN,
	BALA_PARAMETER_DIRECTION_OUT,
	BALA_PARAMETER_DIRECTION_REF
} BalaParameterDirection;

#define BALA_TYPE_PARAMETER_DIRECTION (bala_parameter_direction_get_type ())

#define BALA_TYPE_PARSER (bala_parser_get_type ())
#define BALA_PARSER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_PARSER, BalaParser))
#define BALA_PARSER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_PARSER, BalaParserClass))
#define BALA_IS_PARSER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_PARSER))
#define BALA_IS_PARSER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_PARSER))
#define BALA_PARSER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_PARSER, BalaParserClass))

typedef struct _BalaParser BalaParser;
typedef struct _BalaParserClass BalaParserClass;
typedef struct _BalaParserPrivate BalaParserPrivate;
typedef struct _BalaPhiFunctionPrivate BalaPhiFunctionPrivate;
typedef struct _BalaPointerIndirectionPrivate BalaPointerIndirectionPrivate;

#define BALA_TYPE_POINTER_TYPE (bala_pointer_type_get_type ())
#define BALA_POINTER_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_POINTER_TYPE, BalaPointerType))
#define BALA_POINTER_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_POINTER_TYPE, BalaPointerTypeClass))
#define BALA_IS_POINTER_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_POINTER_TYPE))
#define BALA_IS_POINTER_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_POINTER_TYPE))
#define BALA_POINTER_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_POINTER_TYPE, BalaPointerTypeClass))

typedef struct _BalaPointerType BalaPointerType;
typedef struct _BalaPointerTypeClass BalaPointerTypeClass;
typedef struct _BalaPointerTypePrivate BalaPointerTypePrivate;
typedef struct _BalaPostfixExpressionPrivate BalaPostfixExpressionPrivate;
typedef struct _BalaPropertyAccessorPrivate BalaPropertyAccessorPrivate;

#define BALA_TYPE_PROPERTY_PROTOTYPE (bala_property_prototype_get_type ())
#define BALA_PROPERTY_PROTOTYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_PROPERTY_PROTOTYPE, BalaPropertyPrototype))
#define BALA_PROPERTY_PROTOTYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_PROPERTY_PROTOTYPE, BalaPropertyPrototypeClass))
#define BALA_IS_PROPERTY_PROTOTYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_PROPERTY_PROTOTYPE))
#define BALA_IS_PROPERTY_PROTOTYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_PROPERTY_PROTOTYPE))
#define BALA_PROPERTY_PROTOTYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_PROPERTY_PROTOTYPE, BalaPropertyPrototypeClass))

typedef struct _BalaPropertyPrototype BalaPropertyPrototype;
typedef struct _BalaPropertyPrototypeClass BalaPropertyPrototypeClass;
typedef struct _BalaPropertyPrototypePrivate BalaPropertyPrototypePrivate;
typedef struct _BalaRealLiteralPrivate BalaRealLiteralPrivate;
typedef struct _BalaReferenceTransferExpressionPrivate BalaReferenceTransferExpressionPrivate;
typedef struct _BalaRegexLiteralPrivate BalaRegexLiteralPrivate;
typedef struct _BalaReportPrivate BalaReportPrivate;
typedef enum  {
	BALA_REPORT_COLORED_AUTO,
	BALA_REPORT_COLORED_NEVER,
	BALA_REPORT_COLORED_ALWAYS
} BalaReportColored;

#define BALA_REPORT_TYPE_COLORED (bala_report_colored_get_type ())
typedef struct _BalaReturnStatementPrivate BalaReturnStatementPrivate;

#define BALA_TYPE_SCANNER (bala_scanner_get_type ())
#define BALA_SCANNER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_SCANNER, BalaScanner))
#define BALA_SCANNER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_SCANNER, BalaScannerClass))
#define BALA_IS_SCANNER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_SCANNER))
#define BALA_IS_SCANNER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_SCANNER))
#define BALA_SCANNER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_SCANNER, BalaScannerClass))

typedef struct _BalaScanner BalaScanner;
typedef struct _BalaScannerClass BalaScannerClass;
typedef struct _BalaScannerPrivate BalaScannerPrivate;
typedef enum  {
	BALA_TOKEN_TYPE_NONE,
	BALA_TOKEN_TYPE_ABSTRACT,
	BALA_TOKEN_TYPE_AS,
	BALA_TOKEN_TYPE_ASSIGN,
	BALA_TOKEN_TYPE_ASSIGN_ADD,
	BALA_TOKEN_TYPE_ASSIGN_BITWISE_AND,
	BALA_TOKEN_TYPE_ASSIGN_BITWISE_OR,
	BALA_TOKEN_TYPE_ASSIGN_BITWISE_XOR,
	BALA_TOKEN_TYPE_ASSIGN_DIV,
	BALA_TOKEN_TYPE_ASSIGN_MUL,
	BALA_TOKEN_TYPE_ASSIGN_PERCENT,
	BALA_TOKEN_TYPE_ASSIGN_SHIFT_LEFT,
	BALA_TOKEN_TYPE_ASSIGN_SUB,
	BALA_TOKEN_TYPE_ASYNC,
	BALA_TOKEN_TYPE_BASE,
	BALA_TOKEN_TYPE_BITWISE_AND,
	BALA_TOKEN_TYPE_BITWISE_OR,
	BALA_TOKEN_TYPE_BREAK,
	BALA_TOKEN_TYPE_CARRET,
	BALA_TOKEN_TYPE_CASE,
	BALA_TOKEN_TYPE_CATCH,
	BALA_TOKEN_TYPE_CHARACTER_LITERAL,
	BALA_TOKEN_TYPE_CLASS,
	BALA_TOKEN_TYPE_CLOSE_BRACE,
	BALA_TOKEN_TYPE_CLOSE_BRACKET,
	BALA_TOKEN_TYPE_CLOSE_PARENS,
	BALA_TOKEN_TYPE_CLOSE_REGEX_LITERAL,
	BALA_TOKEN_TYPE_CLOSE_TEMPLATE,
	BALA_TOKEN_TYPE_COLON,
	BALA_TOKEN_TYPE_COMMA,
	BALA_TOKEN_TYPE_CONST,
	BALA_TOKEN_TYPE_CONSTRUCT,
	BALA_TOKEN_TYPE_CONTINUE,
	BALA_TOKEN_TYPE_DEFAULT,
	BALA_TOKEN_TYPE_DELEGATE,
	BALA_TOKEN_TYPE_DELETE,
	BALA_TOKEN_TYPE_DIV,
	BALA_TOKEN_TYPE_DO,
	BALA_TOKEN_TYPE_DOUBLE_COLON,
	BALA_TOKEN_TYPE_DOT,
	BALA_TOKEN_TYPE_DYNAMIC,
	BALA_TOKEN_TYPE_ELLIPSIS,
	BALA_TOKEN_TYPE_ELSE,
	BALA_TOKEN_TYPE_ENUM,
	BALA_TOKEN_TYPE_ENSURES,
	BALA_TOKEN_TYPE_ERRORDOMAIN,
	BALA_TOKEN_TYPE_EOF,
	BALA_TOKEN_TYPE_EXTERN,
	BALA_TOKEN_TYPE_FALSE,
	BALA_TOKEN_TYPE_FINALLY,
	BALA_TOKEN_TYPE_FOR,
	BALA_TOKEN_TYPE_FOREACH,
	BALA_TOKEN_TYPE_GET,
	BALA_TOKEN_TYPE_HASH,
	BALA_TOKEN_TYPE_IDENTIFIER,
	BALA_TOKEN_TYPE_IF,
	BALA_TOKEN_TYPE_IN,
	BALA_TOKEN_TYPE_INLINE,
	BALA_TOKEN_TYPE_INTEGER_LITERAL,
	BALA_TOKEN_TYPE_INTERFACE,
	BALA_TOKEN_TYPE_INTERNAL,
	BALA_TOKEN_TYPE_INTERR,
	BALA_TOKEN_TYPE_IS,
	BALA_TOKEN_TYPE_LAMBDA,
	BALA_TOKEN_TYPE_LOCK,
	BALA_TOKEN_TYPE_MINUS,
	BALA_TOKEN_TYPE_NAMESPACE,
	BALA_TOKEN_TYPE_NEW,
	BALA_TOKEN_TYPE_NULL,
	BALA_TOKEN_TYPE_OUT,
	BALA_TOKEN_TYPE_OP_AND,
	BALA_TOKEN_TYPE_OP_COALESCING,
	BALA_TOKEN_TYPE_OP_DEC,
	BALA_TOKEN_TYPE_OP_EQ,
	BALA_TOKEN_TYPE_OP_GE,
	BALA_TOKEN_TYPE_OP_GT,
	BALA_TOKEN_TYPE_OP_INC,
	BALA_TOKEN_TYPE_OP_LE,
	BALA_TOKEN_TYPE_OP_LT,
	BALA_TOKEN_TYPE_OP_NE,
	BALA_TOKEN_TYPE_OP_NEG,
	BALA_TOKEN_TYPE_OP_OR,
	BALA_TOKEN_TYPE_OP_PTR,
	BALA_TOKEN_TYPE_OP_SHIFT_LEFT,
	BALA_TOKEN_TYPE_OPEN_BRACE,
	BALA_TOKEN_TYPE_OPEN_BRACKET,
	BALA_TOKEN_TYPE_OPEN_PARENS,
	BALA_TOKEN_TYPE_OPEN_REGEX_LITERAL,
	BALA_TOKEN_TYPE_OPEN_TEMPLATE,
	BALA_TOKEN_TYPE_OVERRIDE,
	BALA_TOKEN_TYPE_OWNED,
	BALA_TOKEN_TYPE_PARAMS,
	BALA_TOKEN_TYPE_PERCENT,
	BALA_TOKEN_TYPE_PLUS,
	BALA_TOKEN_TYPE_PRIVATE,
	BALA_TOKEN_TYPE_PROTECTED,
	BALA_TOKEN_TYPE_PUBLIC,
	BALA_TOKEN_TYPE_REAL_LITERAL,
	BALA_TOKEN_TYPE_REF,
	BALA_TOKEN_TYPE_REGEX_LITERAL,
	BALA_TOKEN_TYPE_REQUIRES,
	BALA_TOKEN_TYPE_RETURN,
	BALA_TOKEN_TYPE_SEALED,
	BALA_TOKEN_TYPE_SEMICOLON,
	BALA_TOKEN_TYPE_SET,
	BALA_TOKEN_TYPE_SIGNAL,
	BALA_TOKEN_TYPE_SIZEOF,
	BALA_TOKEN_TYPE_STAR,
	BALA_TOKEN_TYPE_STATIC,
	BALA_TOKEN_TYPE_STRING_LITERAL,
	BALA_TOKEN_TYPE_STRUCT,
	BALA_TOKEN_TYPE_SWITCH,
	BALA_TOKEN_TYPE_TEMPLATE_STRING_LITERAL,
	BALA_TOKEN_TYPE_THIS,
	BALA_TOKEN_TYPE_THROW,
	BALA_TOKEN_TYPE_THROWS,
	BALA_TOKEN_TYPE_TILDE,
	BALA_TOKEN_TYPE_TRUE,
	BALA_TOKEN_TYPE_TRY,
	BALA_TOKEN_TYPE_TYPEOF,
	BALA_TOKEN_TYPE_UNLOCK,
	BALA_TOKEN_TYPE_UNOWNED,
	BALA_TOKEN_TYPE_USING,
	BALA_TOKEN_TYPE_VAR,
	BALA_TOKEN_TYPE_VERBATIM_STRING_LITERAL,
	BALA_TOKEN_TYPE_VIRTUAL,
	BALA_TOKEN_TYPE_VOID,
	BALA_TOKEN_TYPE_VOLATILE,
	BALA_TOKEN_TYPE_WEAK,
	BALA_TOKEN_TYPE_WHILE,
	BALA_TOKEN_TYPE_YIELD
} BalaTokenType;

#define BALA_TYPE_TOKEN_TYPE (bala_token_type_get_type ())
typedef struct _BalaScopePrivate BalaScopePrivate;
typedef struct _BalaSemanticAnalyzerPrivate BalaSemanticAnalyzerPrivate;

#define BALA_TYPE_STRUCT_VALUE_TYPE (bala_struct_value_type_get_type ())
#define BALA_STRUCT_VALUE_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_STRUCT_VALUE_TYPE, BalaStructValueType))
#define BALA_STRUCT_VALUE_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_STRUCT_VALUE_TYPE, BalaStructValueTypeClass))
#define BALA_IS_STRUCT_VALUE_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_STRUCT_VALUE_TYPE))
#define BALA_IS_STRUCT_VALUE_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_STRUCT_VALUE_TYPE))
#define BALA_STRUCT_VALUE_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_STRUCT_VALUE_TYPE, BalaStructValueTypeClass))

typedef struct _BalaStructValueType BalaStructValueType;
typedef struct _BalaStructValueTypeClass BalaStructValueTypeClass;

#define BALA_TYPE_SIGNAL_TYPE (bala_signal_type_get_type ())
#define BALA_SIGNAL_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_SIGNAL_TYPE, BalaSignalType))
#define BALA_SIGNAL_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_SIGNAL_TYPE, BalaSignalTypeClass))
#define BALA_IS_SIGNAL_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_SIGNAL_TYPE))
#define BALA_IS_SIGNAL_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_SIGNAL_TYPE))
#define BALA_SIGNAL_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_SIGNAL_TYPE, BalaSignalTypeClass))

typedef struct _BalaSignalType BalaSignalType;
typedef struct _BalaSignalTypeClass BalaSignalTypeClass;
typedef struct _BalaSignalTypePrivate BalaSignalTypePrivate;
typedef struct _BalaSizeofExpressionPrivate BalaSizeofExpressionPrivate;
typedef struct _BalaSliceExpressionPrivate BalaSliceExpressionPrivate;
typedef struct _BalaSourceFilePrivate BalaSourceFilePrivate;
typedef enum  {
	BALA_SOURCE_FILE_TYPE_NONE,
	BALA_SOURCE_FILE_TYPE_SOURCE,
	BALA_SOURCE_FILE_TYPE_PACKAGE,
	BALA_SOURCE_FILE_TYPE_FAST
} BalaSourceFileType;

#define BALA_TYPE_SOURCE_FILE_TYPE (bala_source_file_type_get_type ())
typedef struct _BalaSourceReferencePrivate BalaSourceReferencePrivate;

#define BALA_TYPE_STATEMENT_LIST (bala_statement_list_get_type ())
#define BALA_STATEMENT_LIST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_STATEMENT_LIST, BalaStatementList))
#define BALA_STATEMENT_LIST_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_STATEMENT_LIST, BalaStatementListClass))
#define BALA_IS_STATEMENT_LIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_STATEMENT_LIST))
#define BALA_IS_STATEMENT_LIST_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_STATEMENT_LIST))
#define BALA_STATEMENT_LIST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_STATEMENT_LIST, BalaStatementListClass))

typedef struct _BalaStatementList BalaStatementList;
typedef struct _BalaStatementListClass BalaStatementListClass;
typedef struct _BalaStatementListPrivate BalaStatementListPrivate;
typedef struct _BalaStringLiteralPrivate BalaStringLiteralPrivate;
typedef struct _BalaStructPrivate BalaStructPrivate;
typedef struct _BalaStructValueTypePrivate BalaStructValueTypePrivate;
typedef struct _BalaSwitchLabelPrivate BalaSwitchLabelPrivate;
typedef struct _BalaSwitchSectionPrivate BalaSwitchSectionPrivate;
typedef struct _BalaSwitchStatementPrivate BalaSwitchStatementPrivate;
typedef enum  {
	BALA_SYMBOL_ACCESSIBILITY_PRIVATE,
	BALA_SYMBOL_ACCESSIBILITY_INTERNAL,
	BALA_SYMBOL_ACCESSIBILITY_PROTECTED,
	BALA_SYMBOL_ACCESSIBILITY_PUBLIC
} BalaSymbolAccessibility;

#define BALA_TYPE_SYMBOL_ACCESSIBILITY (bala_symbol_accessibility_get_type ())

#define BALA_TYPE_VERSION_ATTRIBUTE (bala_version_attribute_get_type ())
#define BALA_VERSION_ATTRIBUTE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_VERSION_ATTRIBUTE, BalaVersionAttribute))
#define BALA_VERSION_ATTRIBUTE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_VERSION_ATTRIBUTE, BalaVersionAttributeClass))
#define BALA_IS_VERSION_ATTRIBUTE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_VERSION_ATTRIBUTE))
#define BALA_IS_VERSION_ATTRIBUTE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_VERSION_ATTRIBUTE))
#define BALA_VERSION_ATTRIBUTE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_VERSION_ATTRIBUTE, BalaVersionAttributeClass))

typedef struct _BalaVersionAttribute BalaVersionAttribute;
typedef struct _BalaVersionAttributeClass BalaVersionAttributeClass;
typedef struct _BalaSymbolResolverPrivate BalaSymbolResolverPrivate;
typedef struct _BalaTargetValuePrivate BalaTargetValuePrivate;
typedef struct _BalaTemplatePrivate BalaTemplatePrivate;
typedef struct _BalaThrowStatementPrivate BalaThrowStatementPrivate;

#define BALA_TYPE_TRAVERSE_VISITOR (bala_traverse_visitor_get_type ())
#define BALA_TRAVERSE_VISITOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_TRAVERSE_VISITOR, BalaTraverseVisitor))
#define BALA_TRAVERSE_VISITOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_TRAVERSE_VISITOR, BalaTraverseVisitorClass))
#define BALA_IS_TRAVERSE_VISITOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_TRAVERSE_VISITOR))
#define BALA_IS_TRAVERSE_VISITOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_TRAVERSE_VISITOR))
#define BALA_TRAVERSE_VISITOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_TRAVERSE_VISITOR, BalaTraverseVisitorClass))

typedef struct _BalaTraverseVisitor BalaTraverseVisitor;
typedef struct _BalaTraverseVisitorClass BalaTraverseVisitorClass;
typedef struct _BalaTraverseVisitorPrivate BalaTraverseVisitorPrivate;
typedef enum  {
	BALA_TRAVERSE_STATUS_STOP,
	BALA_TRAVERSE_STATUS_CONTINUE
} BalaTraverseStatus;

#define BALA_TYPE_TRAVERSE_STATUS (bala_traverse_status_get_type ())
typedef BalaTraverseStatus (*BalaTraverseFunc) (BalaCodeNode* node, gpointer user_data);
typedef struct _BalaTryStatementPrivate BalaTryStatementPrivate;
typedef struct _BalaTuplePrivate BalaTuplePrivate;
typedef struct _BalaTypeCheckPrivate BalaTypeCheckPrivate;
typedef struct _BalaTypeofExpressionPrivate BalaTypeofExpressionPrivate;
typedef struct _BalaTypeParameterPrivate BalaTypeParameterPrivate;
typedef struct _BalaUnaryExpressionPrivate BalaUnaryExpressionPrivate;
typedef enum  {
	BALA_UNARY_OPERATOR_NONE,
	BALA_UNARY_OPERATOR_PLUS,
	BALA_UNARY_OPERATOR_MINUS,
	BALA_UNARY_OPERATOR_LOGICAL_NEGATION,
	BALA_UNARY_OPERATOR_BITWISE_COMPLEMENT,
	BALA_UNARY_OPERATOR_INCREMENT,
	BALA_UNARY_OPERATOR_DECREMENT,
	BALA_UNARY_OPERATOR_REF,
	BALA_UNARY_OPERATOR_OUT
} BalaUnaryOperator;

#define BALA_TYPE_UNARY_OPERATOR (bala_unary_operator_get_type ())
typedef struct _BalaUnlockStatementPrivate BalaUnlockStatementPrivate;

#define BALA_TYPE_UNRESOLVED_SYMBOL (bala_unresolved_symbol_get_type ())
#define BALA_UNRESOLVED_SYMBOL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_UNRESOLVED_SYMBOL, BalaUnresolvedSymbol))
#define BALA_UNRESOLVED_SYMBOL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_UNRESOLVED_SYMBOL, BalaUnresolvedSymbolClass))
#define BALA_IS_UNRESOLVED_SYMBOL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_UNRESOLVED_SYMBOL))
#define BALA_IS_UNRESOLVED_SYMBOL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_UNRESOLVED_SYMBOL))
#define BALA_UNRESOLVED_SYMBOL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_UNRESOLVED_SYMBOL, BalaUnresolvedSymbolClass))

typedef struct _BalaUnresolvedSymbol BalaUnresolvedSymbol;
typedef struct _BalaUnresolvedSymbolClass BalaUnresolvedSymbolClass;
typedef struct _BalaUnresolvedSymbolPrivate BalaUnresolvedSymbolPrivate;

#define BALA_TYPE_UNRESOLVED_TYPE (bala_unresolved_type_get_type ())
#define BALA_UNRESOLVED_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_UNRESOLVED_TYPE, BalaUnresolvedType))
#define BALA_UNRESOLVED_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_UNRESOLVED_TYPE, BalaUnresolvedTypeClass))
#define BALA_IS_UNRESOLVED_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_UNRESOLVED_TYPE))
#define BALA_IS_UNRESOLVED_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_UNRESOLVED_TYPE))
#define BALA_UNRESOLVED_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_UNRESOLVED_TYPE, BalaUnresolvedTypeClass))

typedef struct _BalaUnresolvedType BalaUnresolvedType;
typedef struct _BalaUnresolvedTypeClass BalaUnresolvedTypeClass;
typedef struct _BalaUnresolvedTypePrivate BalaUnresolvedTypePrivate;
typedef struct _BalaUsedAttrPrivate BalaUsedAttrPrivate;
typedef struct _BalaUsingDirectivePrivate BalaUsingDirectivePrivate;

#define BALA_TYPE_VAR_TYPE (bala_var_type_get_type ())
#define BALA_VAR_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_VAR_TYPE, BalaVarType))
#define BALA_VAR_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_VAR_TYPE, BalaVarTypeClass))
#define BALA_IS_VAR_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_VAR_TYPE))
#define BALA_IS_VAR_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_VAR_TYPE))
#define BALA_VAR_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_VAR_TYPE, BalaVarTypeClass))

typedef struct _BalaVarType BalaVarType;
typedef struct _BalaVarTypeClass BalaVarTypeClass;
typedef struct _BalaVarTypePrivate BalaVarTypePrivate;
typedef struct _BalaVersionAttributePrivate BalaVersionAttributePrivate;

#define BALA_TYPE_VOID_TYPE (bala_void_type_get_type ())
#define BALA_VOID_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_VOID_TYPE, BalaVoidType))
#define BALA_VOID_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_VOID_TYPE, BalaVoidTypeClass))
#define BALA_IS_VOID_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_VOID_TYPE))
#define BALA_IS_VOID_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_VOID_TYPE))
#define BALA_VOID_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_VOID_TYPE, BalaVoidTypeClass))

typedef struct _BalaVoidType BalaVoidType;
typedef struct _BalaVoidTypeClass BalaVoidTypeClass;
typedef struct _BalaVoidTypePrivate BalaVoidTypePrivate;
typedef struct _BalaWhileStatementPrivate BalaWhileStatementPrivate;
typedef struct _BalaYieldStatementPrivate BalaYieldStatementPrivate;

struct _BalaCodeNode {
	GTypeInstance parent_instance;
	volatile int ref_count;
	GList* attributes;
	BalaCodeNodePrivate * priv;
};

struct _BalaCodeNodeClass {
	GTypeClass parent_class;
	void (*finalize) (BalaCodeNode *self);
	void (*accept) (BalaCodeNode* self, BalaCodeVisitor* visitor);
	void (*accept_children) (BalaCodeNode* self, BalaCodeVisitor* visitor);
	gboolean (*check) (BalaCodeNode* self, BalaCodeContext* context);
	void (*emit) (BalaCodeNode* self, BalaCodeGenerator* codegen);
	void (*replace_type) (BalaCodeNode* self, BalaDataType* old_type, BalaDataType* new_type);
	void (*replace_expression) (BalaCodeNode* self, BalaExpression* old_node, BalaExpression* new_node);
	gchar* (*to_string) (BalaCodeNode* self);
	void (*get_defined_variables) (BalaCodeNode* self, BalaCollection* collection);
	void (*get_used_variables) (BalaCodeNode* self, BalaCollection* collection);
	void (*get_error_types) (BalaCodeNode* self, BalaCollection* collection, BalaSourceReference* source_reference);
};

struct _BalaExpression {
	BalaCodeNode parent_instance;
	BalaExpressionPrivate * priv;
};

struct _BalaExpressionClass {
	BalaCodeNodeClass parent_class;
	gboolean (*is_constant) (BalaExpression* self);
	gboolean (*is_pure) (BalaExpression* self);
	gboolean (*is_non_null) (BalaExpression* self);
	gboolean (*is_accessible) (BalaExpression* self, BalaSymbol* sym);
};

struct _BalaAddressofExpression {
	BalaExpression parent_instance;
	BalaAddressofExpressionPrivate * priv;
};

struct _BalaAddressofExpressionClass {
	BalaExpressionClass parent_class;
};

struct _BalaSymbol {
	BalaCodeNode parent_instance;
	BalaSymbolPrivate * priv;
};

struct _BalaSymbolClass {
	BalaCodeNodeClass parent_class;
	gboolean (*is_instance_member) (BalaSymbol* self);
	gboolean (*is_class_member) (BalaSymbol* self);
	void (*add_namespace) (BalaSymbol* self, BalaNamespace* ns);
	void (*add_class) (BalaSymbol* self, BalaClass* cl);
	void (*add_interface) (BalaSymbol* self, BalaInterface* iface);
	void (*add_struct) (BalaSymbol* self, BalaStruct* st);
	void (*add_enum) (BalaSymbol* self, BalaEnum* en);
	void (*add_error_domain) (BalaSymbol* self, BalaErrorDomain* edomain);
	void (*add_delegate) (BalaSymbol* self, BalaDelegate* d);
	void (*add_constant) (BalaSymbol* self, BalaConstant* constant);
	void (*add_field) (BalaSymbol* self, BalaField* f);
	void (*add_method) (BalaSymbol* self, BalaMethod* m);
	void (*add_property) (BalaSymbol* self, BalaProperty* prop);
	void (*add_signal) (BalaSymbol* self, BalaSignal* sig);
	void (*add_constructor) (BalaSymbol* self, BalaConstructor* c);
	void (*add_destructor) (BalaSymbol* self, BalaDestructor* d);
};

struct _BalaSubroutine {
	BalaSymbol parent_instance;
	BalaSubroutinePrivate * priv;
};

struct _BalaSubroutineClass {
	BalaSymbolClass parent_class;
	gboolean (*get_has_result) (BalaSubroutine* self);
};

struct _BalaCallableIface {
	GTypeInterface parent_iface;
	BalaDataType* (*get_return_type) (BalaCallable* self);
	void (*set_return_type) (BalaCallable* self, BalaDataType* value);
	void (*add_parameter) (BalaCallable* self, BalaParameter* param);
	BalaList* (*get_parameters) (BalaCallable* self);
};

struct _BalaMethod {
	BalaSubroutine parent_instance;
	BalaList* error_types;
	BalaMethodPrivate * priv;
};

struct _BalaMethodClass {
	BalaSubroutineClass parent_class;
};

struct _BalaArrayCopyMethod {
	BalaMethod parent_instance;
	BalaArrayCopyMethodPrivate * priv;
};

struct _BalaArrayCopyMethodClass {
	BalaMethodClass parent_class;
};

struct _BalaArrayCreationExpression {
	BalaExpression parent_instance;
	BalaArrayCreationExpressionPrivate * priv;
};

struct _BalaArrayCreationExpressionClass {
	BalaExpressionClass parent_class;
};

struct _BalaVariable {
	BalaSymbol parent_instance;
	BalaVariablePrivate * priv;
};

struct _BalaVariableClass {
	BalaSymbolClass parent_class;
};

struct _BalaLockableIface {
	GTypeInterface parent_iface;
	gboolean (*get_lock_used) (BalaLockable* self);
	void (*set_lock_used) (BalaLockable* self, gboolean value);
};

struct _BalaField {
	BalaVariable parent_instance;
	BalaFieldPrivate * priv;
};

struct _BalaFieldClass {
	BalaVariableClass parent_class;
};

struct _BalaArrayLengthField {
	BalaField parent_instance;
	BalaArrayLengthFieldPrivate * priv;
};

struct _BalaArrayLengthFieldClass {
	BalaFieldClass parent_class;
};

struct _BalaArrayMoveMethod {
	BalaMethod parent_instance;
	BalaArrayMoveMethodPrivate * priv;
};

struct _BalaArrayMoveMethodClass {
	BalaMethodClass parent_class;
};

struct _BalaArrayResizeMethod {
	BalaMethod parent_instance;
	BalaArrayResizeMethodPrivate * priv;
};

struct _BalaArrayResizeMethodClass {
	BalaMethodClass parent_class;
};

struct _BalaDataType {
	BalaCodeNode parent_instance;
	BalaDataTypePrivate * priv;
};

struct _BalaDataTypeClass {
	BalaCodeNodeClass parent_class;
	gchar* (*to_qualified_string) (BalaDataType* self, BalaScope* scope);
	BalaDataType* (*copy) (BalaDataType* self);
	gboolean (*equals) (BalaDataType* self, BalaDataType* type2);
	gboolean (*stricter) (BalaDataType* self, BalaDataType* type2);
	gboolean (*compatible) (BalaDataType* self, BalaDataType* target_type);
	gboolean (*is_invokable) (BalaDataType* self);
	BalaDataType* (*get_return_type) (BalaDataType* self);
	BalaList* (*get_parameters) (BalaDataType* self);
	gboolean (*is_reference_type_or_type_parameter) (BalaDataType* self);
	gboolean (*is_accessible) (BalaDataType* self, BalaSymbol* sym);
	BalaSymbol* (*get_member) (BalaDataType* self, const gchar* member_name);
	BalaSymbol* (*get_pointer_member) (BalaDataType* self, const gchar* member_name);
	gboolean (*is_real_struct_type) (BalaDataType* self);
	gboolean (*is_disposable) (BalaDataType* self);
	BalaDataType* (*get_actual_type) (BalaDataType* self, BalaDataType* derived_instance_type, BalaList* method_type_arguments, BalaCodeNode* node_reference);
	BalaDataType* (*infer_type_argument) (BalaDataType* self, BalaTypeParameter* type_param, BalaDataType* value_type);
	gchar* (*to_prototype_string) (BalaDataType* self, const gchar* override_name);
};

struct _BalaReferenceType {
	BalaDataType parent_instance;
	BalaReferenceTypePrivate * priv;
};

struct _BalaReferenceTypeClass {
	BalaDataTypeClass parent_class;
};

struct _BalaArrayType {
	BalaReferenceType parent_instance;
	BalaArrayTypePrivate * priv;
};

struct _BalaArrayTypeClass {
	BalaReferenceTypeClass parent_class;
};

struct _BalaAssignment {
	BalaExpression parent_instance;
	BalaAssignmentPrivate * priv;
};

struct _BalaAssignmentClass {
	BalaExpressionClass parent_class;
};

struct _BalaAttribute {
	BalaCodeNode parent_instance;
	BalaAttributePrivate * priv;
};

struct _BalaAttributeClass {
	BalaCodeNodeClass parent_class;
};

struct _BalaBaseAccess {
	BalaExpression parent_instance;
	BalaBaseAccessPrivate * priv;
};

struct _BalaBaseAccessClass {
	BalaExpressionClass parent_class;
};

struct _BalaBasicBlock {
	GTypeInstance parent_instance;
	volatile int ref_count;
	BalaBasicBlockPrivate * priv;
};

struct _BalaBasicBlockClass {
	GTypeClass parent_class;
	void (*finalize) (BalaBasicBlock *self);
};

struct _BalaBinaryExpression {
	BalaExpression parent_instance;
	BalaBinaryExpressionPrivate * priv;
};

struct _BalaBinaryExpressionClass {
	BalaExpressionClass parent_class;
};

struct _BalaStatementIface {
	GTypeInterface parent_iface;
};

struct _BalaBlock {
	BalaSymbol parent_instance;
	BalaBlockPrivate * priv;
};

struct _BalaBlockClass {
	BalaSymbolClass parent_class;
};

struct _BalaLiteral {
	BalaExpression parent_instance;
	BalaLiteralPrivate * priv;
};

struct _BalaLiteralClass {
	BalaExpressionClass parent_class;
};

struct _BalaBooleanLiteral {
	BalaLiteral parent_instance;
	BalaBooleanLiteralPrivate * priv;
};

struct _BalaBooleanLiteralClass {
	BalaLiteralClass parent_class;
};

struct _BalaValueType {
	BalaDataType parent_instance;
	BalaValueTypePrivate * priv;
};

struct _BalaValueTypeClass {
	BalaDataTypeClass parent_class;
};

struct _BalaBooleanType {
	BalaValueType parent_instance;
	BalaBooleanTypePrivate * priv;
};

struct _BalaBooleanTypeClass {
	BalaValueTypeClass parent_class;
};

struct _BalaBreakStatement {
	BalaCodeNode parent_instance;
	BalaBreakStatementPrivate * priv;
};

struct _BalaBreakStatementClass {
	BalaCodeNodeClass parent_class;
};

struct _BalaCallableType {
	BalaDataType parent_instance;
	BalaCallableTypePrivate * priv;
};

struct _BalaCallableTypeClass {
	BalaDataTypeClass parent_class;
};

struct _BalaCastExpression {
	BalaExpression parent_instance;
	BalaCastExpressionPrivate * priv;
};

struct _BalaCastExpressionClass {
	BalaExpressionClass parent_class;
};

struct _BalaCatchClause {
	BalaCodeNode parent_instance;
	BalaCatchClausePrivate * priv;
};

struct _BalaCatchClauseClass {
	BalaCodeNodeClass parent_class;
};

struct _BalaCharacterLiteral {
	BalaLiteral parent_instance;
	BalaCharacterLiteralPrivate * priv;
};

struct _BalaCharacterLiteralClass {
	BalaLiteralClass parent_class;
};

struct _BalaTypeSymbol {
	BalaSymbol parent_instance;
	BalaTypeSymbolPrivate * priv;
};

struct _BalaTypeSymbolClass {
	BalaSymbolClass parent_class;
	gboolean (*is_reference_type) (BalaTypeSymbol* self);
	gboolean (*is_subtype_of) (BalaTypeSymbol* self, BalaTypeSymbol* t);
	gint (*get_type_parameter_index) (BalaTypeSymbol* self, const gchar* name);
};

struct _BalaObjectTypeSymbol {
	BalaTypeSymbol parent_instance;
	BalaObjectTypeSymbolPrivate * priv;
};

struct _BalaObjectTypeSymbolClass {
	BalaTypeSymbolClass parent_class;
};

struct _BalaClass {
	BalaObjectTypeSymbol parent_instance;
	BalaClassPrivate * priv;
};

struct _BalaClassClass {
	BalaObjectTypeSymbolClass parent_class;
};

struct _BalaClassType {
	BalaReferenceType parent_instance;
	BalaClassTypePrivate * priv;
};

struct _BalaClassTypeClass {
	BalaReferenceTypeClass parent_class;
};

struct _BalaCodeContext {
	GTypeInstance parent_instance;
	volatile int ref_count;
	BalaCodeContextPrivate * priv;
};

struct _BalaCodeContextClass {
	GTypeClass parent_class;
	void (*finalize) (BalaCodeContext *self);
};

struct _BalaCodeVisitor {
	GTypeInstance parent_instance;
	volatile int ref_count;
	BalaCodeVisitorPrivate * priv;
};

struct _BalaCodeVisitorClass {
	GTypeClass parent_class;
	void (*finalize) (BalaCodeVisitor *self);
	void (*visit_source_file) (BalaCodeVisitor* self, BalaSourceFile* source_file);
	void (*visit_namespace) (BalaCodeVisitor* self, BalaNamespace* ns);
	void (*visit_class) (BalaCodeVisitor* self, BalaClass* cl);
	void (*visit_struct) (BalaCodeVisitor* self, BalaStruct* st);
	void (*visit_interface) (BalaCodeVisitor* self, BalaInterface* iface);
	void (*visit_enum) (BalaCodeVisitor* self, BalaEnum* en);
	void (*visit_enum_value) (BalaCodeVisitor* self, BalaEnumValue* ev);
	void (*visit_error_domain) (BalaCodeVisitor* self, BalaErrorDomain* edomain);
	void (*visit_error_code) (BalaCodeVisitor* self, BalaErrorCode* ecode);
	void (*visit_delegate) (BalaCodeVisitor* self, BalaDelegate* d);
	void (*visit_constant) (BalaCodeVisitor* self, BalaConstant* c);
	void (*visit_field) (BalaCodeVisitor* self, BalaField* f);
	void (*visit_method) (BalaCodeVisitor* self, BalaMethod* m);
	void (*visit_creation_method) (BalaCodeVisitor* self, BalaCreationMethod* m);
	void (*visit_formal_parameter) (BalaCodeVisitor* self, BalaParameter* p);
	void (*visit_property) (BalaCodeVisitor* self, BalaProperty* prop);
	void (*visit_property_accessor) (BalaCodeVisitor* self, BalaPropertyAccessor* acc);
	void (*visit_signal) (BalaCodeVisitor* self, BalaSignal* sig);
	void (*visit_constructor) (BalaCodeVisitor* self, BalaConstructor* c);
	void (*visit_destructor) (BalaCodeVisitor* self, BalaDestructor* d);
	void (*visit_type_parameter) (BalaCodeVisitor* self, BalaTypeParameter* p);
	void (*visit_using_directive) (BalaCodeVisitor* self, BalaUsingDirective* ns);
	void (*visit_data_type) (BalaCodeVisitor* self, BalaDataType* type);
	void (*visit_block) (BalaCodeVisitor* self, BalaBlock* b);
	void (*visit_empty_statement) (BalaCodeVisitor* self, BalaEmptyStatement* stmt);
	void (*visit_declaration_statement) (BalaCodeVisitor* self, BalaDeclarationStatement* stmt);
	void (*visit_local_variable) (BalaCodeVisitor* self, BalaLocalVariable* local);
	void (*visit_initializer_list) (BalaCodeVisitor* self, BalaInitializerList* list);
	void (*visit_expression_statement) (BalaCodeVisitor* self, BalaExpressionStatement* stmt);
	void (*visit_if_statement) (BalaCodeVisitor* self, BalaIfStatement* stmt);
	void (*visit_switch_statement) (BalaCodeVisitor* self, BalaSwitchStatement* stmt);
	void (*visit_switch_section) (BalaCodeVisitor* self, BalaSwitchSection* section);
	void (*visit_switch_label) (BalaCodeVisitor* self, BalaSwitchLabel* label);
	void (*visit_loop) (BalaCodeVisitor* self, BalaLoop* stmt);
	void (*visit_while_statement) (BalaCodeVisitor* self, BalaWhileStatement* stmt);
	void (*visit_do_statement) (BalaCodeVisitor* self, BalaDoStatement* stmt);
	void (*visit_for_statement) (BalaCodeVisitor* self, BalaForStatement* stmt);
	void (*visit_foreach_statement) (BalaCodeVisitor* self, BalaForeachStatement* stmt);
	void (*visit_break_statement) (BalaCodeVisitor* self, BalaBreakStatement* stmt);
	void (*visit_continue_statement) (BalaCodeVisitor* self, BalaContinueStatement* stmt);
	void (*visit_return_statement) (BalaCodeVisitor* self, BalaReturnStatement* stmt);
	void (*visit_yield_statement) (BalaCodeVisitor* self, BalaYieldStatement* y);
	void (*visit_throw_statement) (BalaCodeVisitor* self, BalaThrowStatement* stmt);
	void (*visit_try_statement) (BalaCodeVisitor* self, BalaTryStatement* stmt);
	void (*visit_catch_clause) (BalaCodeVisitor* self, BalaCatchClause* clause);
	void (*visit_lock_statement) (BalaCodeVisitor* self, BalaLockStatement* stmt);
	void (*visit_unlock_statement) (BalaCodeVisitor* self, BalaUnlockStatement* stmt);
	void (*visit_delete_statement) (BalaCodeVisitor* self, BalaDeleteStatement* stmt);
	void (*visit_expression) (BalaCodeVisitor* self, BalaExpression* expr);
	void (*visit_array_creation_expression) (BalaCodeVisitor* self, BalaArrayCreationExpression* expr);
	void (*visit_boolean_literal) (BalaCodeVisitor* self, BalaBooleanLiteral* lit);
	void (*visit_character_literal) (BalaCodeVisitor* self, BalaCharacterLiteral* lit);
	void (*visit_integer_literal) (BalaCodeVisitor* self, BalaIntegerLiteral* lit);
	void (*visit_real_literal) (BalaCodeVisitor* self, BalaRealLiteral* lit);
	void (*visit_regex_literal) (BalaCodeVisitor* self, BalaRegexLiteral* lit);
	void (*visit_string_literal) (BalaCodeVisitor* self, BalaStringLiteral* lit);
	void (*visit_template) (BalaCodeVisitor* self, BalaTemplate* tmpl);
	void (*visit_tuple) (BalaCodeVisitor* self, BalaTuple* tuple);
	void (*visit_null_literal) (BalaCodeVisitor* self, BalaNullLiteral* lit);
	void (*visit_member_access) (BalaCodeVisitor* self, BalaMemberAccess* expr);
	void (*visit_method_call) (BalaCodeVisitor* self, BalaMethodCall* expr);
	void (*visit_element_access) (BalaCodeVisitor* self, BalaElementAccess* expr);
	void (*visit_slice_expression) (BalaCodeVisitor* self, BalaSliceExpression* expr);
	void (*visit_base_access) (BalaCodeVisitor* self, BalaBaseAccess* expr);
	void (*visit_postfix_expression) (BalaCodeVisitor* self, BalaPostfixExpression* expr);
	void (*visit_object_creation_expression) (BalaCodeVisitor* self, BalaObjectCreationExpression* expr);
	void (*visit_sizeof_expression) (BalaCodeVisitor* self, BalaSizeofExpression* expr);
	void (*visit_typeof_expression) (BalaCodeVisitor* self, BalaTypeofExpression* expr);
	void (*visit_unary_expression) (BalaCodeVisitor* self, BalaUnaryExpression* expr);
	void (*visit_cast_expression) (BalaCodeVisitor* self, BalaCastExpression* expr);
	void (*visit_named_argument) (BalaCodeVisitor* self, BalaNamedArgument* expr);
	void (*visit_pointer_indirection) (BalaCodeVisitor* self, BalaPointerIndirection* expr);
	void (*visit_addressof_expression) (BalaCodeVisitor* self, BalaAddressofExpression* expr);
	void (*visit_reference_transfer_expression) (BalaCodeVisitor* self, BalaReferenceTransferExpression* expr);
	void (*visit_binary_expression) (BalaCodeVisitor* self, BalaBinaryExpression* expr);
	void (*visit_type_check) (BalaCodeVisitor* self, BalaTypeCheck* expr);
	void (*visit_conditional_expression) (BalaCodeVisitor* self, BalaConditionalExpression* expr);
	void (*visit_lambda_expression) (BalaCodeVisitor* self, BalaLambdaExpression* expr);
	void (*visit_assignment) (BalaCodeVisitor* self, BalaAssignment* a);
	void (*visit_end_full_expression) (BalaCodeVisitor* self, BalaExpression* expr);
};

struct _BalaCodeGenerator {
	BalaCodeVisitor parent_instance;
	BalaCodeGeneratorPrivate * priv;
};

struct _BalaCodeGeneratorClass {
	BalaCodeVisitorClass parent_class;
	void (*emit) (BalaCodeGenerator* self, BalaCodeContext* context);
	BalaTargetValue* (*load_local) (BalaCodeGenerator* self, BalaLocalVariable* local, BalaExpression* expr);
	void (*store_local) (BalaCodeGenerator* self, BalaLocalVariable* local, BalaTargetValue* value, gboolean initializer, BalaSourceReference* source_reference);
	BalaTargetValue* (*load_parameter) (BalaCodeGenerator* self, BalaParameter* param, BalaExpression* expr);
	void (*store_parameter) (BalaCodeGenerator* self, BalaParameter* param, BalaTargetValue* value, gboolean capturing_parameter, BalaSourceReference* source_reference);
	BalaTargetValue* (*load_field) (BalaCodeGenerator* self, BalaField* field, BalaTargetValue* instance, BalaExpression* expr);
	void (*store_field) (BalaCodeGenerator* self, BalaField* field, BalaTargetValue* instance, BalaTargetValue* value, BalaSourceReference* source_reference);
};

struct _BalaAttributeCache {
	GTypeInstance parent_instance;
	volatile int ref_count;
	BalaAttributeCachePrivate * priv;
};

struct _BalaAttributeCacheClass {
	GTypeClass parent_class;
	void (*finalize) (BalaAttributeCache *self);
};

struct _BalaCodeWriter {
	BalaCodeVisitor parent_instance;
	BalaCodeWriterPrivate * priv;
};

struct _BalaCodeWriterClass {
	BalaCodeVisitorClass parent_class;
};

struct _BalaComment {
	GTypeInstance parent_instance;
	volatile int ref_count;
	BalaCommentPrivate * priv;
};

struct _BalaCommentClass {
	GTypeClass parent_class;
	void (*finalize) (BalaComment *self);
};

struct _BalaGirComment {
	BalaComment parent_instance;
	BalaGirCommentPrivate * priv;
};

struct _BalaGirCommentClass {
	BalaCommentClass parent_class;
};

struct _BalaConditionalExpression {
	BalaExpression parent_instance;
	BalaConditionalExpressionPrivate * priv;
};

struct _BalaConditionalExpressionClass {
	BalaExpressionClass parent_class;
};

struct _BalaConstant {
	BalaSymbol parent_instance;
	BalaConstantPrivate * priv;
};

struct _BalaConstantClass {
	BalaSymbolClass parent_class;
};

struct _BalaConstructor {
	BalaSubroutine parent_instance;
	BalaConstructorPrivate * priv;
};

struct _BalaConstructorClass {
	BalaSubroutineClass parent_class;
};

struct _BalaContinueStatement {
	BalaCodeNode parent_instance;
	BalaContinueStatementPrivate * priv;
};

struct _BalaContinueStatementClass {
	BalaCodeNodeClass parent_class;
};

struct _BalaCreationMethod {
	BalaMethod parent_instance;
	BalaCreationMethodPrivate * priv;
};

struct _BalaCreationMethodClass {
	BalaMethodClass parent_class;
};

struct _BalaDeclarationStatement {
	BalaCodeNode parent_instance;
	BalaDeclarationStatementPrivate * priv;
};

struct _BalaDeclarationStatementClass {
	BalaCodeNodeClass parent_class;
};

struct _BalaDelegate {
	BalaTypeSymbol parent_instance;
	BalaDelegatePrivate * priv;
};

struct _BalaDelegateClass {
	BalaTypeSymbolClass parent_class;
};

struct _BalaDelegateDestroyField {
	BalaField parent_instance;
	BalaDelegateDestroyFieldPrivate * priv;
};

struct _BalaDelegateDestroyFieldClass {
	BalaFieldClass parent_class;
};

struct _BalaDelegateTargetField {
	BalaField parent_instance;
	BalaDelegateTargetFieldPrivate * priv;
};

struct _BalaDelegateTargetFieldClass {
	BalaFieldClass parent_class;
};

struct _BalaDelegateType {
	BalaCallableType parent_instance;
	BalaDelegateTypePrivate * priv;
};

struct _BalaDelegateTypeClass {
	BalaCallableTypeClass parent_class;
};

struct _BalaDeleteStatement {
	BalaCodeNode parent_instance;
	BalaDeleteStatementPrivate * priv;
};

struct _BalaDeleteStatementClass {
	BalaCodeNodeClass parent_class;
};

struct _BalaDestructor {
	BalaSubroutine parent_instance;
	BalaDestructorPrivate * priv;
};

struct _BalaDestructorClass {
	BalaSubroutineClass parent_class;
};

struct _BalaDoStatement {
	BalaCodeNode parent_instance;
	BalaDoStatementPrivate * priv;
};

struct _BalaDoStatementClass {
	BalaCodeNodeClass parent_class;
};

struct _BalaDynamicMethod {
	BalaMethod parent_instance;
	BalaDynamicMethodPrivate * priv;
};

struct _BalaDynamicMethodClass {
	BalaMethodClass parent_class;
};

struct _BalaProperty {
	BalaSymbol parent_instance;
	BalaPropertyPrivate * priv;
};

struct _BalaPropertyClass {
	BalaSymbolClass parent_class;
};

struct _BalaDynamicProperty {
	BalaProperty parent_instance;
	BalaDynamicPropertyPrivate * priv;
};

struct _BalaDynamicPropertyClass {
	BalaPropertyClass parent_class;
};

struct _BalaSignal {
	BalaSymbol parent_instance;
	BalaSignalPrivate * priv;
};

struct _BalaSignalClass {
	BalaSymbolClass parent_class;
};

struct _BalaDynamicSignal {
	BalaSignal parent_instance;
	BalaDynamicSignalPrivate * priv;
};

struct _BalaDynamicSignalClass {
	BalaSignalClass parent_class;
};

struct _BalaElementAccess {
	BalaExpression parent_instance;
	BalaElementAccessPrivate * priv;
};

struct _BalaElementAccessClass {
	BalaExpressionClass parent_class;
};

struct _BalaEmptyStatement {
	BalaCodeNode parent_instance;
	BalaEmptyStatementPrivate * priv;
};

struct _BalaEmptyStatementClass {
	BalaCodeNodeClass parent_class;
};

struct _BalaEnum {
	BalaTypeSymbol parent_instance;
	BalaEnumPrivate * priv;
};

struct _BalaEnumClass {
	BalaTypeSymbolClass parent_class;
};

struct _BalaEnumValue {
	BalaConstant parent_instance;
	BalaEnumValuePrivate * priv;
};

struct _BalaEnumValueClass {
	BalaConstantClass parent_class;
};

struct _BalaEnumValueType {
	BalaValueType parent_instance;
	BalaEnumValueTypePrivate * priv;
};

struct _BalaEnumValueTypeClass {
	BalaValueTypeClass parent_class;
};

struct _BalaErrorCode {
	BalaTypeSymbol parent_instance;
	BalaErrorCodePrivate * priv;
};

struct _BalaErrorCodeClass {
	BalaTypeSymbolClass parent_class;
};

struct _BalaErrorDomain {
	BalaTypeSymbol parent_instance;
	BalaErrorDomainPrivate * priv;
};

struct _BalaErrorDomainClass {
	BalaTypeSymbolClass parent_class;
};

struct _BalaErrorType {
	BalaReferenceType parent_instance;
	BalaErrorTypePrivate * priv;
};

struct _BalaErrorTypeClass {
	BalaReferenceTypeClass parent_class;
};

struct _BalaExpressionStatement {
	BalaCodeNode parent_instance;
	BalaExpressionStatementPrivate * priv;
};

struct _BalaExpressionStatementClass {
	BalaCodeNodeClass parent_class;
};

struct _BalaFieldPrototype {
	BalaDataType parent_instance;
	BalaFieldPrototypePrivate * priv;
};

struct _BalaFieldPrototypeClass {
	BalaDataTypeClass parent_class;
};

struct _BalaFloatingType {
	BalaValueType parent_instance;
	BalaFloatingTypePrivate * priv;
};

struct _BalaFloatingTypeClass {
	BalaValueTypeClass parent_class;
};

struct _BalaFlowAnalyzer {
	BalaCodeVisitor parent_instance;
	BalaFlowAnalyzerPrivate * priv;
};

struct _BalaFlowAnalyzerClass {
	BalaCodeVisitorClass parent_class;
};

struct _BalaForeachStatement {
	BalaBlock parent_instance;
	BalaForeachStatementPrivate * priv;
};

struct _BalaForeachStatementClass {
	BalaBlockClass parent_class;
};

struct _BalaForStatement {
	BalaCodeNode parent_instance;
	BalaForStatementPrivate * priv;
};

struct _BalaForStatementClass {
	BalaCodeNodeClass parent_class;
};

struct _BalaGirParser {
	BalaCodeVisitor parent_instance;
	BalaGirParserPrivate * priv;
};

struct _BalaGirParserClass {
	BalaCodeVisitorClass parent_class;
};

struct _BalaGenericDestroyField {
	BalaField parent_instance;
	BalaGenericDestroyFieldPrivate * priv;
};

struct _BalaGenericDestroyFieldClass {
	BalaFieldClass parent_class;
};

struct _BalaGenericDupField {
	BalaField parent_instance;
	BalaGenericDupFieldPrivate * priv;
};

struct _BalaGenericDupFieldClass {
	BalaFieldClass parent_class;
};

struct _BalaGenericType {
	BalaDataType parent_instance;
	BalaGenericTypePrivate * priv;
};

struct _BalaGenericTypeClass {
	BalaDataTypeClass parent_class;
};

struct _BalaGenieParser {
	BalaCodeVisitor parent_instance;
	BalaGenieParserPrivate * priv;
};

struct _BalaGenieParserClass {
	BalaCodeVisitorClass parent_class;
};

struct _BalaGenieScanner {
	GTypeInstance parent_instance;
	volatile int ref_count;
	BalaGenieScannerPrivate * priv;
};

struct _BalaGenieScannerClass {
	GTypeClass parent_class;
	void (*finalize) (BalaGenieScanner *self);
};

struct _BalaSourceLocation {
	gchar* pos;
	gint line;
	gint column;
};

struct _BalaIfStatement {
	BalaCodeNode parent_instance;
	BalaIfStatementPrivate * priv;
};

struct _BalaIfStatementClass {
	BalaCodeNodeClass parent_class;
};

struct _BalaInitializerList {
	BalaExpression parent_instance;
	BalaInitializerListPrivate * priv;
};

struct _BalaInitializerListClass {
	BalaExpressionClass parent_class;
};

struct _BalaIntegerLiteral {
	BalaLiteral parent_instance;
	BalaIntegerLiteralPrivate * priv;
};

struct _BalaIntegerLiteralClass {
	BalaLiteralClass parent_class;
};

struct _BalaIntegerType {
	BalaValueType parent_instance;
	BalaIntegerTypePrivate * priv;
};

struct _BalaIntegerTypeClass {
	BalaValueTypeClass parent_class;
};

struct _BalaInterface {
	BalaObjectTypeSymbol parent_instance;
	BalaInterfacePrivate * priv;
};

struct _BalaInterfaceClass {
	BalaObjectTypeSymbolClass parent_class;
	BalaList* (*get_virtuals) (BalaInterface* self);
};

struct _BalaInterfaceType {
	BalaReferenceType parent_instance;
	BalaInterfaceTypePrivate * priv;
};

struct _BalaInterfaceTypeClass {
	BalaReferenceTypeClass parent_class;
};

struct _BalaInvalidType {
	BalaDataType parent_instance;
	BalaInvalidTypePrivate * priv;
};

struct _BalaInvalidTypeClass {
	BalaDataTypeClass parent_class;
};

struct _BalaLambdaExpression {
	BalaExpression parent_instance;
	BalaLambdaExpressionPrivate * priv;
};

struct _BalaLambdaExpressionClass {
	BalaExpressionClass parent_class;
};

struct _BalaLocalVariable {
	BalaVariable parent_instance;
	BalaLocalVariablePrivate * priv;
};

struct _BalaLocalVariableClass {
	BalaVariableClass parent_class;
};

struct _BalaLockStatement {
	BalaCodeNode parent_instance;
	BalaLockStatementPrivate * priv;
};

struct _BalaLockStatementClass {
	BalaCodeNodeClass parent_class;
};

struct _BalaLoop {
	BalaCodeNode parent_instance;
	BalaLoopPrivate * priv;
};

struct _BalaLoopClass {
	BalaCodeNodeClass parent_class;
};

struct _BalaMarkupReader {
	GTypeInstance parent_instance;
	volatile int ref_count;
	BalaMarkupReaderPrivate * priv;
};

struct _BalaMarkupReaderClass {
	GTypeClass parent_class;
	void (*finalize) (BalaMarkupReader *self);
};

struct _BalaMemberAccess {
	BalaExpression parent_instance;
	BalaMemberAccessPrivate * priv;
};

struct _BalaMemberAccessClass {
	BalaExpressionClass parent_class;
};

struct _BalaMemberInitializer {
	BalaCodeNode parent_instance;
	BalaMemberInitializerPrivate * priv;
};

struct _BalaMemberInitializerClass {
	BalaCodeNodeClass parent_class;
};

struct _BalaMethodCall {
	BalaExpression parent_instance;
	BalaMethodCallPrivate * priv;
};

struct _BalaMethodCallClass {
	BalaExpressionClass parent_class;
};

struct _BalaMethodType {
	BalaCallableType parent_instance;
	BalaMethodTypePrivate * priv;
};

struct _BalaMethodTypeClass {
	BalaCallableTypeClass parent_class;
};

struct _BalaNamedArgument {
	BalaExpression parent_instance;
	BalaNamedArgumentPrivate * priv;
};

struct _BalaNamedArgumentClass {
	BalaExpressionClass parent_class;
};

struct _BalaNamespace {
	BalaSymbol parent_instance;
	BalaNamespacePrivate * priv;
};

struct _BalaNamespaceClass {
	BalaSymbolClass parent_class;
};

struct _BalaNullLiteral {
	BalaLiteral parent_instance;
	BalaNullLiteralPrivate * priv;
};

struct _BalaNullLiteralClass {
	BalaLiteralClass parent_class;
};

struct _BalaNullType {
	BalaReferenceType parent_instance;
	BalaNullTypePrivate * priv;
};

struct _BalaNullTypeClass {
	BalaReferenceTypeClass parent_class;
};

struct _BalaObjectCreationExpression {
	BalaExpression parent_instance;
	BalaObjectCreationExpressionPrivate * priv;
};

struct _BalaObjectCreationExpressionClass {
	BalaExpressionClass parent_class;
};

struct _BalaObjectType {
	BalaReferenceType parent_instance;
	BalaObjectTypePrivate * priv;
};

struct _BalaObjectTypeClass {
	BalaReferenceTypeClass parent_class;
};

struct _BalaParameter {
	BalaVariable parent_instance;
	BalaParameterPrivate * priv;
};

struct _BalaParameterClass {
	BalaVariableClass parent_class;
};

struct _BalaParser {
	BalaCodeVisitor parent_instance;
	BalaParserPrivate * priv;
};

struct _BalaParserClass {
	BalaCodeVisitorClass parent_class;
};

typedef enum  {
	BALA_PARSE_ERROR_FAILED,
	BALA_PARSE_ERROR_SYNTAX
} BalaParseError;
#define BALA_PARSE_ERROR bala_parse_error_quark ()
struct _BalaPhiFunction {
	GTypeInstance parent_instance;
	volatile int ref_count;
	BalaPhiFunctionPrivate * priv;
};

struct _BalaPhiFunctionClass {
	GTypeClass parent_class;
	void (*finalize) (BalaPhiFunction *self);
};

struct _BalaPointerIndirection {
	BalaExpression parent_instance;
	BalaPointerIndirectionPrivate * priv;
};

struct _BalaPointerIndirectionClass {
	BalaExpressionClass parent_class;
};

struct _BalaPointerType {
	BalaDataType parent_instance;
	BalaPointerTypePrivate * priv;
};

struct _BalaPointerTypeClass {
	BalaDataTypeClass parent_class;
};

struct _BalaPostfixExpression {
	BalaExpression parent_instance;
	BalaPostfixExpressionPrivate * priv;
};

struct _BalaPostfixExpressionClass {
	BalaExpressionClass parent_class;
};

struct _BalaPropertyAccessor {
	BalaSubroutine parent_instance;
	BalaPropertyAccessorPrivate * priv;
};

struct _BalaPropertyAccessorClass {
	BalaSubroutineClass parent_class;
};

struct _BalaPropertyPrototype {
	BalaDataType parent_instance;
	BalaPropertyPrototypePrivate * priv;
};

struct _BalaPropertyPrototypeClass {
	BalaDataTypeClass parent_class;
};

struct _BalaRealLiteral {
	BalaLiteral parent_instance;
	BalaRealLiteralPrivate * priv;
};

struct _BalaRealLiteralClass {
	BalaLiteralClass parent_class;
};

struct _BalaReferenceTransferExpression {
	BalaExpression parent_instance;
	BalaReferenceTransferExpressionPrivate * priv;
};

struct _BalaReferenceTransferExpressionClass {
	BalaExpressionClass parent_class;
};

struct _BalaRegexLiteral {
	BalaLiteral parent_instance;
	BalaRegexLiteralPrivate * priv;
};

struct _BalaRegexLiteralClass {
	BalaLiteralClass parent_class;
};

struct _BalaReport {
	GTypeInstance parent_instance;
	volatile int ref_count;
	gint warnings;
	gint errors;
	BalaReportPrivate * priv;
};

struct _BalaReportClass {
	GTypeClass parent_class;
	void (*finalize) (BalaReport *self);
	void (*note) (BalaReport* self, BalaSourceReference* source, const gchar* message);
	void (*depr) (BalaReport* self, BalaSourceReference* source, const gchar* message);
	void (*warn) (BalaReport* self, BalaSourceReference* source, const gchar* message);
	void (*err) (BalaReport* self, BalaSourceReference* source, const gchar* message);
};

struct _BalaReturnStatement {
	BalaCodeNode parent_instance;
	BalaReturnStatementPrivate * priv;
};

struct _BalaReturnStatementClass {
	BalaCodeNodeClass parent_class;
};

struct _BalaScanner {
	GTypeInstance parent_instance;
	volatile int ref_count;
	BalaScannerPrivate * priv;
};

struct _BalaScannerClass {
	GTypeClass parent_class;
	void (*finalize) (BalaScanner *self);
};

struct _BalaScope {
	GTypeInstance parent_instance;
	volatile int ref_count;
	BalaScopePrivate * priv;
};

struct _BalaScopeClass {
	GTypeClass parent_class;
	void (*finalize) (BalaScope *self);
};

struct _BalaSemanticAnalyzer {
	BalaCodeVisitor parent_instance;
	BalaBlock* insert_block;
	BalaDataType* void_type;
	BalaDataType* bool_type;
	BalaDataType* char_type;
	BalaDataType* uchar_type;
	BalaDataType* short_type;
	BalaDataType* ushort_type;
	BalaDataType* int_type;
	BalaDataType* uint_type;
	BalaDataType* long_type;
	BalaDataType* ulong_type;
	BalaDataType* int8_type;
	BalaDataType* uint8_type;
	BalaDataType* int16_type;
	BalaDataType* uint16_type;
	BalaDataType* int32_type;
	BalaDataType* uint32_type;
	BalaDataType* size_t_type;
	BalaDataType* ssize_t_type;
	BalaDataType* unichar_type;
	BalaDataType* double_type;
	BalaDataType* string_type;
	BalaDataType* regex_type;
	BalaDataType* type_type;
	BalaDataType* va_list_type;
	BalaClass* object_type;
	BalaStructValueType* gvalue_type;
	BalaObjectType* gvariant_type;
	BalaDataType* glist_type;
	BalaDataType* gslist_type;
	BalaDataType* garray_type;
	BalaDataType* gvaluearray_type;
	BalaClass* gerror_type;
	BalaDataType* list_type;
	BalaDataType* tuple_type;
	BalaClass* gsource_type;
	BalaDataType* delegate_target_type;
	BalaDelegateType* delegate_target_destroy_type;
	BalaDelegateType* generics_dup_func_type;
	BalaList* replaced_nodes;
	BalaSemanticAnalyzerPrivate * priv;
};

struct _BalaSemanticAnalyzerClass {
	BalaCodeVisitorClass parent_class;
};

struct _BalaSignalType {
	BalaCallableType parent_instance;
	BalaSignalTypePrivate * priv;
};

struct _BalaSignalTypeClass {
	BalaCallableTypeClass parent_class;
};

struct _BalaSizeofExpression {
	BalaExpression parent_instance;
	BalaSizeofExpressionPrivate * priv;
};

struct _BalaSizeofExpressionClass {
	BalaExpressionClass parent_class;
};

struct _BalaSliceExpression {
	BalaExpression parent_instance;
	BalaSliceExpressionPrivate * priv;
};

struct _BalaSliceExpressionClass {
	BalaExpressionClass parent_class;
};

struct _BalaSourceFile {
	GTypeInstance parent_instance;
	volatile int ref_count;
	BalaSourceFilePrivate * priv;
};

struct _BalaSourceFileClass {
	GTypeClass parent_class;
	void (*finalize) (BalaSourceFile *self);
};

struct _BalaSourceReference {
	GTypeInstance parent_instance;
	volatile int ref_count;
	BalaSourceReferencePrivate * priv;
};

struct _BalaSourceReferenceClass {
	GTypeClass parent_class;
	void (*finalize) (BalaSourceReference *self);
};

struct _BalaStatementList {
	BalaCodeNode parent_instance;
	BalaStatementListPrivate * priv;
};

struct _BalaStatementListClass {
	BalaCodeNodeClass parent_class;
};

struct _BalaStringLiteral {
	BalaLiteral parent_instance;
	BalaStringLiteralPrivate * priv;
};

struct _BalaStringLiteralClass {
	BalaLiteralClass parent_class;
};

struct _BalaStruct {
	BalaTypeSymbol parent_instance;
	BalaStructPrivate * priv;
};

struct _BalaStructClass {
	BalaTypeSymbolClass parent_class;
};

struct _BalaStructValueType {
	BalaValueType parent_instance;
	BalaStructValueTypePrivate * priv;
};

struct _BalaStructValueTypeClass {
	BalaValueTypeClass parent_class;
};

struct _BalaSwitchLabel {
	BalaCodeNode parent_instance;
	BalaSwitchLabelPrivate * priv;
};

struct _BalaSwitchLabelClass {
	BalaCodeNodeClass parent_class;
};

struct _BalaSwitchSection {
	BalaBlock parent_instance;
	BalaSwitchSectionPrivate * priv;
};

struct _BalaSwitchSectionClass {
	BalaBlockClass parent_class;
};

struct _BalaSwitchStatement {
	BalaCodeNode parent_instance;
	BalaSwitchStatementPrivate * priv;
};

struct _BalaSwitchStatementClass {
	BalaCodeNodeClass parent_class;
};

struct _BalaSymbolResolver {
	BalaCodeVisitor parent_instance;
	BalaSymbolResolverPrivate * priv;
};

struct _BalaSymbolResolverClass {
	BalaCodeVisitorClass parent_class;
};

struct _BalaTargetValue {
	GTypeInstance parent_instance;
	volatile int ref_count;
	BalaTargetValuePrivate * priv;
};

struct _BalaTargetValueClass {
	GTypeClass parent_class;
	void (*finalize) (BalaTargetValue *self);
};

struct _BalaTemplate {
	BalaExpression parent_instance;
	BalaTemplatePrivate * priv;
};

struct _BalaTemplateClass {
	BalaExpressionClass parent_class;
};

struct _BalaThrowStatement {
	BalaCodeNode parent_instance;
	BalaThrowStatementPrivate * priv;
};

struct _BalaThrowStatementClass {
	BalaCodeNodeClass parent_class;
};

struct _BalaTraverseVisitor {
	BalaCodeVisitor parent_instance;
	BalaTraverseVisitorPrivate * priv;
};

struct _BalaTraverseVisitorClass {
	BalaCodeVisitorClass parent_class;
};

struct _BalaTryStatement {
	BalaCodeNode parent_instance;
	BalaTryStatementPrivate * priv;
};

struct _BalaTryStatementClass {
	BalaCodeNodeClass parent_class;
};

struct _BalaTuple {
	BalaExpression parent_instance;
	BalaTuplePrivate * priv;
};

struct _BalaTupleClass {
	BalaExpressionClass parent_class;
};

struct _BalaTypeCheck {
	BalaExpression parent_instance;
	BalaTypeCheckPrivate * priv;
};

struct _BalaTypeCheckClass {
	BalaExpressionClass parent_class;
};

struct _BalaTypeofExpression {
	BalaExpression parent_instance;
	BalaTypeofExpressionPrivate * priv;
};

struct _BalaTypeofExpressionClass {
	BalaExpressionClass parent_class;
};

struct _BalaTypeParameter {
	BalaSymbol parent_instance;
	BalaTypeParameterPrivate * priv;
};

struct _BalaTypeParameterClass {
	BalaSymbolClass parent_class;
};

struct _BalaUnaryExpression {
	BalaExpression parent_instance;
	BalaUnaryExpressionPrivate * priv;
};

struct _BalaUnaryExpressionClass {
	BalaExpressionClass parent_class;
};

struct _BalaUnlockStatement {
	BalaCodeNode parent_instance;
	BalaUnlockStatementPrivate * priv;
};

struct _BalaUnlockStatementClass {
	BalaCodeNodeClass parent_class;
};

struct _BalaUnresolvedSymbol {
	BalaSymbol parent_instance;
	BalaUnresolvedSymbolPrivate * priv;
};

struct _BalaUnresolvedSymbolClass {
	BalaSymbolClass parent_class;
};

struct _BalaUnresolvedType {
	BalaDataType parent_instance;
	BalaUnresolvedTypePrivate * priv;
};

struct _BalaUnresolvedTypeClass {
	BalaDataTypeClass parent_class;
};

struct _BalaUsedAttr {
	BalaCodeVisitor parent_instance;
	BalaMap* marked;
	BalaUsedAttrPrivate * priv;
};

struct _BalaUsedAttrClass {
	BalaCodeVisitorClass parent_class;
};

struct _BalaUsingDirective {
	BalaCodeNode parent_instance;
	BalaUsingDirectivePrivate * priv;
};

struct _BalaUsingDirectiveClass {
	BalaCodeNodeClass parent_class;
};

struct _BalaVarType {
	BalaDataType parent_instance;
	BalaVarTypePrivate * priv;
};

struct _BalaVarTypeClass {
	BalaDataTypeClass parent_class;
};

struct _BalaVersionAttribute {
	GTypeInstance parent_instance;
	volatile int ref_count;
	BalaVersionAttributePrivate * priv;
};

struct _BalaVersionAttributeClass {
	GTypeClass parent_class;
	void (*finalize) (BalaVersionAttribute *self);
};

struct _BalaVoidType {
	BalaDataType parent_instance;
	BalaVoidTypePrivate * priv;
};

struct _BalaVoidTypeClass {
	BalaDataTypeClass parent_class;
};

struct _BalaWhileStatement {
	BalaCodeNode parent_instance;
	BalaWhileStatementPrivate * priv;
};

struct _BalaWhileStatementClass {
	BalaCodeNodeClass parent_class;
};

struct _BalaYieldStatement {
	BalaCodeNode parent_instance;
	BalaYieldStatementPrivate * priv;
};

struct _BalaYieldStatementClass {
	BalaCodeNodeClass parent_class;
};

gpointer bala_code_node_ref (gpointer instance);
void bala_code_node_unref (gpointer instance);
GParamSpec* bala_param_spec_code_node (const gchar* name,
                                       const gchar* nick,
                                       const gchar* blurb,
                                       GType object_type,
                                       GParamFlags flags);
void bala_value_set_code_node (GValue* value,
                               gpointer v_object);
void bala_value_take_code_node (GValue* value,
                                gpointer v_object);
gpointer bala_value_get_code_node (const GValue* value);
GType bala_code_node_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaCodeNode, bala_code_node_unref)
GType bala_attribute_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaAttribute, bala_code_node_unref)
gpointer bala_code_visitor_ref (gpointer instance);
void bala_code_visitor_unref (gpointer instance);
GParamSpec* bala_param_spec_code_visitor (const gchar* name,
                                          const gchar* nick,
                                          const gchar* blurb,
                                          GType object_type,
                                          GParamFlags flags);
void bala_value_set_code_visitor (GValue* value,
                                  gpointer v_object);
void bala_value_take_code_visitor (GValue* value,
                                   gpointer v_object);
gpointer bala_value_get_code_visitor (const GValue* value);
GType bala_code_visitor_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaCodeVisitor, bala_code_visitor_unref)
gpointer bala_code_context_ref (gpointer instance);
void bala_code_context_unref (gpointer instance);
GParamSpec* bala_param_spec_code_context (const gchar* name,
                                          const gchar* nick,
                                          const gchar* blurb,
                                          GType object_type,
                                          GParamFlags flags);
void bala_value_set_code_context (GValue* value,
                                  gpointer v_object);
void bala_value_take_code_context (GValue* value,
                                   gpointer v_object);
gpointer bala_value_get_code_context (const GValue* value);
GType bala_code_context_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaCodeContext, bala_code_context_unref)
GType bala_code_generator_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaCodeGenerator, bala_code_visitor_unref)
GType bala_data_type_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaDataType, bala_code_node_unref)
GType bala_expression_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaExpression, bala_code_node_unref)
GType bala_symbol_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaSymbol, bala_code_node_unref)
GType bala_variable_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaVariable, bala_code_node_unref)
gpointer bala_source_reference_ref (gpointer instance);
void bala_source_reference_unref (gpointer instance);
GParamSpec* bala_param_spec_source_reference (const gchar* name,
                                              const gchar* nick,
                                              const gchar* blurb,
                                              GType object_type,
                                              GParamFlags flags);
void bala_value_set_source_reference (GValue* value,
                                      gpointer v_object);
void bala_value_take_source_reference (GValue* value,
                                       gpointer v_object);
gpointer bala_value_get_source_reference (const GValue* value);
GType bala_source_reference_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaSourceReference, bala_source_reference_unref)
GType bala_addressof_expression_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaAddressofExpression, bala_code_node_unref)
BalaExpression* bala_addressof_expression_get_inner (BalaAddressofExpression* self);
void bala_addressof_expression_set_inner (BalaAddressofExpression* self,
                                          BalaExpression* value);
BalaAddressofExpression* bala_addressof_expression_new (BalaExpression* inner,
                                                        BalaSourceReference* source_reference);
BalaAddressofExpression* bala_addressof_expression_construct (GType object_type,
                                                              BalaExpression* inner,
                                                              BalaSourceReference* source_reference);
GType bala_namespace_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaNamespace, bala_code_node_unref)
GType bala_typesymbol_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaTypeSymbol, bala_code_node_unref)
GType bala_object_type_symbol_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaObjectTypeSymbol, bala_code_node_unref)
GType bala_class_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaClass, bala_code_node_unref)
GType bala_interface_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaInterface, bala_code_node_unref)
GType bala_struct_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaStruct, bala_code_node_unref)
GType bala_enum_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaEnum, bala_code_node_unref)
GType bala_error_domain_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaErrorDomain, bala_code_node_unref)
GType bala_delegate_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaDelegate, bala_code_node_unref)
GType bala_constant_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaConstant, bala_code_node_unref)
GType bala_field_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaField, bala_code_node_unref)
GType bala_subroutine_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaSubroutine, bala_code_node_unref)
GType bala_method_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaMethod, bala_code_node_unref)
GType bala_property_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaProperty, bala_code_node_unref)
GType bala_signal_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaSignal, bala_code_node_unref)
GType bala_constructor_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaConstructor, bala_code_node_unref)
GType bala_destructor_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaDestructor, bala_code_node_unref)
GType bala_parameter_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaParameter, bala_code_node_unref)
GType bala_callable_get_type (void) G_GNUC_CONST;
GType bala_array_copy_method_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaArrayCopyMethod, bala_code_node_unref)
BalaArrayCopyMethod* bala_array_copy_method_new (BalaSourceReference* source_reference);
BalaArrayCopyMethod* bala_array_copy_method_construct (GType object_type,
                                                       BalaSourceReference* source_reference);
GType bala_array_creation_expression_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaArrayCreationExpression, bala_code_node_unref)
BalaDataType* bala_array_creation_expression_get_element_type (BalaArrayCreationExpression* self);
void bala_array_creation_expression_set_element_type (BalaArrayCreationExpression* self,
                                                      BalaDataType* value);
BalaDataType* bala_array_creation_expression_get_length_type (BalaArrayCreationExpression* self);
void bala_array_creation_expression_set_length_type (BalaArrayCreationExpression* self,
                                                     BalaDataType* value);
gint bala_array_creation_expression_get_rank (BalaArrayCreationExpression* self);
void bala_array_creation_expression_set_rank (BalaArrayCreationExpression* self,
                                              gint value);
GType bala_initializer_list_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaInitializerList, bala_code_node_unref)
BalaInitializerList* bala_array_creation_expression_get_initializer_list (BalaArrayCreationExpression* self);
void bala_array_creation_expression_set_initializer_list (BalaArrayCreationExpression* self,
                                                          BalaInitializerList* value);
void bala_array_creation_expression_append_size (BalaArrayCreationExpression* self,
                                                 BalaExpression* size);
BalaList* bala_array_creation_expression_get_sizes (BalaArrayCreationExpression* self);
BalaArrayCreationExpression* bala_array_creation_expression_new (BalaDataType* element_type,
                                                                 gint rank,
                                                                 BalaInitializerList* initializer_list,
                                                                 BalaSourceReference* source_reference);
BalaArrayCreationExpression* bala_array_creation_expression_construct (GType object_type,
                                                                       BalaDataType* element_type,
                                                                       gint rank,
                                                                       BalaInitializerList* initializer_list,
                                                                       BalaSourceReference* source_reference);
GType bala_lockable_get_type (void) G_GNUC_CONST;
GType bala_array_length_field_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaArrayLengthField, bala_code_node_unref)
BalaArrayLengthField* bala_array_length_field_new (BalaSourceReference* source_reference);
BalaArrayLengthField* bala_array_length_field_construct (GType object_type,
                                                         BalaSourceReference* source_reference);
GType bala_array_move_method_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaArrayMoveMethod, bala_code_node_unref)
BalaArrayMoveMethod* bala_array_move_method_new (BalaSourceReference* source_reference);
BalaArrayMoveMethod* bala_array_move_method_construct (GType object_type,
                                                       BalaSourceReference* source_reference);
GType bala_array_resize_method_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaArrayResizeMethod, bala_code_node_unref)
BalaArrayResizeMethod* bala_array_resize_method_new (BalaSourceReference* source_reference);
BalaArrayResizeMethod* bala_array_resize_method_construct (GType object_type,
                                                           BalaSourceReference* source_reference);
gpointer bala_scope_ref (gpointer instance);
void bala_scope_unref (gpointer instance);
GParamSpec* bala_param_spec_scope (const gchar* name,
                                   const gchar* nick,
                                   const gchar* blurb,
                                   GType object_type,
                                   GParamFlags flags);
void bala_value_set_scope (GValue* value,
                           gpointer v_object);
void bala_value_take_scope (GValue* value,
                            gpointer v_object);
gpointer bala_value_get_scope (const GValue* value);
GType bala_scope_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaScope, bala_scope_unref)
GType bala_typeparameter_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaTypeParameter, bala_code_node_unref)
GType bala_reference_type_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaReferenceType, bala_code_node_unref)
GType bala_array_type_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaArrayType, bala_code_node_unref)
BalaDataType* bala_array_type_get_element_type (BalaArrayType* self);
void bala_array_type_set_element_type (BalaArrayType* self,
                                       BalaDataType* value);
BalaDataType* bala_array_type_get_length_type (BalaArrayType* self);
void bala_array_type_set_length_type (BalaArrayType* self,
                                      BalaDataType* value);
gboolean bala_array_type_get_invalid_syntax (BalaArrayType* self);
void bala_array_type_set_invalid_syntax (BalaArrayType* self,
                                         gboolean value);
gboolean bala_array_type_get_inline_allocated (BalaArrayType* self);
void bala_array_type_set_inline_allocated (BalaArrayType* self,
                                           gboolean value);
gboolean bala_array_type_get_fixed_length (BalaArrayType* self);
void bala_array_type_set_fixed_length (BalaArrayType* self,
                                       gboolean value);
BalaExpression* bala_array_type_get_length (BalaArrayType* self);
void bala_array_type_set_length (BalaArrayType* self,
                                 BalaExpression* value);
gint bala_array_type_get_rank (BalaArrayType* self);
void bala_array_type_set_rank (BalaArrayType* self,
                               gint value);
BalaArrayType* bala_array_type_new (BalaDataType* element_type,
                                    gint rank,
                                    BalaSourceReference* source_reference);
BalaArrayType* bala_array_type_construct (GType object_type,
                                          BalaDataType* element_type,
                                          gint rank,
                                          BalaSourceReference* source_reference);
GType bala_assignment_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaAssignment, bala_code_node_unref)
BalaExpression* bala_assignment_get_left (BalaAssignment* self);
void bala_assignment_set_left (BalaAssignment* self,
                               BalaExpression* value);
GType bala_assignment_operator_get_type (void) G_GNUC_CONST;
BalaAssignmentOperator bala_assignment_get_operator (BalaAssignment* self);
void bala_assignment_set_operator (BalaAssignment* self,
                                   BalaAssignmentOperator value);
BalaExpression* bala_assignment_get_right (BalaAssignment* self);
void bala_assignment_set_right (BalaAssignment* self,
                                BalaExpression* value);
BalaAssignment* bala_assignment_new (BalaExpression* left,
                                     BalaExpression* right,
                                     BalaAssignmentOperator operator,
                                     BalaSourceReference* source_reference);
BalaAssignment* bala_assignment_construct (GType object_type,
                                           BalaExpression* left,
                                           BalaExpression* right,
                                           BalaAssignmentOperator operator,
                                           BalaSourceReference* source_reference);
const gchar* bala_assignment_operator_to_string (BalaAssignmentOperator self);
const gchar* bala_attribute_get_name (BalaAttribute* self);
void bala_attribute_set_name (BalaAttribute* self,
                              const gchar* value);
BalaMap* bala_attribute_get_args (BalaAttribute* self);
BalaAttribute* bala_attribute_new (const gchar* name,
                                   BalaSourceReference* source_reference);
BalaAttribute* bala_attribute_construct (GType object_type,
                                         const gchar* name,
                                         BalaSourceReference* source_reference);
void bala_attribute_add_argument (BalaAttribute* self,
                                  const gchar* key,
                                  const gchar* value);
gboolean bala_attribute_has_argument (BalaAttribute* self,
                                      const gchar* name);
gchar* bala_attribute_get_string (BalaAttribute* self,
                                  const gchar* name,
                                  const gchar* default_value);
gint bala_attribute_get_integer (BalaAttribute* self,
                                 const gchar* name,
                                 gint default_value);
gdouble bala_attribute_get_double (BalaAttribute* self,
                                   const gchar* name,
                                   gdouble default_value);
gboolean bala_attribute_get_bool (BalaAttribute* self,
                                  const gchar* name,
                                  gboolean default_value);
GType bala_base_access_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaBaseAccess, bala_code_node_unref)
BalaBaseAccess* bala_base_access_new (BalaSourceReference* source);
BalaBaseAccess* bala_base_access_construct (GType object_type,
                                            BalaSourceReference* source);
gpointer bala_basic_block_ref (gpointer instance);
void bala_basic_block_unref (gpointer instance);
GParamSpec* bala_param_spec_basic_block (const gchar* name,
                                         const gchar* nick,
                                         const gchar* blurb,
                                         GType object_type,
                                         GParamFlags flags);
void bala_value_set_basic_block (GValue* value,
                                 gpointer v_object);
void bala_value_take_basic_block (GValue* value,
                                  gpointer v_object);
gpointer bala_value_get_basic_block (const GValue* value);
GType bala_basic_block_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaBasicBlock, bala_basic_block_unref)
BalaBasicBlock* bala_basic_block_get_parent (BalaBasicBlock* self);
gboolean bala_basic_block_get_postorder_visited (BalaBasicBlock* self);
void bala_basic_block_set_postorder_visited (BalaBasicBlock* self,
                                             gboolean value);
gint bala_basic_block_get_postorder_number (BalaBasicBlock* self);
void bala_basic_block_set_postorder_number (BalaBasicBlock* self,
                                            gint value);
BalaBasicBlock* bala_basic_block_new (void);
BalaBasicBlock* bala_basic_block_construct (GType object_type);
BalaBasicBlock* bala_basic_block_new_entry (void);
BalaBasicBlock* bala_basic_block_construct_entry (GType object_type);
BalaBasicBlock* bala_basic_block_new_exit (void);
BalaBasicBlock* bala_basic_block_construct_exit (GType object_type);
void bala_basic_block_add_node (BalaBasicBlock* self,
                                BalaCodeNode* node);
BalaList* bala_basic_block_get_nodes (BalaBasicBlock* self);
void bala_basic_block_connect (BalaBasicBlock* self,
                               BalaBasicBlock* target);
BalaList* bala_basic_block_get_predecessors (BalaBasicBlock* self);
BalaList* bala_basic_block_get_successors (BalaBasicBlock* self);
void bala_basic_block_add_child (BalaBasicBlock* self,
                                 BalaBasicBlock* block);
BalaList* bala_basic_block_get_children (BalaBasicBlock* self);
void bala_basic_block_add_dominator_frontier (BalaBasicBlock* self,
                                              BalaBasicBlock* block);
BalaSet* bala_basic_block_get_dominator_frontier (BalaBasicBlock* self);
gpointer bala_phi_function_ref (gpointer instance);
void bala_phi_function_unref (gpointer instance);
GParamSpec* bala_param_spec_phi_function (const gchar* name,
                                          const gchar* nick,
                                          const gchar* blurb,
                                          GType object_type,
                                          GParamFlags flags);
void bala_value_set_phi_function (GValue* value,
                                  gpointer v_object);
void bala_value_take_phi_function (GValue* value,
                                   gpointer v_object);
gpointer bala_value_get_phi_function (const GValue* value);
GType bala_phi_function_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaPhiFunction, bala_phi_function_unref)
void bala_basic_block_add_phi_function (BalaBasicBlock* self,
                                        BalaPhiFunction* phi);
BalaSet* bala_basic_block_get_phi_functions (BalaBasicBlock* self);
GType bala_binary_expression_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaBinaryExpression, bala_code_node_unref)
GType bala_binary_operator_get_type (void) G_GNUC_CONST;
BalaBinaryOperator bala_binary_expression_get_operator (BalaBinaryExpression* self);
void bala_binary_expression_set_operator (BalaBinaryExpression* self,
                                          BalaBinaryOperator value);
BalaExpression* bala_binary_expression_get_left (BalaBinaryExpression* self);
void bala_binary_expression_set_left (BalaBinaryExpression* self,
                                      BalaExpression* value);
BalaExpression* bala_binary_expression_get_right (BalaBinaryExpression* self);
void bala_binary_expression_set_right (BalaBinaryExpression* self,
                                       BalaExpression* value);
gboolean bala_binary_expression_get_is_chained (BalaBinaryExpression* self);
BalaBinaryExpression* bala_binary_expression_new (BalaBinaryOperator op,
                                                  BalaExpression* _left,
                                                  BalaExpression* _right,
                                                  BalaSourceReference* source);
BalaBinaryExpression* bala_binary_expression_construct (GType object_type,
                                                        BalaBinaryOperator op,
                                                        BalaExpression* _left,
                                                        BalaExpression* _right,
                                                        BalaSourceReference* source);
BalaBinaryExpression* bala_binary_expression_new_chained (BalaBinaryOperator op,
                                                          BalaExpression* _left,
                                                          BalaExpression* _right,
                                                          BalaSourceReference* source);
BalaBinaryExpression* bala_binary_expression_construct_chained (GType object_type,
                                                                BalaBinaryOperator op,
                                                                BalaExpression* _left,
                                                                BalaExpression* _right,
                                                                BalaSourceReference* source);
const gchar* bala_binary_operator_to_string (BalaBinaryOperator self);
GType bala_statement_get_type (void) G_GNUC_CONST;
GType bala_block_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaBlock, bala_code_node_unref)
gboolean bala_block_get_contains_jump_statement (BalaBlock* self);
void bala_block_set_contains_jump_statement (BalaBlock* self,
                                             gboolean value);
gboolean bala_block_get_captured (BalaBlock* self);
void bala_block_set_captured (BalaBlock* self,
                              gboolean value);
BalaBlock* bala_block_new (BalaSourceReference* source_reference);
BalaBlock* bala_block_construct (GType object_type,
                                 BalaSourceReference* source_reference);
void bala_block_add_statement (BalaBlock* self,
                               BalaStatement* stmt);
void bala_block_insert_statement (BalaBlock* self,
                                  gint index,
                                  BalaStatement* stmt);
BalaList* bala_block_get_statements (BalaBlock* self);
GType bala_local_variable_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaLocalVariable, bala_code_node_unref)
void bala_block_add_local_variable (BalaBlock* self,
                                    BalaLocalVariable* local);
void bala_block_remove_local_variable (BalaBlock* self,
                                       BalaLocalVariable* local);
BalaList* bala_block_get_local_variables (BalaBlock* self);
void bala_block_add_local_constant (BalaBlock* self,
                                    BalaConstant* constant);
BalaList* bala_block_get_local_constants (BalaBlock* self);
void bala_block_insert_before (BalaBlock* self,
                               BalaStatement* stmt,
                               BalaStatement* new_stmt);
void bala_block_replace_statement (BalaBlock* self,
                                   BalaStatement* old_stmt,
                                   BalaStatement* new_stmt);
GType bala_literal_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaLiteral, bala_code_node_unref)
GType bala_boolean_literal_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaBooleanLiteral, bala_code_node_unref)
gboolean bala_boolean_literal_get_value (BalaBooleanLiteral* self);
void bala_boolean_literal_set_value (BalaBooleanLiteral* self,
                                     gboolean value);
BalaBooleanLiteral* bala_boolean_literal_new (gboolean b,
                                              BalaSourceReference* source);
BalaBooleanLiteral* bala_boolean_literal_construct (GType object_type,
                                                    gboolean b,
                                                    BalaSourceReference* source);
GType bala_value_type_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaValueType, bala_code_node_unref)
GType bala_boolean_type_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaBooleanType, bala_code_node_unref)
BalaBooleanType* bala_boolean_type_new (BalaStruct* type_symbol);
BalaBooleanType* bala_boolean_type_construct (GType object_type,
                                              BalaStruct* type_symbol);
GType bala_break_statement_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaBreakStatement, bala_code_node_unref)
BalaBreakStatement* bala_break_statement_new (BalaSourceReference* source);
BalaBreakStatement* bala_break_statement_construct (GType object_type,
                                                    BalaSourceReference* source);
BalaDataType* bala_callable_get_return_type (BalaCallable* self);
void bala_callable_set_return_type (BalaCallable* self,
                                    BalaDataType* value);
void bala_callable_add_parameter (BalaCallable* self,
                                  BalaParameter* param);
BalaList* bala_callable_get_parameters (BalaCallable* self);
GType bala_callable_type_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaCallableType, bala_code_node_unref)
BalaCallable* bala_callable_type_get_callable_symbol (BalaCallableType* self);
BalaCallableType* bala_callable_type_construct (GType object_type,
                                                BalaSymbol* symbol);
GType bala_cast_expression_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaCastExpression, bala_code_node_unref)
BalaExpression* bala_cast_expression_get_inner (BalaCastExpression* self);
void bala_cast_expression_set_inner (BalaCastExpression* self,
                                     BalaExpression* value);
BalaDataType* bala_cast_expression_get_type_reference (BalaCastExpression* self);
void bala_cast_expression_set_type_reference (BalaCastExpression* self,
                                              BalaDataType* value);
gboolean bala_cast_expression_get_is_silent_cast (BalaCastExpression* self);
gboolean bala_cast_expression_get_is_non_null_cast (BalaCastExpression* self);
BalaCastExpression* bala_cast_expression_new (BalaExpression* inner,
                                              BalaDataType* type_reference,
                                              BalaSourceReference* source_reference);
BalaCastExpression* bala_cast_expression_construct (GType object_type,
                                                    BalaExpression* inner,
                                                    BalaDataType* type_reference,
                                                    BalaSourceReference* source_reference);
BalaCastExpression* bala_cast_expression_new_silent (BalaExpression* inner,
                                                     BalaDataType* type_reference,
                                                     BalaSourceReference* source_reference);
BalaCastExpression* bala_cast_expression_construct_silent (GType object_type,
                                                           BalaExpression* inner,
                                                           BalaDataType* type_reference,
                                                           BalaSourceReference* source_reference);
BalaCastExpression* bala_cast_expression_new_non_null (BalaExpression* inner,
                                                       BalaSourceReference* source_reference);
BalaCastExpression* bala_cast_expression_construct_non_null (GType object_type,
                                                             BalaExpression* inner,
                                                             BalaSourceReference* source_reference);
GType bala_catch_clause_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaCatchClause, bala_code_node_unref)
BalaDataType* bala_catch_clause_get_error_type (BalaCatchClause* self);
void bala_catch_clause_set_error_type (BalaCatchClause* self,
                                       BalaDataType* value);
const gchar* bala_catch_clause_get_variable_name (BalaCatchClause* self);
void bala_catch_clause_set_variable_name (BalaCatchClause* self,
                                          const gchar* value);
BalaBlock* bala_catch_clause_get_body (BalaCatchClause* self);
void bala_catch_clause_set_body (BalaCatchClause* self,
                                 BalaBlock* value);
BalaLocalVariable* bala_catch_clause_get_error_variable (BalaCatchClause* self);
void bala_catch_clause_set_error_variable (BalaCatchClause* self,
                                           BalaLocalVariable* value);
const gchar* bala_catch_clause_get_clabel_name (BalaCatchClause* self);
void bala_catch_clause_set_clabel_name (BalaCatchClause* self,
                                        const gchar* value);
BalaCatchClause* bala_catch_clause_new (BalaDataType* error_type,
                                        const gchar* variable_name,
                                        BalaBlock* body,
                                        BalaSourceReference* source_reference);
BalaCatchClause* bala_catch_clause_construct (GType object_type,
                                              BalaDataType* error_type,
                                              const gchar* variable_name,
                                              BalaBlock* body,
                                              BalaSourceReference* source_reference);
GType bala_character_literal_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaCharacterLiteral, bala_code_node_unref)
const gchar* bala_character_literal_get_value (BalaCharacterLiteral* self);
void bala_character_literal_set_value (BalaCharacterLiteral* self,
                                       const gchar* value);
BalaCharacterLiteral* bala_character_literal_new (const gchar* c,
                                                  BalaSourceReference* source);
BalaCharacterLiteral* bala_character_literal_construct (GType object_type,
                                                        const gchar* c,
                                                        BalaSourceReference* source);
gunichar bala_character_literal_get_char (BalaCharacterLiteral* self);
BalaClass* bala_class_get_base_class (BalaClass* self);
void bala_class_set_base_class (BalaClass* self,
                                BalaClass* value);
gboolean bala_class_get_is_abstract (BalaClass* self);
void bala_class_set_is_abstract (BalaClass* self,
                                 gboolean value);
gboolean bala_class_get_is_sealed (BalaClass* self);
void bala_class_set_is_sealed (BalaClass* self,
                               gboolean value);
gboolean bala_class_get_is_compact (BalaClass* self);
void bala_class_set_is_compact (BalaClass* self,
                                gboolean value);
gboolean bala_class_get_is_immutable (BalaClass* self);
void bala_class_set_is_immutable (BalaClass* self,
                                  gboolean value);
gboolean bala_class_get_is_singleton (BalaClass* self);
void bala_class_set_is_singleton (BalaClass* self,
                                  gboolean value);
gboolean bala_class_get_has_private_fields (BalaClass* self);
void bala_class_set_has_private_fields (BalaClass* self,
                                        gboolean value);
gboolean bala_class_get_has_class_private_fields (BalaClass* self);
GType bala_creation_method_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaCreationMethod, bala_code_node_unref)
BalaCreationMethod* bala_class_get_default_construction_method (BalaClass* self);
BalaConstructor* bala_class_get_constructor (BalaClass* self);
BalaConstructor* bala_class_get_class_constructor (BalaClass* self);
BalaConstructor* bala_class_get_static_constructor (BalaClass* self);
BalaDestructor* bala_class_get_destructor (BalaClass* self);
BalaDestructor* bala_class_get_static_destructor (BalaClass* self);
BalaDestructor* bala_class_get_class_destructor (BalaClass* self);
gboolean bala_class_get_is_error_base (BalaClass* self);
gpointer bala_comment_ref (gpointer instance);
void bala_comment_unref (gpointer instance);
GParamSpec* bala_param_spec_comment (const gchar* name,
                                     const gchar* nick,
                                     const gchar* blurb,
                                     GType object_type,
                                     GParamFlags flags);
void bala_value_set_comment (GValue* value,
                             gpointer v_object);
void bala_value_take_comment (GValue* value,
                              gpointer v_object);
gpointer bala_value_get_comment (const GValue* value);
GType bala_comment_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaComment, bala_comment_unref)
BalaClass* bala_class_new (const gchar* name,
                           BalaSourceReference* source_reference,
                           BalaComment* comment);
BalaClass* bala_class_construct (GType object_type,
                                 const gchar* name,
                                 BalaSourceReference* source_reference,
                                 BalaComment* comment);
void bala_class_add_base_type (BalaClass* self,
                               BalaDataType* type);
BalaList* bala_class_get_base_types (BalaClass* self);
BalaHashMap* bala_class_get_implicit_implementations (BalaClass* self);
gboolean bala_class_is_fundamental (BalaClass* self);
gboolean bala_class_is_a (BalaClass* self,
                          BalaObjectTypeSymbol* t);
gboolean bala_class_implements (BalaClass* self,
                                BalaInterface* i);
GType bala_class_type_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaClassType, bala_code_node_unref)
BalaClass* bala_class_type_get_class_symbol (BalaClassType* self);
BalaClassType* bala_class_type_new (BalaClass* class_symbol);
BalaClassType* bala_class_type_construct (GType object_type,
                                          BalaClass* class_symbol);
gboolean bala_code_context_get_assert (BalaCodeContext* self);
void bala_code_context_set_assert (BalaCodeContext* self,
                                   gboolean value);
gboolean bala_code_context_get_checking (BalaCodeContext* self);
void bala_code_context_set_checking (BalaCodeContext* self,
                                     gboolean value);
gboolean bala_code_context_get_deprecated (BalaCodeContext* self);
void bala_code_context_set_deprecated (BalaCodeContext* self,
                                       gboolean value);
gboolean bala_code_context_get_hide_internal (BalaCodeContext* self);
void bala_code_context_set_hide_internal (BalaCodeContext* self,
                                          gboolean value);
gboolean bala_code_context_get_since_check (BalaCodeContext* self);
void bala_code_context_set_since_check (BalaCodeContext* self,
                                        gboolean value);
gboolean bala_code_context_get_experimental (BalaCodeContext* self);
void bala_code_context_set_experimental (BalaCodeContext* self,
                                         gboolean value);
gboolean bala_code_context_get_experimental_non_null (BalaCodeContext* self);
void bala_code_context_set_experimental_non_null (BalaCodeContext* self,
                                                  gboolean value);
gboolean bala_code_context_get_gobject_tracing (BalaCodeContext* self);
void bala_code_context_set_gobject_tracing (BalaCodeContext* self,
                                            gboolean value);
gboolean bala_code_context_get_ccode_only (BalaCodeContext* self);
void bala_code_context_set_ccode_only (BalaCodeContext* self,
                                       gboolean value);
const gchar* bala_code_context_get_pkg_config_command (BalaCodeContext* self);
void bala_code_context_set_pkg_config_command (BalaCodeContext* self,
                                               const gchar* value);
gboolean bala_code_context_get_abi_stability (BalaCodeContext* self);
void bala_code_context_set_abi_stability (BalaCodeContext* self,
                                          gboolean value);
const gchar* bala_code_context_get_header_filename (BalaCodeContext* self);
void bala_code_context_set_header_filename (BalaCodeContext* self,
                                            const gchar* value);
const gchar* bala_code_context_get_internal_header_filename (BalaCodeContext* self);
void bala_code_context_set_internal_header_filename (BalaCodeContext* self,
                                                     const gchar* value);
gboolean bala_code_context_get_use_header (BalaCodeContext* self);
void bala_code_context_set_use_header (BalaCodeContext* self,
                                       gboolean value);
const gchar* bala_code_context_get_includedir (BalaCodeContext* self);
void bala_code_context_set_includedir (BalaCodeContext* self,
                                       const gchar* value);
const gchar* bala_code_context_get_symbols_filename (BalaCodeContext* self);
void bala_code_context_set_symbols_filename (BalaCodeContext* self,
                                             const gchar* value);
gboolean bala_code_context_get_compile_only (BalaCodeContext* self);
void bala_code_context_set_compile_only (BalaCodeContext* self,
                                         gboolean value);
const gchar* bala_code_context_get_output (BalaCodeContext* self);
void bala_code_context_set_output (BalaCodeContext* self,
                                   const gchar* value);
const gchar* bala_code_context_get_basedir (BalaCodeContext* self);
void bala_code_context_set_basedir (BalaCodeContext* self,
                                    const gchar* value);
const gchar* bala_code_context_get_directory (BalaCodeContext* self);
void bala_code_context_set_directory (BalaCodeContext* self,
                                      const gchar* value);
gchar** bala_code_context_get_vapi_directories (BalaCodeContext* self,
                                                gint* result_length1);
void bala_code_context_set_vapi_directories (BalaCodeContext* self,
                                             gchar** value,
                                             gint value_length1);
gchar** bala_code_context_get_gir_directories (BalaCodeContext* self,
                                               gint* result_length1);
void bala_code_context_set_gir_directories (BalaCodeContext* self,
                                            gchar** value,
                                            gint value_length1);
gchar** bala_code_context_get_metadata_directories (BalaCodeContext* self,
                                                    gint* result_length1);
void bala_code_context_set_metadata_directories (BalaCodeContext* self,
                                                 gchar** value,
                                                 gint value_length1);
gboolean bala_code_context_get_debug (BalaCodeContext* self);
void bala_code_context_set_debug (BalaCodeContext* self,
                                  gboolean value);
gint bala_code_context_get_optlevel (BalaCodeContext* self);
void bala_code_context_set_optlevel (BalaCodeContext* self,
                                     gint value);
gboolean bala_code_context_get_mem_profiler (BalaCodeContext* self);
void bala_code_context_set_mem_profiler (BalaCodeContext* self,
                                         gboolean value);
BalaMethod* bala_code_context_get_module_init_method (BalaCodeContext* self);
void bala_code_context_set_module_init_method (BalaCodeContext* self,
                                               BalaMethod* value);
gboolean bala_code_context_get_save_temps (BalaCodeContext* self);
void bala_code_context_set_save_temps (BalaCodeContext* self,
                                       gboolean value);
GType bala_profile_get_type (void) G_GNUC_CONST;
BalaProfile bala_code_context_get_profile (BalaCodeContext* self);
void bala_code_context_set_profile (BalaCodeContext* self,
                                    BalaProfile value);
gboolean bala_code_context_get_verbose_mode (BalaCodeContext* self);
void bala_code_context_set_verbose_mode (BalaCodeContext* self,
                                         gboolean value);
gboolean bala_code_context_get_version_header (BalaCodeContext* self);
void bala_code_context_set_version_header (BalaCodeContext* self,
                                           gboolean value);
gboolean bala_code_context_get_nostdpkg (BalaCodeContext* self);
void bala_code_context_set_nostdpkg (BalaCodeContext* self,
                                     gboolean value);
gboolean bala_code_context_get_use_fast_vapi (BalaCodeContext* self);
void bala_code_context_set_use_fast_vapi (BalaCodeContext* self,
                                          gboolean value);
gboolean bala_code_context_get_keep_going (BalaCodeContext* self);
void bala_code_context_set_keep_going (BalaCodeContext* self,
                                       gboolean value);
gboolean bala_code_context_get_vapi_comments (BalaCodeContext* self);
void bala_code_context_set_vapi_comments (BalaCodeContext* self,
                                          gboolean value);
gboolean bala_code_context_require_glib_version (BalaCodeContext* self,
                                                 gint major,
                                                 gint minor);
gboolean bala_code_context_get_save_csources (BalaCodeContext* self);
gpointer bala_report_ref (gpointer instance);
void bala_report_unref (gpointer instance);
GParamSpec* bala_param_spec_report (const gchar* name,
                                    const gchar* nick,
                                    const gchar* blurb,
                                    GType object_type,
                                    GParamFlags flags);
void bala_value_set_report (GValue* value,
                            gpointer v_object);
void bala_value_take_report (GValue* value,
                             gpointer v_object);
gpointer bala_value_get_report (const GValue* value);
GType bala_report_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaReport, bala_report_unref)
BalaReport* bala_code_context_get_report (BalaCodeContext* self);
void bala_code_context_set_report (BalaCodeContext* self,
                                   BalaReport* value);
BalaMethod* bala_code_context_get_entry_point (BalaCodeContext* self);
void bala_code_context_set_entry_point (BalaCodeContext* self,
                                        BalaMethod* value);
const gchar* bala_code_context_get_entry_point_name (BalaCodeContext* self);
void bala_code_context_set_entry_point_name (BalaCodeContext* self,
                                             const gchar* value);
gboolean bala_code_context_get_run_output (BalaCodeContext* self);
void bala_code_context_set_run_output (BalaCodeContext* self,
                                       gboolean value);
gchar** bala_code_context_get_gresources (BalaCodeContext* self,
                                          gint* result_length1);
void bala_code_context_set_gresources (BalaCodeContext* self,
                                       gchar** value,
                                       gint value_length1);
gchar** bala_code_context_get_gresources_directories (BalaCodeContext* self,
                                                      gint* result_length1);
void bala_code_context_set_gresources_directories (BalaCodeContext* self,
                                                   gchar** value,
                                                   gint value_length1);
BalaNamespace* bala_code_context_get_root (BalaCodeContext* self);
GType bala_symbol_resolver_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaSymbolResolver, bala_code_visitor_unref)
BalaSymbolResolver* bala_code_context_get_resolver (BalaCodeContext* self);
GType bala_semantic_analyzer_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaSemanticAnalyzer, bala_code_visitor_unref)
BalaSemanticAnalyzer* bala_code_context_get_analyzer (BalaCodeContext* self);
GType bala_flow_analyzer_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaFlowAnalyzer, bala_code_visitor_unref)
BalaFlowAnalyzer* bala_code_context_get_flow_analyzer (BalaCodeContext* self);
BalaCodeGenerator* bala_code_context_get_codegen (BalaCodeContext* self);
void bala_code_context_set_codegen (BalaCodeContext* self,
                                    BalaCodeGenerator* value);
GType bala_used_attr_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaUsedAttr, bala_code_visitor_unref)
BalaUsedAttr* bala_code_context_get_used_attr (BalaCodeContext* self);
void bala_code_context_set_used_attr (BalaCodeContext* self,
                                      BalaUsedAttr* value);
BalaCodeContext* bala_code_context_new (void);
BalaCodeContext* bala_code_context_construct (GType object_type);
BalaCodeContext* bala_code_context_get (void);
void bala_code_context_push (BalaCodeContext* context);
void bala_code_context_pop (void);
gpointer bala_source_file_ref (gpointer instance);
void bala_source_file_unref (gpointer instance);
GParamSpec* bala_param_spec_source_file (const gchar* name,
                                         const gchar* nick,
                                         const gchar* blurb,
                                         GType object_type,
                                         GParamFlags flags);
void bala_value_set_source_file (GValue* value,
                                 gpointer v_object);
void bala_value_take_source_file (GValue* value,
                                  gpointer v_object);
gpointer bala_value_get_source_file (const GValue* value);
GType bala_source_file_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaSourceFile, bala_source_file_unref)
BalaList* bala_code_context_get_source_files (BalaCodeContext* self);
BalaList* bala_code_context_get_c_source_files (BalaCodeContext* self);
void bala_code_context_add_source_file (BalaCodeContext* self,
                                        BalaSourceFile* file);
BalaSourceFile* bala_code_context_get_source_file (BalaCodeContext* self,
                                                   const gchar* filename);
void bala_code_context_add_c_source_file (BalaCodeContext* self,
                                          const gchar* file);
BalaList* bala_code_context_get_packages (BalaCodeContext* self);
gboolean bala_code_context_has_package (BalaCodeContext* self,
                                        const gchar* pkg);
void bala_code_context_add_package (BalaCodeContext* self,
                                    const gchar* pkg);
gboolean bala_code_context_add_external_package (BalaCodeContext* self,
                                                 const gchar* pkg);
gboolean bala_code_context_add_packages_from_file (BalaCodeContext* self,
                                                   const gchar* filename);
gboolean bala_code_context_add_source_filename (BalaCodeContext* self,
                                                const gchar* filename,
                                                gboolean is_source,
                                                gboolean cmdline);
void bala_code_context_accept (BalaCodeContext* self,
                               BalaCodeVisitor* visitor);
void bala_code_context_check (BalaCodeContext* self);
void bala_code_context_add_define (BalaCodeContext* self,
                                   const gchar* define);
gboolean bala_code_context_is_defined (BalaCodeContext* self,
                                       const gchar* define);
void bala_code_context_set_target_glib_version (BalaCodeContext* self,
                                                const gchar* target_glib);
gchar* bala_code_context_get_vapi_path (BalaCodeContext* self,
                                        const gchar* pkg);
gchar* bala_code_context_get_gir_path (BalaCodeContext* self,
                                       const gchar* gir);
gchar* bala_code_context_get_gresource_path (BalaCodeContext* self,
                                             const gchar* gresource,
                                             const gchar* resource);
gchar* bala_code_context_get_metadata_path (BalaCodeContext* self,
                                            const gchar* gir_filename);
void bala_code_context_write_dependencies (BalaCodeContext* self,
                                           const gchar* filename);
void bala_code_context_write_external_dependencies (BalaCodeContext* self,
                                                    const gchar* filename);
gchar* bala_code_context_realpath (const gchar* name);
gboolean bala_code_context_pkg_config_exists (BalaCodeContext* self,
                                              const gchar* package_name);
gchar* bala_code_context_pkg_config_modversion (BalaCodeContext* self,
                                                const gchar* package_name);
gchar* bala_code_context_pkg_config_compile_flags (BalaCodeContext* self,
                                                   const gchar* package_name);
GType bala_enum_value_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaEnumValue, bala_code_node_unref)
GType bala_error_code_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaErrorCode, bala_code_node_unref)
GType bala_property_accessor_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaPropertyAccessor, bala_code_node_unref)
GType bala_using_directive_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaUsingDirective, bala_code_node_unref)
GType bala_empty_statement_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaEmptyStatement, bala_code_node_unref)
GType bala_declaration_statement_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaDeclarationStatement, bala_code_node_unref)
GType bala_expression_statement_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaExpressionStatement, bala_code_node_unref)
GType bala_if_statement_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaIfStatement, bala_code_node_unref)
GType bala_switch_statement_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaSwitchStatement, bala_code_node_unref)
GType bala_switch_section_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaSwitchSection, bala_code_node_unref)
GType bala_switch_label_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaSwitchLabel, bala_code_node_unref)
GType bala_loop_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaLoop, bala_code_node_unref)
GType bala_while_statement_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaWhileStatement, bala_code_node_unref)
GType bala_do_statement_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaDoStatement, bala_code_node_unref)
GType bala_for_statement_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaForStatement, bala_code_node_unref)
GType bala_foreach_statement_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaForeachStatement, bala_code_node_unref)
GType bala_continue_statement_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaContinueStatement, bala_code_node_unref)
GType bala_return_statement_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaReturnStatement, bala_code_node_unref)
GType bala_yield_statement_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaYieldStatement, bala_code_node_unref)
GType bala_throw_statement_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaThrowStatement, bala_code_node_unref)
GType bala_try_statement_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaTryStatement, bala_code_node_unref)
GType bala_lock_statement_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaLockStatement, bala_code_node_unref)
GType bala_unlock_statement_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaUnlockStatement, bala_code_node_unref)
GType bala_delete_statement_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaDeleteStatement, bala_code_node_unref)
GType bala_integer_literal_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaIntegerLiteral, bala_code_node_unref)
GType bala_real_literal_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaRealLiteral, bala_code_node_unref)
GType bala_regex_literal_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaRegexLiteral, bala_code_node_unref)
GType bala_string_literal_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaStringLiteral, bala_code_node_unref)
GType bala_template_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaTemplate, bala_code_node_unref)
GType bala_tuple_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaTuple, bala_code_node_unref)
GType bala_null_literal_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaNullLiteral, bala_code_node_unref)
GType bala_member_access_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaMemberAccess, bala_code_node_unref)
GType bala_method_call_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaMethodCall, bala_code_node_unref)
GType bala_element_access_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaElementAccess, bala_code_node_unref)
GType bala_slice_expression_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaSliceExpression, bala_code_node_unref)
GType bala_postfix_expression_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaPostfixExpression, bala_code_node_unref)
GType bala_object_creation_expression_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaObjectCreationExpression, bala_code_node_unref)
GType bala_sizeof_expression_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaSizeofExpression, bala_code_node_unref)
GType bala_typeof_expression_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaTypeofExpression, bala_code_node_unref)
GType bala_unary_expression_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaUnaryExpression, bala_code_node_unref)
GType bala_named_argument_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaNamedArgument, bala_code_node_unref)
GType bala_pointer_indirection_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaPointerIndirection, bala_code_node_unref)
GType bala_reference_transfer_expression_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaReferenceTransferExpression, bala_code_node_unref)
GType bala_typecheck_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaTypeCheck, bala_code_node_unref)
GType bala_conditional_expression_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaConditionalExpression, bala_code_node_unref)
GType bala_lambda_expression_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaLambdaExpression, bala_code_node_unref)
gpointer bala_target_value_ref (gpointer instance);
void bala_target_value_unref (gpointer instance);
GParamSpec* bala_param_spec_target_value (const gchar* name,
                                          const gchar* nick,
                                          const gchar* blurb,
                                          GType object_type,
                                          GParamFlags flags);
void bala_value_set_target_value (GValue* value,
                                  gpointer v_object);
void bala_value_take_target_value (GValue* value,
                                   gpointer v_object);
gpointer bala_value_get_target_value (const GValue* value);
GType bala_target_value_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaTargetValue, bala_target_value_unref)
void bala_code_generator_emit (BalaCodeGenerator* self,
                               BalaCodeContext* context);
BalaTargetValue* bala_code_generator_load_local (BalaCodeGenerator* self,
                                                 BalaLocalVariable* local,
                                                 BalaExpression* expr);
void bala_code_generator_store_local (BalaCodeGenerator* self,
                                      BalaLocalVariable* local,
                                      BalaTargetValue* value,
                                      gboolean initializer,
                                      BalaSourceReference* source_reference);
BalaTargetValue* bala_code_generator_load_parameter (BalaCodeGenerator* self,
                                                     BalaParameter* param,
                                                     BalaExpression* expr);
void bala_code_generator_store_parameter (BalaCodeGenerator* self,
                                          BalaParameter* param,
                                          BalaTargetValue* value,
                                          gboolean capturing_parameter,
                                          BalaSourceReference* source_reference);
BalaTargetValue* bala_code_generator_load_field (BalaCodeGenerator* self,
                                                 BalaField* field,
                                                 BalaTargetValue* instance,
                                                 BalaExpression* expr);
void bala_code_generator_store_field (BalaCodeGenerator* self,
                                      BalaField* field,
                                      BalaTargetValue* instance,
                                      BalaTargetValue* value,
                                      BalaSourceReference* source_reference);
BalaCodeGenerator* bala_code_generator_construct (GType object_type);
BalaCodeNode* bala_code_node_get_parent_node (BalaCodeNode* self);
void bala_code_node_set_parent_node (BalaCodeNode* self,
                                     BalaCodeNode* value);
BalaSourceReference* bala_code_node_get_source_reference (BalaCodeNode* self);
void bala_code_node_set_source_reference (BalaCodeNode* self,
                                          BalaSourceReference* value);
gboolean bala_code_node_get_unreachable (BalaCodeNode* self);
void bala_code_node_set_unreachable (BalaCodeNode* self,
                                     gboolean value);
const gchar* bala_code_node_get_type_name (BalaCodeNode* self);
gboolean bala_code_node_get_checked (BalaCodeNode* self);
void bala_code_node_set_checked (BalaCodeNode* self,
                                 gboolean value);
gboolean bala_code_node_get_error (BalaCodeNode* self);
void bala_code_node_set_error (BalaCodeNode* self,
                               gboolean value);
gboolean bala_code_node_get_tree_can_fail (BalaCodeNode* self);
void bala_code_node_accept (BalaCodeNode* self,
                            BalaCodeVisitor* visitor);
void bala_code_node_accept_children (BalaCodeNode* self,
                                     BalaCodeVisitor* visitor);
gboolean bala_code_node_check (BalaCodeNode* self,
                               BalaCodeContext* context);
void bala_code_node_emit (BalaCodeNode* self,
                          BalaCodeGenerator* codegen);
void bala_code_node_replace_type (BalaCodeNode* self,
                                  BalaDataType* old_type,
                                  BalaDataType* new_type);
void bala_code_node_replace_expression (BalaCodeNode* self,
                                        BalaExpression* old_node,
                                        BalaExpression* new_node);
BalaAttribute* bala_code_node_get_attribute (BalaCodeNode* self,
                                             const gchar* name);
gboolean bala_code_node_has_attribute_argument (BalaCodeNode* self,
                                                const gchar* attribute,
                                                const gchar* argument);
void bala_code_node_set_attribute (BalaCodeNode* self,
                                   const gchar* name,
                                   gboolean value,
                                   BalaSourceReference* source_reference);
void bala_code_node_remove_attribute_argument (BalaCodeNode* self,
                                               const gchar* attribute,
                                               const gchar* argument);
gchar* bala_code_node_get_attribute_string (BalaCodeNode* self,
                                            const gchar* attribute,
                                            const gchar* argument,
                                            const gchar* default_value);
gint bala_code_node_get_attribute_integer (BalaCodeNode* self,
                                           const gchar* attribute,
                                           const gchar* argument,
                                           gint default_value);
gdouble bala_code_node_get_attribute_double (BalaCodeNode* self,
                                             const gchar* attribute,
                                             const gchar* argument,
                                             gdouble default_value);
gboolean bala_code_node_get_attribute_bool (BalaCodeNode* self,
                                            const gchar* attribute,
                                            const gchar* argument,
                                            gboolean default_value);
void bala_code_node_set_attribute_string (BalaCodeNode* self,
                                          const gchar* attribute,
                                          const gchar* argument,
                                          const gchar* value,
                                          BalaSourceReference* source_reference);
void bala_code_node_set_attribute_integer (BalaCodeNode* self,
                                           const gchar* attribute,
                                           const gchar* argument,
                                           gint value,
                                           BalaSourceReference* source_reference);
void bala_code_node_set_attribute_double (BalaCodeNode* self,
                                          const gchar* attribute,
                                          const gchar* argument,
                                          gdouble value,
                                          BalaSourceReference* source_reference);
void bala_code_node_set_attribute_bool (BalaCodeNode* self,
                                        const gchar* attribute,
                                        const gchar* argument,
                                        gboolean value,
                                        BalaSourceReference* source_reference);
gboolean bala_code_node_copy_attribute_string (BalaCodeNode* self,
                                               BalaCodeNode* source,
                                               const gchar* attribute,
                                               const gchar* argument);
gboolean bala_code_node_copy_attribute_integer (BalaCodeNode* self,
                                                BalaCodeNode* source,
                                                const gchar* attribute,
                                                const gchar* argument);
gboolean bala_code_node_copy_attribute_double (BalaCodeNode* self,
                                               BalaCodeNode* source,
                                               const gchar* attribute,
                                               const gchar* argument);
gboolean bala_code_node_copy_attribute_bool (BalaCodeNode* self,
                                             BalaCodeNode* source,
                                             const gchar* attribute,
                                             const gchar* argument);
gpointer bala_attribute_cache_ref (gpointer instance);
void bala_attribute_cache_unref (gpointer instance);
GParamSpec* bala_param_spec_attribute_cache (const gchar* name,
                                             const gchar* nick,
                                             const gchar* blurb,
                                             GType object_type,
                                             GParamFlags flags);
void bala_value_set_attribute_cache (GValue* value,
                                     gpointer v_object);
void bala_value_take_attribute_cache (GValue* value,
                                      gpointer v_object);
gpointer bala_value_get_attribute_cache (const GValue* value);
GType bala_attribute_cache_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaAttributeCache, bala_attribute_cache_unref)
BalaAttributeCache* bala_code_node_get_attribute_cache (BalaCodeNode* self,
                                                        gint index);
void bala_code_node_set_attribute_cache (BalaCodeNode* self,
                                         gint index,
                                         BalaAttributeCache* cache);
gchar* bala_code_node_to_string (BalaCodeNode* self);
void bala_code_node_get_defined_variables (BalaCodeNode* self,
                                           BalaCollection* collection);
void bala_code_node_get_used_variables (BalaCodeNode* self,
                                        BalaCollection* collection);
void bala_code_node_get_error_types (BalaCodeNode* self,
                                     BalaCollection* collection,
                                     BalaSourceReference* source_reference);
gchar* bala_code_node_get_temp_name (void);
gint bala_code_node_get_attribute_cache_index (void);
BalaCodeNode* bala_code_node_construct (GType object_type);
BalaAttributeCache* bala_attribute_cache_new (void);
BalaAttributeCache* bala_attribute_cache_construct (GType object_type);
void bala_code_visitor_visit_source_file (BalaCodeVisitor* self,
                                          BalaSourceFile* source_file);
void bala_code_visitor_visit_namespace (BalaCodeVisitor* self,
                                        BalaNamespace* ns);
void bala_code_visitor_visit_class (BalaCodeVisitor* self,
                                    BalaClass* cl);
void bala_code_visitor_visit_struct (BalaCodeVisitor* self,
                                     BalaStruct* st);
void bala_code_visitor_visit_interface (BalaCodeVisitor* self,
                                        BalaInterface* iface);
void bala_code_visitor_visit_enum (BalaCodeVisitor* self,
                                   BalaEnum* en);
void bala_code_visitor_visit_enum_value (BalaCodeVisitor* self,
                                         BalaEnumValue* ev);
void bala_code_visitor_visit_error_domain (BalaCodeVisitor* self,
                                           BalaErrorDomain* edomain);
void bala_code_visitor_visit_error_code (BalaCodeVisitor* self,
                                         BalaErrorCode* ecode);
void bala_code_visitor_visit_delegate (BalaCodeVisitor* self,
                                       BalaDelegate* d);
void bala_code_visitor_visit_constant (BalaCodeVisitor* self,
                                       BalaConstant* c);
void bala_code_visitor_visit_field (BalaCodeVisitor* self,
                                    BalaField* f);
void bala_code_visitor_visit_method (BalaCodeVisitor* self,
                                     BalaMethod* m);
void bala_code_visitor_visit_creation_method (BalaCodeVisitor* self,
                                              BalaCreationMethod* m);
void bala_code_visitor_visit_formal_parameter (BalaCodeVisitor* self,
                                               BalaParameter* p);
void bala_code_visitor_visit_property (BalaCodeVisitor* self,
                                       BalaProperty* prop);
void bala_code_visitor_visit_property_accessor (BalaCodeVisitor* self,
                                                BalaPropertyAccessor* acc);
void bala_code_visitor_visit_signal (BalaCodeVisitor* self,
                                     BalaSignal* sig);
void bala_code_visitor_visit_constructor (BalaCodeVisitor* self,
                                          BalaConstructor* c);
void bala_code_visitor_visit_destructor (BalaCodeVisitor* self,
                                         BalaDestructor* d);
void bala_code_visitor_visit_type_parameter (BalaCodeVisitor* self,
                                             BalaTypeParameter* p);
void bala_code_visitor_visit_using_directive (BalaCodeVisitor* self,
                                              BalaUsingDirective* ns);
void bala_code_visitor_visit_data_type (BalaCodeVisitor* self,
                                        BalaDataType* type);
void bala_code_visitor_visit_block (BalaCodeVisitor* self,
                                    BalaBlock* b);
void bala_code_visitor_visit_empty_statement (BalaCodeVisitor* self,
                                              BalaEmptyStatement* stmt);
void bala_code_visitor_visit_declaration_statement (BalaCodeVisitor* self,
                                                    BalaDeclarationStatement* stmt);
void bala_code_visitor_visit_local_variable (BalaCodeVisitor* self,
                                             BalaLocalVariable* local);
void bala_code_visitor_visit_initializer_list (BalaCodeVisitor* self,
                                               BalaInitializerList* list);
void bala_code_visitor_visit_expression_statement (BalaCodeVisitor* self,
                                                   BalaExpressionStatement* stmt);
void bala_code_visitor_visit_if_statement (BalaCodeVisitor* self,
                                           BalaIfStatement* stmt);
void bala_code_visitor_visit_switch_statement (BalaCodeVisitor* self,
                                               BalaSwitchStatement* stmt);
void bala_code_visitor_visit_switch_section (BalaCodeVisitor* self,
                                             BalaSwitchSection* section);
void bala_code_visitor_visit_switch_label (BalaCodeVisitor* self,
                                           BalaSwitchLabel* label);
void bala_code_visitor_visit_loop (BalaCodeVisitor* self,
                                   BalaLoop* stmt);
void bala_code_visitor_visit_while_statement (BalaCodeVisitor* self,
                                              BalaWhileStatement* stmt);
void bala_code_visitor_visit_do_statement (BalaCodeVisitor* self,
                                           BalaDoStatement* stmt);
void bala_code_visitor_visit_for_statement (BalaCodeVisitor* self,
                                            BalaForStatement* stmt);
void bala_code_visitor_visit_foreach_statement (BalaCodeVisitor* self,
                                                BalaForeachStatement* stmt);
void bala_code_visitor_visit_break_statement (BalaCodeVisitor* self,
                                              BalaBreakStatement* stmt);
void bala_code_visitor_visit_continue_statement (BalaCodeVisitor* self,
                                                 BalaContinueStatement* stmt);
void bala_code_visitor_visit_return_statement (BalaCodeVisitor* self,
                                               BalaReturnStatement* stmt);
void bala_code_visitor_visit_yield_statement (BalaCodeVisitor* self,
                                              BalaYieldStatement* y);
void bala_code_visitor_visit_throw_statement (BalaCodeVisitor* self,
                                              BalaThrowStatement* stmt);
void bala_code_visitor_visit_try_statement (BalaCodeVisitor* self,
                                            BalaTryStatement* stmt);
void bala_code_visitor_visit_catch_clause (BalaCodeVisitor* self,
                                           BalaCatchClause* clause);
void bala_code_visitor_visit_lock_statement (BalaCodeVisitor* self,
                                             BalaLockStatement* stmt);
void bala_code_visitor_visit_unlock_statement (BalaCodeVisitor* self,
                                               BalaUnlockStatement* stmt);
void bala_code_visitor_visit_delete_statement (BalaCodeVisitor* self,
                                               BalaDeleteStatement* stmt);
void bala_code_visitor_visit_expression (BalaCodeVisitor* self,
                                         BalaExpression* expr);
void bala_code_visitor_visit_array_creation_expression (BalaCodeVisitor* self,
                                                        BalaArrayCreationExpression* expr);
void bala_code_visitor_visit_boolean_literal (BalaCodeVisitor* self,
                                              BalaBooleanLiteral* lit);
void bala_code_visitor_visit_character_literal (BalaCodeVisitor* self,
                                                BalaCharacterLiteral* lit);
void bala_code_visitor_visit_integer_literal (BalaCodeVisitor* self,
                                              BalaIntegerLiteral* lit);
void bala_code_visitor_visit_real_literal (BalaCodeVisitor* self,
                                           BalaRealLiteral* lit);
void bala_code_visitor_visit_regex_literal (BalaCodeVisitor* self,
                                            BalaRegexLiteral* lit);
void bala_code_visitor_visit_string_literal (BalaCodeVisitor* self,
                                             BalaStringLiteral* lit);
void bala_code_visitor_visit_template (BalaCodeVisitor* self,
                                       BalaTemplate* tmpl);
void bala_code_visitor_visit_tuple (BalaCodeVisitor* self,
                                    BalaTuple* tuple);
void bala_code_visitor_visit_null_literal (BalaCodeVisitor* self,
                                           BalaNullLiteral* lit);
void bala_code_visitor_visit_member_access (BalaCodeVisitor* self,
                                            BalaMemberAccess* expr);
void bala_code_visitor_visit_method_call (BalaCodeVisitor* self,
                                          BalaMethodCall* expr);
void bala_code_visitor_visit_element_access (BalaCodeVisitor* self,
                                             BalaElementAccess* expr);
void bala_code_visitor_visit_slice_expression (BalaCodeVisitor* self,
                                               BalaSliceExpression* expr);
void bala_code_visitor_visit_base_access (BalaCodeVisitor* self,
                                          BalaBaseAccess* expr);
void bala_code_visitor_visit_postfix_expression (BalaCodeVisitor* self,
                                                 BalaPostfixExpression* expr);
void bala_code_visitor_visit_object_creation_expression (BalaCodeVisitor* self,
                                                         BalaObjectCreationExpression* expr);
void bala_code_visitor_visit_sizeof_expression (BalaCodeVisitor* self,
                                                BalaSizeofExpression* expr);
void bala_code_visitor_visit_typeof_expression (BalaCodeVisitor* self,
                                                BalaTypeofExpression* expr);
void bala_code_visitor_visit_unary_expression (BalaCodeVisitor* self,
                                               BalaUnaryExpression* expr);
void bala_code_visitor_visit_cast_expression (BalaCodeVisitor* self,
                                              BalaCastExpression* expr);
void bala_code_visitor_visit_named_argument (BalaCodeVisitor* self,
                                             BalaNamedArgument* expr);
void bala_code_visitor_visit_pointer_indirection (BalaCodeVisitor* self,
                                                  BalaPointerIndirection* expr);
void bala_code_visitor_visit_addressof_expression (BalaCodeVisitor* self,
                                                   BalaAddressofExpression* expr);
void bala_code_visitor_visit_reference_transfer_expression (BalaCodeVisitor* self,
                                                            BalaReferenceTransferExpression* expr);
void bala_code_visitor_visit_binary_expression (BalaCodeVisitor* self,
                                                BalaBinaryExpression* expr);
void bala_code_visitor_visit_type_check (BalaCodeVisitor* self,
                                         BalaTypeCheck* expr);
void bala_code_visitor_visit_conditional_expression (BalaCodeVisitor* self,
                                                     BalaConditionalExpression* expr);
void bala_code_visitor_visit_lambda_expression (BalaCodeVisitor* self,
                                                BalaLambdaExpression* expr);
void bala_code_visitor_visit_assignment (BalaCodeVisitor* self,
                                         BalaAssignment* a);
void bala_code_visitor_visit_end_full_expression (BalaCodeVisitor* self,
                                                  BalaExpression* expr);
BalaCodeVisitor* bala_code_visitor_construct (GType object_type);
GType bala_code_writer_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaCodeWriter, bala_code_visitor_unref)
GType bala_code_writer_type_get_type (void) G_GNUC_CONST;
BalaCodeWriter* bala_code_writer_new (BalaCodeWriterType type);
BalaCodeWriter* bala_code_writer_construct (GType object_type,
                                            BalaCodeWriterType type);
void bala_code_writer_set_cheader_override (BalaCodeWriter* self,
                                            const gchar* original,
                                            const gchar* replacement);
void bala_code_writer_write_file (BalaCodeWriter* self,
                                  BalaCodeContext* context,
                                  const gchar* filename);
BalaComment* bala_comment_new (const gchar* comment,
                               BalaSourceReference* _source_reference);
BalaComment* bala_comment_construct (GType object_type,
                                     const gchar* comment,
                                     BalaSourceReference* _source_reference);
const gchar* bala_comment_get_content (BalaComment* self);
void bala_comment_set_content (BalaComment* self,
                               const gchar* value);
BalaSourceReference* bala_comment_get_source_reference (BalaComment* self);
void bala_comment_set_source_reference (BalaComment* self,
                                        BalaSourceReference* value);
GType bala_gir_comment_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaGirComment, bala_comment_unref)
BalaMapIterator* bala_gir_comment_parameter_iterator (BalaGirComment* self);
BalaComment* bala_gir_comment_get_return_content (BalaGirComment* self);
void bala_gir_comment_set_return_content (BalaGirComment* self,
                                          BalaComment* value);
BalaGirComment* bala_gir_comment_new (const gchar* comment,
                                      BalaSourceReference* _source_reference);
BalaGirComment* bala_gir_comment_construct (GType object_type,
                                            const gchar* comment,
                                            BalaSourceReference* _source_reference);
BalaComment* bala_gir_comment_get_content_for_parameter (BalaGirComment* self,
                                                         const gchar* name);
BalaExpression* bala_conditional_expression_get_condition (BalaConditionalExpression* self);
void bala_conditional_expression_set_condition (BalaConditionalExpression* self,
                                                BalaExpression* value);
BalaExpression* bala_conditional_expression_get_true_expression (BalaConditionalExpression* self);
void bala_conditional_expression_set_true_expression (BalaConditionalExpression* self,
                                                      BalaExpression* value);
BalaExpression* bala_conditional_expression_get_false_expression (BalaConditionalExpression* self);
void bala_conditional_expression_set_false_expression (BalaConditionalExpression* self,
                                                       BalaExpression* value);
BalaConditionalExpression* bala_conditional_expression_new (BalaExpression* cond,
                                                            BalaExpression* true_expr,
                                                            BalaExpression* false_expr,
                                                            BalaSourceReference* source);
BalaConditionalExpression* bala_conditional_expression_construct (GType object_type,
                                                                  BalaExpression* cond,
                                                                  BalaExpression* true_expr,
                                                                  BalaExpression* false_expr,
                                                                  BalaSourceReference* source);
BalaDataType* bala_constant_get_type_reference (BalaConstant* self);
void bala_constant_set_type_reference (BalaConstant* self,
                                       BalaDataType* value);
BalaExpression* bala_constant_get_value (BalaConstant* self);
void bala_constant_set_value (BalaConstant* self,
                              BalaExpression* value);
BalaConstant* bala_constant_new (const gchar* name,
                                 BalaDataType* type_reference,
                                 BalaExpression* value,
                                 BalaSourceReference* source_reference,
                                 BalaComment* comment);
BalaConstant* bala_constant_construct (GType object_type,
                                       const gchar* name,
                                       BalaDataType* type_reference,
                                       BalaExpression* value,
                                       BalaSourceReference* source_reference,
                                       BalaComment* comment);
BalaParameter* bala_constructor_get_this_parameter (BalaConstructor* self);
void bala_constructor_set_this_parameter (BalaConstructor* self,
                                          BalaParameter* value);
GType bala_member_binding_get_type (void) G_GNUC_CONST;
BalaMemberBinding bala_constructor_get_binding (BalaConstructor* self);
void bala_constructor_set_binding (BalaConstructor* self,
                                   BalaMemberBinding value);
BalaConstructor* bala_constructor_new (BalaSourceReference* source);
BalaConstructor* bala_constructor_construct (GType object_type,
                                             BalaSourceReference* source);
BalaContinueStatement* bala_continue_statement_new (BalaSourceReference* source);
BalaContinueStatement* bala_continue_statement_construct (GType object_type,
                                                          BalaSourceReference* source);
const gchar* bala_creation_method_get_class_name (BalaCreationMethod* self);
void bala_creation_method_set_class_name (BalaCreationMethod* self,
                                          const gchar* value);
gboolean bala_creation_method_get_chain_up (BalaCreationMethod* self);
void bala_creation_method_set_chain_up (BalaCreationMethod* self,
                                        gboolean value);
BalaCreationMethod* bala_creation_method_new (const gchar* class_name,
                                              const gchar* name,
                                              BalaSourceReference* source_reference,
                                              BalaComment* comment);
BalaCreationMethod* bala_creation_method_construct (GType object_type,
                                                    const gchar* class_name,
                                                    const gchar* name,
                                                    BalaSourceReference* source_reference,
                                                    BalaComment* comment);
gboolean bala_data_type_get_value_owned (BalaDataType* self);
void bala_data_type_set_value_owned (BalaDataType* self,
                                     gboolean value);
gboolean bala_data_type_get_nullable (BalaDataType* self);
void bala_data_type_set_nullable (BalaDataType* self,
                                  gboolean value);
BalaSymbol* bala_data_type_get_symbol (BalaDataType* self);
BalaTypeSymbol* bala_data_type_get_type_symbol (BalaDataType* self);
gboolean bala_data_type_get_floating_reference (BalaDataType* self);
void bala_data_type_set_floating_reference (BalaDataType* self,
                                            gboolean value);
gboolean bala_data_type_get_is_dynamic (BalaDataType* self);
void bala_data_type_set_is_dynamic (BalaDataType* self,
                                    gboolean value);
BalaDataType* bala_data_type_construct_with_symbol (GType object_type,
                                                    BalaSymbol* symbol);
void bala_data_type_add_type_argument (BalaDataType* self,
                                       BalaDataType* arg);
BalaList* bala_data_type_get_type_arguments (BalaDataType* self);
gboolean bala_data_type_has_type_arguments (BalaDataType* self);
void bala_data_type_remove_all_type_arguments (BalaDataType* self);
gchar* bala_data_type_to_qualified_string (BalaDataType* self,
                                           BalaScope* scope);
BalaDataType* bala_data_type_copy (BalaDataType* self);
gboolean bala_data_type_equals (BalaDataType* self,
                                BalaDataType* type2);
gboolean bala_data_type_stricter (BalaDataType* self,
                                  BalaDataType* type2);
gboolean bala_data_type_compatible (BalaDataType* self,
                                    BalaDataType* target_type);
gboolean bala_data_type_is_invokable (BalaDataType* self);
BalaDataType* bala_data_type_get_return_type (BalaDataType* self);
BalaList* bala_data_type_get_parameters (BalaDataType* self);
gboolean bala_data_type_is_reference_type_or_type_parameter (BalaDataType* self);
gboolean bala_data_type_is_accessible (BalaDataType* self,
                                       BalaSymbol* sym);
BalaSymbol* bala_data_type_get_member (BalaDataType* self,
                                       const gchar* member_name);
BalaSymbol* bala_data_type_get_pointer_member (BalaDataType* self,
                                               const gchar* member_name);
gboolean bala_data_type_is_real_struct_type (BalaDataType* self);
gboolean bala_data_type_is_real_non_null_struct_type (BalaDataType* self);
gboolean bala_data_type_is_non_null_simple_type (BalaDataType* self);
gboolean bala_data_type_is_disposable (BalaDataType* self);
BalaDataType* bala_data_type_get_actual_type (BalaDataType* self,
                                              BalaDataType* derived_instance_type,
                                              BalaList* method_type_arguments,
                                              BalaCodeNode* node_reference);
gboolean bala_data_type_is_generic (BalaDataType* self);
void bala_data_type_replace_type_parameter (BalaDataType* self,
                                            BalaTypeParameter* old_type_param,
                                            BalaTypeParameter* new_type_param);
BalaDataType* bala_data_type_infer_type_argument (BalaDataType* self,
                                                  BalaTypeParameter* type_param,
                                                  BalaDataType* value_type);
gchar* bala_data_type_to_prototype_string (BalaDataType* self,
                                           const gchar* override_name);
gboolean bala_data_type_is_weak (BalaDataType* self);
gchar* bala_data_type_get_type_signature (BalaDataType* self,
                                          BalaSymbol* symbol);
gboolean bala_data_type_check_type_arguments (BalaDataType* self,
                                              BalaCodeContext* context,
                                              gboolean allow_none);
BalaDataType* bala_data_type_construct (GType object_type);
BalaSymbol* bala_declaration_statement_get_declaration (BalaDeclarationStatement* self);
void bala_declaration_statement_set_declaration (BalaDeclarationStatement* self,
                                                 BalaSymbol* value);
BalaDeclarationStatement* bala_declaration_statement_new (BalaSymbol* declaration,
                                                          BalaSourceReference* source_reference);
BalaDeclarationStatement* bala_declaration_statement_construct (GType object_type,
                                                                BalaSymbol* declaration,
                                                                BalaSourceReference* source_reference);
gboolean bala_delegate_get_has_target (BalaDelegate* self);
void bala_delegate_set_has_target (BalaDelegate* self,
                                   gboolean value);
BalaDataType* bala_delegate_get_sender_type (BalaDelegate* self);
void bala_delegate_set_sender_type (BalaDelegate* self,
                                    BalaDataType* value);
BalaDelegate* bala_delegate_new (const gchar* name,
                                 BalaDataType* return_type,
                                 BalaSourceReference* source_reference,
                                 BalaComment* comment);
BalaDelegate* bala_delegate_construct (GType object_type,
                                       const gchar* name,
                                       BalaDataType* return_type,
                                       BalaSourceReference* source_reference,
                                       BalaComment* comment);
void bala_delegate_add_type_parameter (BalaDelegate* self,
                                       BalaTypeParameter* p);
BalaList* bala_delegate_get_type_parameters (BalaDelegate* self);
gboolean bala_delegate_has_type_parameters (BalaDelegate* self);
gboolean bala_delegate_matches_method (BalaDelegate* self,
                                       BalaMethod* m,
                                       BalaDataType* dt);
void bala_delegate_add_error_type (BalaDelegate* self,
                                   BalaDataType* error_type);
GType bala_delegate_destroy_field_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaDelegateDestroyField, bala_code_node_unref)
BalaDelegateDestroyField* bala_delegate_destroy_field_new (BalaSourceReference* source_reference);
BalaDelegateDestroyField* bala_delegate_destroy_field_construct (GType object_type,
                                                                 BalaSourceReference* source_reference);
GType bala_delegate_target_field_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaDelegateTargetField, bala_code_node_unref)
BalaDelegateTargetField* bala_delegate_target_field_new (BalaSourceReference* source_reference);
BalaDelegateTargetField* bala_delegate_target_field_construct (GType object_type,
                                                               BalaSourceReference* source_reference);
GType bala_delegate_type_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaDelegateType, bala_code_node_unref)
BalaDelegate* bala_delegate_type_get_delegate_symbol (BalaDelegateType* self);
gboolean bala_delegate_type_get_is_called_once (BalaDelegateType* self);
void bala_delegate_type_set_is_called_once (BalaDelegateType* self,
                                            gboolean value);
BalaDelegateType* bala_delegate_type_new (BalaDelegate* delegate_symbol);
BalaDelegateType* bala_delegate_type_construct (GType object_type,
                                                BalaDelegate* delegate_symbol);
BalaExpression* bala_delete_statement_get_expression (BalaDeleteStatement* self);
void bala_delete_statement_set_expression (BalaDeleteStatement* self,
                                           BalaExpression* value);
BalaDeleteStatement* bala_delete_statement_new (BalaExpression* expression,
                                                BalaSourceReference* source_reference);
BalaDeleteStatement* bala_delete_statement_construct (GType object_type,
                                                      BalaExpression* expression,
                                                      BalaSourceReference* source_reference);
BalaParameter* bala_destructor_get_this_parameter (BalaDestructor* self);
void bala_destructor_set_this_parameter (BalaDestructor* self,
                                         BalaParameter* value);
BalaMemberBinding bala_destructor_get_binding (BalaDestructor* self);
void bala_destructor_set_binding (BalaDestructor* self,
                                  BalaMemberBinding value);
BalaDestructor* bala_destructor_new (BalaSourceReference* source_reference);
BalaDestructor* bala_destructor_construct (GType object_type,
                                           BalaSourceReference* source_reference);
BalaBlock* bala_do_statement_get_body (BalaDoStatement* self);
void bala_do_statement_set_body (BalaDoStatement* self,
                                 BalaBlock* value);
BalaExpression* bala_do_statement_get_condition (BalaDoStatement* self);
void bala_do_statement_set_condition (BalaDoStatement* self,
                                      BalaExpression* value);
BalaDoStatement* bala_do_statement_new (BalaBlock* body,
                                        BalaExpression* condition,
                                        BalaSourceReference* source_reference);
BalaDoStatement* bala_do_statement_construct (GType object_type,
                                              BalaBlock* body,
                                              BalaExpression* condition,
                                              BalaSourceReference* source_reference);
GType bala_dynamic_method_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaDynamicMethod, bala_code_node_unref)
BalaDataType* bala_dynamic_method_get_dynamic_type (BalaDynamicMethod* self);
void bala_dynamic_method_set_dynamic_type (BalaDynamicMethod* self,
                                           BalaDataType* value);
BalaMethodCall* bala_dynamic_method_get_invocation (BalaDynamicMethod* self);
void bala_dynamic_method_set_invocation (BalaDynamicMethod* self,
                                         BalaMethodCall* value);
BalaDynamicMethod* bala_dynamic_method_new (BalaDataType* dynamic_type,
                                            const gchar* name,
                                            BalaDataType* return_type,
                                            BalaSourceReference* source_reference,
                                            BalaComment* comment);
BalaDynamicMethod* bala_dynamic_method_construct (GType object_type,
                                                  BalaDataType* dynamic_type,
                                                  const gchar* name,
                                                  BalaDataType* return_type,
                                                  BalaSourceReference* source_reference,
                                                  BalaComment* comment);
GType bala_dynamic_property_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaDynamicProperty, bala_code_node_unref)
BalaDataType* bala_dynamic_property_get_dynamic_type (BalaDynamicProperty* self);
void bala_dynamic_property_set_dynamic_type (BalaDynamicProperty* self,
                                             BalaDataType* value);
BalaDynamicProperty* bala_dynamic_property_new (BalaDataType* dynamic_type,
                                                const gchar* name,
                                                BalaSourceReference* source_reference,
                                                BalaComment* comment);
BalaDynamicProperty* bala_dynamic_property_construct (GType object_type,
                                                      BalaDataType* dynamic_type,
                                                      const gchar* name,
                                                      BalaSourceReference* source_reference,
                                                      BalaComment* comment);
GType bala_dynamic_signal_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaDynamicSignal, bala_code_node_unref)
BalaDataType* bala_dynamic_signal_get_dynamic_type (BalaDynamicSignal* self);
void bala_dynamic_signal_set_dynamic_type (BalaDynamicSignal* self,
                                           BalaDataType* value);
BalaExpression* bala_dynamic_signal_get_handler (BalaDynamicSignal* self);
void bala_dynamic_signal_set_handler (BalaDynamicSignal* self,
                                      BalaExpression* value);
BalaDynamicSignal* bala_dynamic_signal_new (BalaDataType* dynamic_type,
                                            const gchar* name,
                                            BalaDataType* return_type,
                                            BalaSourceReference* source_reference,
                                            BalaComment* comment);
BalaDynamicSignal* bala_dynamic_signal_construct (GType object_type,
                                                  BalaDataType* dynamic_type,
                                                  const gchar* name,
                                                  BalaDataType* return_type,
                                                  BalaSourceReference* source_reference,
                                                  BalaComment* comment);
BalaExpression* bala_element_access_get_container (BalaElementAccess* self);
void bala_element_access_set_container (BalaElementAccess* self,
                                        BalaExpression* value);
void bala_element_access_append_index (BalaElementAccess* self,
                                       BalaExpression* index);
BalaList* bala_element_access_get_indices (BalaElementAccess* self);
BalaElementAccess* bala_element_access_new (BalaExpression* container,
                                            BalaSourceReference* source_reference);
BalaElementAccess* bala_element_access_construct (GType object_type,
                                                  BalaExpression* container,
                                                  BalaSourceReference* source_reference);
BalaEmptyStatement* bala_empty_statement_new (BalaSourceReference* source);
BalaEmptyStatement* bala_empty_statement_construct (GType object_type,
                                                    BalaSourceReference* source);
gboolean bala_enum_get_is_flags (BalaEnum* self);
BalaEnum* bala_enum_new (const gchar* name,
                         BalaSourceReference* source_reference,
                         BalaComment* comment);
BalaEnum* bala_enum_construct (GType object_type,
                               const gchar* name,
                               BalaSourceReference* source_reference,
                               BalaComment* comment);
void bala_enum_add_value (BalaEnum* self,
                          BalaEnumValue* value);
BalaList* bala_enum_get_values (BalaEnum* self);
BalaList* bala_enum_get_methods (BalaEnum* self);
BalaList* bala_enum_get_constants (BalaEnum* self);
const gchar* bala_enum_value_get_nick (BalaEnumValue* self);
BalaEnumValue* bala_enum_value_new (const gchar* name,
                                    BalaExpression* value,
                                    BalaSourceReference* source_reference,
                                    BalaComment* comment);
BalaEnumValue* bala_enum_value_construct (GType object_type,
                                          const gchar* name,
                                          BalaExpression* value,
                                          BalaSourceReference* source_reference,
                                          BalaComment* comment);
GType bala_enum_value_type_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaEnumValueType, bala_code_node_unref)
BalaEnumValueType* bala_enum_value_type_new (BalaEnum* type_symbol);
BalaEnumValueType* bala_enum_value_type_construct (GType object_type,
                                                   BalaEnum* type_symbol);
BalaMethod* bala_enum_value_type_get_to_string_method (BalaEnumValueType* self);
BalaExpression* bala_error_code_get_value (BalaErrorCode* self);
void bala_error_code_set_value (BalaErrorCode* self,
                                BalaExpression* value);
BalaConstant* bala_error_code_get_code (BalaErrorCode* self);
BalaErrorCode* bala_error_code_new (const gchar* name,
                                    BalaSourceReference* source_reference,
                                    BalaComment* comment);
BalaErrorCode* bala_error_code_construct (GType object_type,
                                          const gchar* name,
                                          BalaSourceReference* source_reference,
                                          BalaComment* comment);
BalaErrorCode* bala_error_code_new_with_value (const gchar* name,
                                               BalaExpression* value,
                                               BalaSourceReference* source_reference);
BalaErrorCode* bala_error_code_construct_with_value (GType object_type,
                                                     const gchar* name,
                                                     BalaExpression* value,
                                                     BalaSourceReference* source_reference);
BalaErrorDomain* bala_error_domain_new (const gchar* name,
                                        BalaSourceReference* source_reference,
                                        BalaComment* comment);
BalaErrorDomain* bala_error_domain_construct (GType object_type,
                                              const gchar* name,
                                              BalaSourceReference* source_reference,
                                              BalaComment* comment);
void bala_error_domain_add_code (BalaErrorDomain* self,
                                 BalaErrorCode* ecode);
BalaList* bala_error_domain_get_codes (BalaErrorDomain* self);
BalaList* bala_error_domain_get_methods (BalaErrorDomain* self);
GType bala_error_type_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaErrorType, bala_code_node_unref)
BalaErrorDomain* bala_error_type_get_error_domain (BalaErrorType* self);
BalaErrorCode* bala_error_type_get_error_code (BalaErrorType* self);
void bala_error_type_set_error_code (BalaErrorType* self,
                                     BalaErrorCode* value);
gboolean bala_error_type_get_dynamic_error (BalaErrorType* self);
void bala_error_type_set_dynamic_error (BalaErrorType* self,
                                        gboolean value);
BalaErrorType* bala_error_type_new (BalaErrorDomain* error_domain,
                                    BalaErrorCode* error_code,
                                    BalaSourceReference* source_reference);
BalaErrorType* bala_error_type_construct (GType object_type,
                                          BalaErrorDomain* error_domain,
                                          BalaErrorCode* error_code,
                                          BalaSourceReference* source_reference);
BalaDataType* bala_expression_get_value_type (BalaExpression* self);
void bala_expression_set_value_type (BalaExpression* self,
                                     BalaDataType* value);
BalaDataType* bala_expression_get_formal_value_type (BalaExpression* self);
void bala_expression_set_formal_value_type (BalaExpression* self,
                                            BalaDataType* value);
BalaDataType* bala_expression_get_target_type (BalaExpression* self);
void bala_expression_set_target_type (BalaExpression* self,
                                      BalaDataType* value);
BalaDataType* bala_expression_get_formal_target_type (BalaExpression* self);
void bala_expression_set_formal_target_type (BalaExpression* self,
                                             BalaDataType* value);
BalaSymbol* bala_expression_get_symbol_reference (BalaExpression* self);
void bala_expression_set_symbol_reference (BalaExpression* self,
                                           BalaSymbol* value);
gboolean bala_expression_get_lvalue (BalaExpression* self);
void bala_expression_set_lvalue (BalaExpression* self,
                                 gboolean value);
BalaTargetValue* bala_expression_get_target_value (BalaExpression* self);
void bala_expression_set_target_value (BalaExpression* self,
                                       BalaTargetValue* value);
gboolean bala_expression_is_constant (BalaExpression* self);
gboolean bala_expression_is_pure (BalaExpression* self);
gboolean bala_expression_is_non_null (BalaExpression* self);
gboolean bala_expression_is_accessible (BalaExpression* self,
                                        BalaSymbol* sym);
BalaStatement* bala_expression_get_parent_statement (BalaExpression* self);
void bala_expression_insert_statement (BalaExpression* self,
                                       BalaBlock* block,
                                       BalaStatement* stmt);
BalaExpression* bala_expression_construct (GType object_type);
BalaExpression* bala_expression_statement_get_expression (BalaExpressionStatement* self);
void bala_expression_statement_set_expression (BalaExpressionStatement* self,
                                               BalaExpression* value);
BalaExpressionStatement* bala_expression_statement_new (BalaExpression* expression,
                                                        BalaSourceReference* source_reference);
BalaExpressionStatement* bala_expression_statement_construct (GType object_type,
                                                              BalaExpression* expression,
                                                              BalaSourceReference* source_reference);
BalaMemberBinding bala_field_get_binding (BalaField* self);
void bala_field_set_binding (BalaField* self,
                             BalaMemberBinding value);
gboolean bala_field_get_is_volatile (BalaField* self);
void bala_field_set_is_volatile (BalaField* self,
                                 gboolean value);
BalaField* bala_field_new (const gchar* name,
                           BalaDataType* variable_type,
                           BalaExpression* initializer,
                           BalaSourceReference* source_reference,
                           BalaComment* comment);
BalaField* bala_field_construct (GType object_type,
                                 const gchar* name,
                                 BalaDataType* variable_type,
                                 BalaExpression* initializer,
                                 BalaSourceReference* source_reference,
                                 BalaComment* comment);
GType bala_field_prototype_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaFieldPrototype, bala_code_node_unref)
BalaField* bala_field_prototype_get_field_symbol (BalaFieldPrototype* self);
BalaFieldPrototype* bala_field_prototype_new (BalaField* field_symbol);
BalaFieldPrototype* bala_field_prototype_construct (GType object_type,
                                                    BalaField* field_symbol);
GType bala_floating_type_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaFloatingType, bala_code_node_unref)
BalaFloatingType* bala_floating_type_new (BalaStruct* type_symbol);
BalaFloatingType* bala_floating_type_construct (GType object_type,
                                                BalaStruct* type_symbol);
BalaFlowAnalyzer* bala_flow_analyzer_new (void);
BalaFlowAnalyzer* bala_flow_analyzer_construct (GType object_type);
void bala_flow_analyzer_analyze (BalaFlowAnalyzer* self,
                                 BalaCodeContext* context);
BalaDataType* bala_foreach_statement_get_type_reference (BalaForeachStatement* self);
void bala_foreach_statement_set_type_reference (BalaForeachStatement* self,
                                                BalaDataType* value);
const gchar* bala_foreach_statement_get_variable_name (BalaForeachStatement* self);
void bala_foreach_statement_set_variable_name (BalaForeachStatement* self,
                                               const gchar* value);
BalaExpression* bala_foreach_statement_get_collection (BalaForeachStatement* self);
void bala_foreach_statement_set_collection (BalaForeachStatement* self,
                                            BalaExpression* value);
BalaBlock* bala_foreach_statement_get_body (BalaForeachStatement* self);
void bala_foreach_statement_set_body (BalaForeachStatement* self,
                                      BalaBlock* value);
gboolean bala_foreach_statement_get_use_iterator (BalaForeachStatement* self);
BalaLocalVariable* bala_foreach_statement_get_element_variable (BalaForeachStatement* self);
void bala_foreach_statement_set_element_variable (BalaForeachStatement* self,
                                                  BalaLocalVariable* value);
BalaLocalVariable* bala_foreach_statement_get_collection_variable (BalaForeachStatement* self);
void bala_foreach_statement_set_collection_variable (BalaForeachStatement* self,
                                                     BalaLocalVariable* value);
BalaLocalVariable* bala_foreach_statement_get_iterator_variable (BalaForeachStatement* self);
void bala_foreach_statement_set_iterator_variable (BalaForeachStatement* self,
                                                   BalaLocalVariable* value);
BalaForeachStatement* bala_foreach_statement_new (BalaDataType* type_reference,
                                                  const gchar* variable_name,
                                                  BalaExpression* collection,
                                                  BalaBlock* body,
                                                  BalaSourceReference* source_reference);
BalaForeachStatement* bala_foreach_statement_construct (GType object_type,
                                                        BalaDataType* type_reference,
                                                        const gchar* variable_name,
                                                        BalaExpression* collection,
                                                        BalaBlock* body,
                                                        BalaSourceReference* source_reference);
BalaExpression* bala_for_statement_get_condition (BalaForStatement* self);
void bala_for_statement_set_condition (BalaForStatement* self,
                                       BalaExpression* value);
BalaBlock* bala_for_statement_get_body (BalaForStatement* self);
void bala_for_statement_set_body (BalaForStatement* self,
                                  BalaBlock* value);
BalaForStatement* bala_for_statement_new (BalaExpression* condition,
                                          BalaBlock* body,
                                          BalaSourceReference* source_reference);
BalaForStatement* bala_for_statement_construct (GType object_type,
                                                BalaExpression* condition,
                                                BalaBlock* body,
                                                BalaSourceReference* source_reference);
void bala_for_statement_add_initializer (BalaForStatement* self,
                                         BalaExpression* init);
BalaList* bala_for_statement_get_initializer (BalaForStatement* self);
void bala_for_statement_add_iterator (BalaForStatement* self,
                                      BalaExpression* iter);
BalaList* bala_for_statement_get_iterator (BalaForStatement* self);
GType bala_gir_parser_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaGirParser, bala_code_visitor_unref)
void bala_gir_parser_parse (BalaGirParser* self,
                            BalaCodeContext* context);
void bala_gir_parser_parse_file (BalaGirParser* self,
                                 BalaSourceFile* source_file);
BalaGirParser* bala_gir_parser_new (void);
BalaGirParser* bala_gir_parser_construct (GType object_type);
GType bala_generic_destroy_field_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaGenericDestroyField, bala_code_node_unref)
BalaGenericDestroyField* bala_generic_destroy_field_new (BalaSourceReference* source_reference);
BalaGenericDestroyField* bala_generic_destroy_field_construct (GType object_type,
                                                               BalaSourceReference* source_reference);
GType bala_generic_dup_field_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaGenericDupField, bala_code_node_unref)
BalaGenericDupField* bala_generic_dup_field_new (BalaSourceReference* source_reference);
BalaGenericDupField* bala_generic_dup_field_construct (GType object_type,
                                                       BalaSourceReference* source_reference);
GType bala_generic_type_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaGenericType, bala_code_node_unref)
BalaTypeParameter* bala_generic_type_get_type_parameter (BalaGenericType* self);
void bala_generic_type_set_type_parameter (BalaGenericType* self,
                                           BalaTypeParameter* value);
BalaGenericType* bala_generic_type_new (BalaTypeParameter* type_parameter);
BalaGenericType* bala_generic_type_construct (GType object_type,
                                              BalaTypeParameter* type_parameter);
GType bala_genie_parser_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaGenieParser, bala_code_visitor_unref)
BalaGenieParser* bala_genie_parser_new (void);
BalaGenieParser* bala_genie_parser_construct (GType object_type);
void bala_genie_parser_parse (BalaGenieParser* self,
                              BalaCodeContext* context);
void bala_genie_parser_parse_file (BalaGenieParser* self,
                                   BalaSourceFile* source_file);
gpointer bala_genie_scanner_ref (gpointer instance);
void bala_genie_scanner_unref (gpointer instance);
GParamSpec* bala_genie_param_spec_scanner (const gchar* name,
                                           const gchar* nick,
                                           const gchar* blurb,
                                           GType object_type,
                                           GParamFlags flags);
void bala_genie_value_set_scanner (GValue* value,
                                   gpointer v_object);
void bala_genie_value_take_scanner (GValue* value,
                                    gpointer v_object);
gpointer bala_genie_value_get_scanner (const GValue* value);
GType bala_genie_scanner_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaGenieScanner, bala_genie_scanner_unref)
BalaSourceFile* bala_genie_scanner_get_source_file (BalaGenieScanner* self);
gint bala_genie_scanner_get_indent_spaces (BalaGenieScanner* self);
void bala_genie_scanner_set_indent_spaces (BalaGenieScanner* self,
                                           gint value);
BalaGenieScanner* bala_genie_scanner_new (BalaSourceFile* source_file);
BalaGenieScanner* bala_genie_scanner_construct (GType object_type,
                                                BalaSourceFile* source_file);
GType bala_source_location_get_type (void) G_GNUC_CONST;
BalaSourceLocation* bala_source_location_dup (const BalaSourceLocation* self);
void bala_source_location_free (BalaSourceLocation* self);
GType bala_genie_token_type_get_type (void) G_GNUC_CONST;
BalaGenieTokenType bala_genie_scanner_read_regex_token (BalaGenieScanner* self,
                                                        BalaSourceLocation* token_begin,
                                                        BalaSourceLocation* token_end);
void bala_genie_scanner_seek (BalaGenieScanner* self,
                              BalaSourceLocation* location);
BalaGenieTokenType bala_genie_scanner_get_identifier_or_keyword (gchar* begin,
                                                                 gint len);
BalaGenieTokenType bala_genie_scanner_read_template_token (BalaGenieScanner* self,
                                                           BalaSourceLocation* token_begin,
                                                           BalaSourceLocation* token_end);
BalaGenieTokenType bala_genie_scanner_read_token (BalaGenieScanner* self,
                                                  BalaSourceLocation* token_begin,
                                                  BalaSourceLocation* token_end);
void bala_genie_scanner_parse_file_comments (BalaGenieScanner* self);
BalaComment* bala_genie_scanner_pop_comment (BalaGenieScanner* self);
const gchar* bala_genie_token_type_to_string (BalaGenieTokenType self);
BalaExpression* bala_if_statement_get_condition (BalaIfStatement* self);
void bala_if_statement_set_condition (BalaIfStatement* self,
                                      BalaExpression* value);
BalaBlock* bala_if_statement_get_true_statement (BalaIfStatement* self);
void bala_if_statement_set_true_statement (BalaIfStatement* self,
                                           BalaBlock* value);
BalaBlock* bala_if_statement_get_false_statement (BalaIfStatement* self);
void bala_if_statement_set_false_statement (BalaIfStatement* self,
                                            BalaBlock* value);
BalaIfStatement* bala_if_statement_new (BalaExpression* cond,
                                        BalaBlock* true_stmt,
                                        BalaBlock* false_stmt,
                                        BalaSourceReference* source);
BalaIfStatement* bala_if_statement_construct (GType object_type,
                                              BalaExpression* cond,
                                              BalaBlock* true_stmt,
                                              BalaBlock* false_stmt,
                                              BalaSourceReference* source);
void bala_initializer_list_append (BalaInitializerList* self,
                                   BalaExpression* expr);
BalaList* bala_initializer_list_get_initializers (BalaInitializerList* self);
gint bala_initializer_list_get_size (BalaInitializerList* self);
BalaInitializerList* bala_initializer_list_new (BalaSourceReference* source_reference);
BalaInitializerList* bala_initializer_list_construct (GType object_type,
                                                      BalaSourceReference* source_reference);
const gchar* bala_integer_literal_get_value (BalaIntegerLiteral* self);
void bala_integer_literal_set_value (BalaIntegerLiteral* self,
                                     const gchar* value);
const gchar* bala_integer_literal_get_type_suffix (BalaIntegerLiteral* self);
void bala_integer_literal_set_type_suffix (BalaIntegerLiteral* self,
                                           const gchar* value);
BalaIntegerLiteral* bala_integer_literal_new (const gchar* i,
                                              BalaSourceReference* source);
BalaIntegerLiteral* bala_integer_literal_construct (GType object_type,
                                                    const gchar* i,
                                                    BalaSourceReference* source);
GType bala_integer_type_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaIntegerType, bala_code_node_unref)
BalaIntegerType* bala_integer_type_new (BalaStruct* type_symbol,
                                        const gchar* literal_value,
                                        const gchar* literal_type_name);
BalaIntegerType* bala_integer_type_construct (GType object_type,
                                              BalaStruct* type_symbol,
                                              const gchar* literal_value,
                                              const gchar* literal_type_name);
BalaInterface* bala_interface_new (const gchar* name,
                                   BalaSourceReference* source_reference,
                                   BalaComment* comment);
BalaInterface* bala_interface_construct (GType object_type,
                                         const gchar* name,
                                         BalaSourceReference* source_reference,
                                         BalaComment* comment);
void bala_interface_add_prerequisite (BalaInterface* self,
                                      BalaDataType* type);
BalaList* bala_interface_get_prerequisites (BalaInterface* self);
BalaList* bala_interface_get_virtuals (BalaInterface* self);
GType bala_interface_type_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaInterfaceType, bala_code_node_unref)
BalaInterface* bala_interface_type_get_interface_symbol (BalaInterfaceType* self);
BalaInterfaceType* bala_interface_type_new (BalaInterface* interface_symbol);
BalaInterfaceType* bala_interface_type_construct (GType object_type,
                                                  BalaInterface* interface_symbol);
GType bala_invalid_type_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaInvalidType, bala_code_node_unref)
BalaInvalidType* bala_invalid_type_new (void);
BalaInvalidType* bala_invalid_type_construct (GType object_type);
BalaExpression* bala_lambda_expression_get_expression_body (BalaLambdaExpression* self);
void bala_lambda_expression_set_expression_body (BalaLambdaExpression* self,
                                                 BalaExpression* value);
BalaBlock* bala_lambda_expression_get_statement_body (BalaLambdaExpression* self);
void bala_lambda_expression_set_statement_body (BalaLambdaExpression* self,
                                                BalaBlock* value);
BalaMethod* bala_lambda_expression_get_method (BalaLambdaExpression* self);
void bala_lambda_expression_set_method (BalaLambdaExpression* self,
                                        BalaMethod* value);
BalaLambdaExpression* bala_lambda_expression_new (BalaExpression* expression_body,
                                                  BalaSourceReference* source_reference);
BalaLambdaExpression* bala_lambda_expression_construct (GType object_type,
                                                        BalaExpression* expression_body,
                                                        BalaSourceReference* source_reference);
BalaLambdaExpression* bala_lambda_expression_new_with_statement_body (BalaBlock* statement_body,
                                                                      BalaSourceReference* source_reference);
BalaLambdaExpression* bala_lambda_expression_construct_with_statement_body (GType object_type,
                                                                            BalaBlock* statement_body,
                                                                            BalaSourceReference* source_reference);
void bala_lambda_expression_add_parameter (BalaLambdaExpression* self,
                                           BalaParameter* param);
BalaList* bala_lambda_expression_get_parameters (BalaLambdaExpression* self);
BalaLiteral* bala_literal_construct (GType object_type);
gboolean bala_local_variable_get_is_result (BalaLocalVariable* self);
void bala_local_variable_set_is_result (BalaLocalVariable* self,
                                        gboolean value);
gboolean bala_local_variable_get_captured (BalaLocalVariable* self);
void bala_local_variable_set_captured (BalaLocalVariable* self,
                                       gboolean value);
gboolean bala_local_variable_get_init (BalaLocalVariable* self);
void bala_local_variable_set_init (BalaLocalVariable* self,
                                   gboolean value);
BalaLocalVariable* bala_local_variable_new (BalaDataType* variable_type,
                                            const gchar* name,
                                            BalaExpression* initializer,
                                            BalaSourceReference* source_reference);
BalaLocalVariable* bala_local_variable_construct (GType object_type,
                                                  BalaDataType* variable_type,
                                                  const gchar* name,
                                                  BalaExpression* initializer,
                                                  BalaSourceReference* source_reference);
gboolean bala_lockable_get_lock_used (BalaLockable* self);
void bala_lockable_set_lock_used (BalaLockable* self,
                                  gboolean value);
BalaExpression* bala_lock_statement_get_resource (BalaLockStatement* self);
void bala_lock_statement_set_resource (BalaLockStatement* self,
                                       BalaExpression* value);
BalaBlock* bala_lock_statement_get_body (BalaLockStatement* self);
void bala_lock_statement_set_body (BalaLockStatement* self,
                                   BalaBlock* value);
BalaLockStatement* bala_lock_statement_new (BalaExpression* resource,
                                            BalaBlock* body,
                                            BalaSourceReference* source_reference);
BalaLockStatement* bala_lock_statement_construct (GType object_type,
                                                  BalaExpression* resource,
                                                  BalaBlock* body,
                                                  BalaSourceReference* source_reference);
BalaBlock* bala_loop_get_body (BalaLoop* self);
void bala_loop_set_body (BalaLoop* self,
                         BalaBlock* value);
BalaLoop* bala_loop_new (BalaBlock* body,
                         BalaSourceReference* source_reference);
BalaLoop* bala_loop_construct (GType object_type,
                               BalaBlock* body,
                               BalaSourceReference* source_reference);
gpointer bala_markup_reader_ref (gpointer instance);
void bala_markup_reader_unref (gpointer instance);
GParamSpec* bala_param_spec_markup_reader (const gchar* name,
                                           const gchar* nick,
                                           const gchar* blurb,
                                           GType object_type,
                                           GParamFlags flags);
void bala_value_set_markup_reader (GValue* value,
                                   gpointer v_object);
void bala_value_take_markup_reader (GValue* value,
                                    gpointer v_object);
gpointer bala_value_get_markup_reader (const GValue* value);
GType bala_markup_reader_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaMarkupReader, bala_markup_reader_unref)
const gchar* bala_markup_reader_get_filename (BalaMarkupReader* self);
const gchar* bala_markup_reader_get_name (BalaMarkupReader* self);
const gchar* bala_markup_reader_get_content (BalaMarkupReader* self);
BalaMarkupReader* bala_markup_reader_new (const gchar* filename);
BalaMarkupReader* bala_markup_reader_construct (GType object_type,
                                                const gchar* filename);
BalaMarkupReader* bala_markup_reader_new_from_string (const gchar* filename,
                                                      const gchar* content);
BalaMarkupReader* bala_markup_reader_construct_from_string (GType object_type,
                                                            const gchar* filename,
                                                            const gchar* content);
gchar* bala_markup_reader_get_attribute (BalaMarkupReader* self,
                                         const gchar* attr);
BalaMap* bala_markup_reader_get_attributes (BalaMarkupReader* self);
GType bala_markup_token_type_get_type (void) G_GNUC_CONST;
BalaMarkupTokenType bala_markup_reader_read_token (BalaMarkupReader* self,
                                                   BalaSourceLocation* token_begin,
                                                   BalaSourceLocation* token_end);
const gchar* bala_markup_token_type_to_string (BalaMarkupTokenType self);
BalaExpression* bala_member_access_get_inner (BalaMemberAccess* self);
void bala_member_access_set_inner (BalaMemberAccess* self,
                                   BalaExpression* value);
const gchar* bala_member_access_get_member_name (BalaMemberAccess* self);
void bala_member_access_set_member_name (BalaMemberAccess* self,
                                         const gchar* value);
gboolean bala_member_access_get_pointer_member_access (BalaMemberAccess* self);
void bala_member_access_set_pointer_member_access (BalaMemberAccess* self,
                                                   gboolean value);
gboolean bala_member_access_get_prototype_access (BalaMemberAccess* self);
void bala_member_access_set_prototype_access (BalaMemberAccess* self,
                                              gboolean value);
gboolean bala_member_access_get_tainted_access (BalaMemberAccess* self);
void bala_member_access_set_tainted_access (BalaMemberAccess* self,
                                            gboolean value);
gboolean bala_member_access_get_creation_member (BalaMemberAccess* self);
void bala_member_access_set_creation_member (BalaMemberAccess* self,
                                             gboolean value);
gboolean bala_member_access_get_qualified (BalaMemberAccess* self);
void bala_member_access_set_qualified (BalaMemberAccess* self,
                                       gboolean value);
BalaMemberAccess* bala_member_access_new (BalaExpression* inner,
                                          const gchar* member_name,
                                          BalaSourceReference* source_reference);
BalaMemberAccess* bala_member_access_construct (GType object_type,
                                                BalaExpression* inner,
                                                const gchar* member_name,
                                                BalaSourceReference* source_reference);
BalaMemberAccess* bala_member_access_new_simple (const gchar* member_name,
                                                 BalaSourceReference* source_reference);
BalaMemberAccess* bala_member_access_construct_simple (GType object_type,
                                                       const gchar* member_name,
                                                       BalaSourceReference* source_reference);
BalaMemberAccess* bala_member_access_new_pointer (BalaExpression* inner,
                                                  const gchar* member_name,
                                                  BalaSourceReference* source_reference);
BalaMemberAccess* bala_member_access_construct_pointer (GType object_type,
                                                        BalaExpression* inner,
                                                        const gchar* member_name,
                                                        BalaSourceReference* source_reference);
void bala_member_access_add_type_argument (BalaMemberAccess* self,
                                           BalaDataType* arg);
BalaList* bala_member_access_get_type_arguments (BalaMemberAccess* self);
void bala_member_access_check_lvalue_access (BalaMemberAccess* self);
GType bala_member_initializer_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaMemberInitializer, bala_code_node_unref)
const gchar* bala_member_initializer_get_name (BalaMemberInitializer* self);
void bala_member_initializer_set_name (BalaMemberInitializer* self,
                                       const gchar* value);
BalaExpression* bala_member_initializer_get_initializer (BalaMemberInitializer* self);
void bala_member_initializer_set_initializer (BalaMemberInitializer* self,
                                              BalaExpression* value);
BalaSymbol* bala_member_initializer_get_symbol_reference (BalaMemberInitializer* self);
void bala_member_initializer_set_symbol_reference (BalaMemberInitializer* self,
                                                   BalaSymbol* value);
BalaMemberInitializer* bala_member_initializer_new (const gchar* name,
                                                    BalaExpression* initializer,
                                                    BalaSourceReference* source_reference);
BalaMemberInitializer* bala_member_initializer_construct (GType object_type,
                                                          const gchar* name,
                                                          BalaExpression* initializer,
                                                          BalaSourceReference* source_reference);
BalaMemberBinding bala_method_get_binding (BalaMethod* self);
void bala_method_set_binding (BalaMethod* self,
                              BalaMemberBinding value);
gboolean bala_method_get_is_abstract (BalaMethod* self);
void bala_method_set_is_abstract (BalaMethod* self,
                                  gboolean value);
gboolean bala_method_get_is_virtual (BalaMethod* self);
void bala_method_set_is_virtual (BalaMethod* self,
                                 gboolean value);
gboolean bala_method_get_overrides (BalaMethod* self);
void bala_method_set_overrides (BalaMethod* self,
                                gboolean value);
gboolean bala_method_get_is_inline (BalaMethod* self);
void bala_method_set_is_inline (BalaMethod* self,
                                gboolean value);
gboolean bala_method_get_returns_floating_reference (BalaMethod* self);
void bala_method_set_returns_floating_reference (BalaMethod* self,
                                                 gboolean value);
gboolean bala_method_get_returns_modified_pointer (BalaMethod* self);
void bala_method_set_returns_modified_pointer (BalaMethod* self,
                                               gboolean value);
BalaMethod* bala_method_get_base_method (BalaMethod* self);
BalaMethod* bala_method_get_base_interface_method (BalaMethod* self);
BalaDataType* bala_method_get_base_interface_type (BalaMethod* self);
void bala_method_set_base_interface_type (BalaMethod* self,
                                          BalaDataType* value);
gboolean bala_method_get_entry_point (BalaMethod* self);
BalaParameter* bala_method_get_this_parameter (BalaMethod* self);
void bala_method_set_this_parameter (BalaMethod* self,
                                     BalaParameter* value);
gboolean bala_method_get_printf_format (BalaMethod* self);
void bala_method_set_printf_format (BalaMethod* self,
                                    gboolean value);
gboolean bala_method_get_scanf_format (BalaMethod* self);
void bala_method_set_scanf_format (BalaMethod* self,
                                   gboolean value);
gboolean bala_method_get_has_construct_function (BalaMethod* self);
void bala_method_set_has_construct_function (BalaMethod* self,
                                             gboolean value);
BalaLocalVariable* bala_method_get_params_array_var (BalaMethod* self);
void bala_method_set_params_array_var (BalaMethod* self,
                                       BalaLocalVariable* value);
BalaSignal* bala_method_get_signal_reference (BalaMethod* self);
void bala_method_set_signal_reference (BalaMethod* self,
                                       BalaSignal* value);
gboolean bala_method_get_closure (BalaMethod* self);
void bala_method_set_closure (BalaMethod* self,
                              gboolean value);
gboolean bala_method_get_coroutine (BalaMethod* self);
void bala_method_set_coroutine (BalaMethod* self,
                                gboolean value);
gboolean bala_method_get_is_async_callback (BalaMethod* self);
void bala_method_set_is_async_callback (BalaMethod* self,
                                        gboolean value);
BalaMethod* bala_method_new (const gchar* name,
                             BalaDataType* return_type,
                             BalaSourceReference* source_reference,
                             BalaComment* comment);
BalaMethod* bala_method_construct (GType object_type,
                                   const gchar* name,
                                   BalaDataType* return_type,
                                   BalaSourceReference* source_reference,
                                   BalaComment* comment);
void bala_method_clear_parameters (BalaMethod* self);
gboolean bala_method_is_variadic (BalaMethod* self);
gboolean bala_method_compatible (BalaMethod* self,
                                 BalaMethod* base_method,
                                 gchar* * invalid_match);
gboolean bala_method_compatible_no_error (BalaMethod* self,
                                          BalaMethod* base_method);
void bala_method_add_type_parameter (BalaMethod* self,
                                     BalaTypeParameter* p);
BalaList* bala_method_get_type_parameters (BalaMethod* self);
gint bala_method_get_type_parameter_index (BalaMethod* self,
                                           const gchar* name);
gboolean bala_method_has_type_parameters (BalaMethod* self);
void bala_method_add_precondition (BalaMethod* self,
                                   BalaExpression* precondition);
BalaList* bala_method_get_preconditions (BalaMethod* self);
void bala_method_add_postcondition (BalaMethod* self,
                                    BalaExpression* postcondition);
BalaList* bala_method_get_postconditions (BalaMethod* self);
void bala_method_add_error_type (BalaMethod* self,
                                 BalaDataType* error_type);
gint bala_method_get_required_arguments (BalaMethod* self);
BalaMethod* bala_method_get_end_method (BalaMethod* self);
BalaMethod* bala_method_get_callback_method (BalaMethod* self);
BalaList* bala_method_get_async_begin_parameters (BalaMethod* self);
BalaList* bala_method_get_async_end_parameters (BalaMethod* self);
void bala_method_add_captured_variable (BalaMethod* self,
                                        BalaLocalVariable* local);
void bala_method_get_captured_variables (BalaMethod* self,
                                         BalaCollection* variables);
gint bala_method_get_format_arg_index (BalaMethod* self);
gboolean bala_method_has_error_type_parameter (BalaMethod* self);
BalaExpression* bala_method_call_get_call (BalaMethodCall* self);
void bala_method_call_set_call (BalaMethodCall* self,
                                BalaExpression* value);
gboolean bala_method_call_get_is_yield_expression (BalaMethodCall* self);
void bala_method_call_set_is_yield_expression (BalaMethodCall* self,
                                               gboolean value);
gboolean bala_method_call_get_is_assert (BalaMethodCall* self);
gboolean bala_method_call_get_is_constructv_chainup (BalaMethodCall* self);
gboolean bala_method_call_get_is_chainup (BalaMethodCall* self);
BalaMethodCall* bala_method_call_new (BalaExpression* call,
                                      BalaSourceReference* source_reference);
BalaMethodCall* bala_method_call_construct (GType object_type,
                                            BalaExpression* call,
                                            BalaSourceReference* source_reference);
void bala_method_call_add_argument (BalaMethodCall* self,
                                    BalaExpression* arg);
BalaList* bala_method_call_get_argument_list (BalaMethodCall* self);
BalaStringLiteral* bala_method_call_get_format_literal (BalaMethodCall* self);
GType bala_method_type_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaMethodType, bala_code_node_unref)
BalaMethod* bala_method_type_get_method_symbol (BalaMethodType* self);
BalaMethodType* bala_method_type_new (BalaMethod* method_symbol);
BalaMethodType* bala_method_type_construct (GType object_type,
                                            BalaMethod* method_symbol);
const gchar* bala_named_argument_get_name (BalaNamedArgument* self);
void bala_named_argument_set_name (BalaNamedArgument* self,
                                   const gchar* value);
BalaExpression* bala_named_argument_get_inner (BalaNamedArgument* self);
void bala_named_argument_set_inner (BalaNamedArgument* self,
                                    BalaExpression* value);
BalaNamedArgument* bala_named_argument_new (const gchar* name,
                                            BalaExpression* inner,
                                            BalaSourceReference* source_reference);
BalaNamedArgument* bala_named_argument_construct (GType object_type,
                                                  const gchar* name,
                                                  BalaExpression* inner,
                                                  BalaSourceReference* source_reference);
BalaNamespace* bala_namespace_new (const gchar* name,
                                   BalaSourceReference* source_reference);
BalaNamespace* bala_namespace_construct (GType object_type,
                                         const gchar* name,
                                         BalaSourceReference* source_reference);
void bala_namespace_add_using_directive (BalaNamespace* self,
                                         BalaUsingDirective* ns);
void bala_namespace_add_comment (BalaNamespace* self,
                                 BalaComment* comment);
BalaList* bala_namespace_get_comments (BalaNamespace* self);
BalaList* bala_namespace_get_namespaces (BalaNamespace* self);
BalaList* bala_namespace_get_structs (BalaNamespace* self);
BalaList* bala_namespace_get_classes (BalaNamespace* self);
BalaList* bala_namespace_get_interfaces (BalaNamespace* self);
BalaList* bala_namespace_get_enums (BalaNamespace* self);
BalaList* bala_namespace_get_error_domains (BalaNamespace* self);
BalaList* bala_namespace_get_fields (BalaNamespace* self);
BalaList* bala_namespace_get_constants (BalaNamespace* self);
BalaList* bala_namespace_get_delegates (BalaNamespace* self);
BalaList* bala_namespace_get_methods (BalaNamespace* self);
BalaNullLiteral* bala_null_literal_new (BalaSourceReference* source);
BalaNullLiteral* bala_null_literal_construct (GType object_type,
                                              BalaSourceReference* source);
GType bala_null_type_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaNullType, bala_code_node_unref)
BalaNullType* bala_null_type_new (BalaSourceReference* source_reference);
BalaNullType* bala_null_type_construct (GType object_type,
                                        BalaSourceReference* source_reference);
BalaDataType* bala_object_creation_expression_get_type_reference (BalaObjectCreationExpression* self);
void bala_object_creation_expression_set_type_reference (BalaObjectCreationExpression* self,
                                                         BalaDataType* value);
BalaMemberAccess* bala_object_creation_expression_get_member_name (BalaObjectCreationExpression* self);
void bala_object_creation_expression_set_member_name (BalaObjectCreationExpression* self,
                                                      BalaMemberAccess* value);
gboolean bala_object_creation_expression_get_is_yield_expression (BalaObjectCreationExpression* self);
void bala_object_creation_expression_set_is_yield_expression (BalaObjectCreationExpression* self,
                                                              gboolean value);
gboolean bala_object_creation_expression_get_struct_creation (BalaObjectCreationExpression* self);
void bala_object_creation_expression_set_struct_creation (BalaObjectCreationExpression* self,
                                                          gboolean value);
BalaObjectCreationExpression* bala_object_creation_expression_new (BalaMemberAccess* member_name,
                                                                   BalaSourceReference* source_reference);
BalaObjectCreationExpression* bala_object_creation_expression_construct (GType object_type,
                                                                         BalaMemberAccess* member_name,
                                                                         BalaSourceReference* source_reference);
void bala_object_creation_expression_add_argument (BalaObjectCreationExpression* self,
                                                   BalaExpression* arg);
BalaList* bala_object_creation_expression_get_argument_list (BalaObjectCreationExpression* self);
void bala_object_creation_expression_add_member_initializer (BalaObjectCreationExpression* self,
                                                             BalaMemberInitializer* init);
BalaList* bala_object_creation_expression_get_object_initializer (BalaObjectCreationExpression* self);
GType bala_object_type_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaObjectType, bala_code_node_unref)
BalaObjectTypeSymbol* bala_object_type_get_object_type_symbol (BalaObjectType* self);
BalaObjectType* bala_object_type_new (BalaObjectTypeSymbol* type_symbol);
BalaObjectType* bala_object_type_construct (GType object_type,
                                            BalaObjectTypeSymbol* type_symbol);
BalaObjectTypeSymbol* bala_object_type_symbol_construct (GType object_type,
                                                         const gchar* name,
                                                         BalaSourceReference* source_reference,
                                                         BalaComment* comment);
BalaList* bala_object_type_symbol_get_members (BalaObjectTypeSymbol* self);
BalaList* bala_object_type_symbol_get_fields (BalaObjectTypeSymbol* self);
BalaList* bala_object_type_symbol_get_methods (BalaObjectTypeSymbol* self);
BalaList* bala_object_type_symbol_get_properties (BalaObjectTypeSymbol* self);
BalaList* bala_object_type_symbol_get_signals (BalaObjectTypeSymbol* self);
BalaList* bala_object_type_symbol_get_classes (BalaObjectTypeSymbol* self);
BalaList* bala_object_type_symbol_get_interfaces (BalaObjectTypeSymbol* self);
BalaList* bala_object_type_symbol_get_structs (BalaObjectTypeSymbol* self);
BalaList* bala_object_type_symbol_get_enums (BalaObjectTypeSymbol* self);
BalaList* bala_object_type_symbol_get_delegates (BalaObjectTypeSymbol* self);
BalaList* bala_object_type_symbol_get_constants (BalaObjectTypeSymbol* self);
void bala_object_type_symbol_add_type_parameter (BalaObjectTypeSymbol* self,
                                                 BalaTypeParameter* p);
BalaList* bala_object_type_symbol_get_type_parameters (BalaObjectTypeSymbol* self);
gboolean bala_object_type_symbol_has_type_parameters (BalaObjectTypeSymbol* self);
void bala_object_type_symbol_add_hidden_method (BalaObjectTypeSymbol* self,
                                                BalaMethod* m);
GType bala_parameter_direction_get_type (void) G_GNUC_CONST;
BalaParameterDirection bala_parameter_get_direction (BalaParameter* self);
void bala_parameter_set_direction (BalaParameter* self,
                                   BalaParameterDirection value);
gboolean bala_parameter_get_ellipsis (BalaParameter* self);
void bala_parameter_set_ellipsis (BalaParameter* self,
                                  gboolean value);
gboolean bala_parameter_get_params_array (BalaParameter* self);
void bala_parameter_set_params_array (BalaParameter* self,
                                      gboolean value);
gboolean bala_parameter_get_captured (BalaParameter* self);
void bala_parameter_set_captured (BalaParameter* self,
                                  gboolean value);
gboolean bala_parameter_get_format_arg (BalaParameter* self);
BalaParameter* bala_parameter_get_base_parameter (BalaParameter* self);
void bala_parameter_set_base_parameter (BalaParameter* self,
                                        BalaParameter* value);
BalaParameter* bala_parameter_new (const gchar* name,
                                   BalaDataType* variable_type,
                                   BalaSourceReference* source_reference);
BalaParameter* bala_parameter_construct (GType object_type,
                                         const gchar* name,
                                         BalaDataType* variable_type,
                                         BalaSourceReference* source_reference);
BalaParameter* bala_parameter_new_with_ellipsis (BalaSourceReference* source_reference);
BalaParameter* bala_parameter_construct_with_ellipsis (GType object_type,
                                                       BalaSourceReference* source_reference);
BalaParameter* bala_parameter_copy (BalaParameter* self);
GType bala_parser_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaParser, bala_code_visitor_unref)
BalaParser* bala_parser_new (void);
BalaParser* bala_parser_construct (GType object_type);
void bala_parser_parse (BalaParser* self,
                        BalaCodeContext* context);
void bala_parser_parse_file (BalaParser* self,
                             BalaSourceFile* source_file);
GQuark bala_parse_error_quark (void);
BalaVariable* bala_phi_function_get_original_variable (BalaPhiFunction* self);
BalaList* bala_phi_function_get_operands (BalaPhiFunction* self);
BalaPhiFunction* bala_phi_function_new (BalaVariable* variable,
                                        gint num_of_ops);
BalaPhiFunction* bala_phi_function_construct (GType object_type,
                                              BalaVariable* variable,
                                              gint num_of_ops);
BalaExpression* bala_pointer_indirection_get_inner (BalaPointerIndirection* self);
void bala_pointer_indirection_set_inner (BalaPointerIndirection* self,
                                         BalaExpression* value);
BalaPointerIndirection* bala_pointer_indirection_new (BalaExpression* inner,
                                                      BalaSourceReference* source_reference);
BalaPointerIndirection* bala_pointer_indirection_construct (GType object_type,
                                                            BalaExpression* inner,
                                                            BalaSourceReference* source_reference);
GType bala_pointer_type_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaPointerType, bala_code_node_unref)
BalaDataType* bala_pointer_type_get_base_type (BalaPointerType* self);
void bala_pointer_type_set_base_type (BalaPointerType* self,
                                      BalaDataType* value);
BalaPointerType* bala_pointer_type_new (BalaDataType* base_type,
                                        BalaSourceReference* source_reference);
BalaPointerType* bala_pointer_type_construct (GType object_type,
                                              BalaDataType* base_type,
                                              BalaSourceReference* source_reference);
BalaExpression* bala_postfix_expression_get_inner (BalaPostfixExpression* self);
void bala_postfix_expression_set_inner (BalaPostfixExpression* self,
                                        BalaExpression* value);
gboolean bala_postfix_expression_get_increment (BalaPostfixExpression* self);
void bala_postfix_expression_set_increment (BalaPostfixExpression* self,
                                            gboolean value);
BalaPostfixExpression* bala_postfix_expression_new (BalaExpression* _inner,
                                                    gboolean inc,
                                                    BalaSourceReference* source);
BalaPostfixExpression* bala_postfix_expression_construct (GType object_type,
                                                          BalaExpression* _inner,
                                                          gboolean inc,
                                                          BalaSourceReference* source);
BalaProperty* bala_property_accessor_get_prop (BalaPropertyAccessor* self);
BalaDataType* bala_property_accessor_get_value_type (BalaPropertyAccessor* self);
gboolean bala_property_accessor_get_readable (BalaPropertyAccessor* self);
gboolean bala_property_accessor_get_writable (BalaPropertyAccessor* self);
gboolean bala_property_accessor_get_construction (BalaPropertyAccessor* self);
gboolean bala_property_accessor_get_automatic_body (BalaPropertyAccessor* self);
BalaParameter* bala_property_accessor_get_value_parameter (BalaPropertyAccessor* self);
BalaPropertyAccessor* bala_property_accessor_new (gboolean readable,
                                                  gboolean writable,
                                                  gboolean construction,
                                                  BalaDataType* value_type,
                                                  BalaBlock* body,
                                                  BalaSourceReference* source_reference,
                                                  BalaComment* comment);
BalaPropertyAccessor* bala_property_accessor_construct (GType object_type,
                                                        gboolean readable,
                                                        gboolean writable,
                                                        gboolean construction,
                                                        BalaDataType* value_type,
                                                        BalaBlock* body,
                                                        BalaSourceReference* source_reference,
                                                        BalaComment* comment);
BalaMethod* bala_property_accessor_get_method (BalaPropertyAccessor* self);
BalaDataType* bala_property_get_property_type (BalaProperty* self);
void bala_property_set_property_type (BalaProperty* self,
                                      BalaDataType* value);
BalaPropertyAccessor* bala_property_get_get_accessor (BalaProperty* self);
void bala_property_set_get_accessor (BalaProperty* self,
                                     BalaPropertyAccessor* value);
BalaPropertyAccessor* bala_property_get_set_accessor (BalaProperty* self);
void bala_property_set_set_accessor (BalaProperty* self,
                                     BalaPropertyAccessor* value);
BalaParameter* bala_property_get_this_parameter (BalaProperty* self);
void bala_property_set_this_parameter (BalaProperty* self,
                                       BalaParameter* value);
gboolean bala_property_get_interface_only (BalaProperty* self);
void bala_property_set_interface_only (BalaProperty* self,
                                       gboolean value);
gboolean bala_property_get_is_abstract (BalaProperty* self);
void bala_property_set_is_abstract (BalaProperty* self,
                                    gboolean value);
gboolean bala_property_get_is_virtual (BalaProperty* self);
void bala_property_set_is_virtual (BalaProperty* self,
                                   gboolean value);
gboolean bala_property_get_overrides (BalaProperty* self);
void bala_property_set_overrides (BalaProperty* self,
                                  gboolean value);
BalaField* bala_property_get_field (BalaProperty* self);
BalaMemberBinding bala_property_get_binding (BalaProperty* self);
void bala_property_set_binding (BalaProperty* self,
                                BalaMemberBinding value);
const gchar* bala_property_get_nick (BalaProperty* self);
const gchar* bala_property_get_blurb (BalaProperty* self);
gboolean bala_property_get_notify (BalaProperty* self);
BalaProperty* bala_property_get_base_property (BalaProperty* self);
BalaProperty* bala_property_get_base_interface_property (BalaProperty* self);
BalaExpression* bala_property_get_initializer (BalaProperty* self);
void bala_property_set_initializer (BalaProperty* self,
                                    BalaExpression* value);
BalaProperty* bala_property_new (const gchar* name,
                                 BalaDataType* property_type,
                                 BalaPropertyAccessor* get_accessor,
                                 BalaPropertyAccessor* set_accessor,
                                 BalaSourceReference* source_reference,
                                 BalaComment* comment);
BalaProperty* bala_property_construct (GType object_type,
                                       const gchar* name,
                                       BalaDataType* property_type,
                                       BalaPropertyAccessor* get_accessor,
                                       BalaPropertyAccessor* set_accessor,
                                       BalaSourceReference* source_reference,
                                       BalaComment* comment);
gboolean bala_property_compatible (BalaProperty* self,
                                   BalaProperty* base_property,
                                   gchar* * invalid_match);
GType bala_property_prototype_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaPropertyPrototype, bala_code_node_unref)
BalaProperty* bala_property_prototype_get_property_symbol (BalaPropertyPrototype* self);
BalaPropertyPrototype* bala_property_prototype_new (BalaProperty* property_symbol);
BalaPropertyPrototype* bala_property_prototype_construct (GType object_type,
                                                          BalaProperty* property_symbol);
const gchar* bala_real_literal_get_value (BalaRealLiteral* self);
void bala_real_literal_set_value (BalaRealLiteral* self,
                                  const gchar* value);
BalaRealLiteral* bala_real_literal_new (const gchar* r,
                                        BalaSourceReference* source);
BalaRealLiteral* bala_real_literal_construct (GType object_type,
                                              const gchar* r,
                                              BalaSourceReference* source);
gchar* bala_real_literal_get_type_name (BalaRealLiteral* self);
BalaExpression* bala_reference_transfer_expression_get_inner (BalaReferenceTransferExpression* self);
void bala_reference_transfer_expression_set_inner (BalaReferenceTransferExpression* self,
                                                   BalaExpression* value);
BalaReferenceTransferExpression* bala_reference_transfer_expression_new (BalaExpression* inner,
                                                                         BalaSourceReference* source_reference);
BalaReferenceTransferExpression* bala_reference_transfer_expression_construct (GType object_type,
                                                                               BalaExpression* inner,
                                                                               BalaSourceReference* source_reference);
BalaReferenceType* bala_reference_type_construct (GType object_type,
                                                  BalaSymbol* symbol);
const gchar* bala_regex_literal_get_value (BalaRegexLiteral* self);
void bala_regex_literal_set_value (BalaRegexLiteral* self,
                                   const gchar* value);
BalaRegexLiteral* bala_regex_literal_new (const gchar* value,
                                          BalaSourceReference* source_reference);
BalaRegexLiteral* bala_regex_literal_construct (GType object_type,
                                                const gchar* value,
                                                BalaSourceReference* source_reference);
GType bala_report_colored_get_type (void) G_GNUC_CONST;
gboolean bala_report_get_enable_warnings (BalaReport* self);
void bala_report_set_enable_warnings (BalaReport* self,
                                      gboolean value);
gboolean bala_report_set_colors (BalaReport* self,
                                 const gchar* str,
                                 BalaReportColored colored_output);
void bala_report_set_verbose_errors (BalaReport* self,
                                     gboolean verbose);
gint bala_report_get_warnings (BalaReport* self);
gint bala_report_get_errors (BalaReport* self);
void bala_report_note (BalaReport* self,
                       BalaSourceReference* source,
                       const gchar* message);
void bala_report_depr (BalaReport* self,
                       BalaSourceReference* source,
                       const gchar* message);
void bala_report_warn (BalaReport* self,
                       BalaSourceReference* source,
                       const gchar* message);
void bala_report_err (BalaReport* self,
                      BalaSourceReference* source,
                      const gchar* message);
void bala_report_notice (BalaSourceReference* source,
                         const gchar* message);
void bala_report_deprecated (BalaSourceReference* source,
                             const gchar* message);
void bala_report_experimental (BalaSourceReference* source,
                               const gchar* message);
void bala_report_warning (BalaSourceReference* source,
                          const gchar* message);
void bala_report_error (BalaSourceReference* source,
                        const gchar* message);
BalaReport* bala_report_new (void);
BalaReport* bala_report_construct (GType object_type);
BalaExpression* bala_return_statement_get_return_expression (BalaReturnStatement* self);
void bala_return_statement_set_return_expression (BalaReturnStatement* self,
                                                  BalaExpression* value);
BalaReturnStatement* bala_return_statement_new (BalaExpression* return_expression,
                                                BalaSourceReference* source_reference);
BalaReturnStatement* bala_return_statement_construct (GType object_type,
                                                      BalaExpression* return_expression,
                                                      BalaSourceReference* source_reference);
gpointer bala_scanner_ref (gpointer instance);
void bala_scanner_unref (gpointer instance);
GParamSpec* bala_param_spec_scanner (const gchar* name,
                                     const gchar* nick,
                                     const gchar* blurb,
                                     GType object_type,
                                     GParamFlags flags);
void bala_value_set_scanner (GValue* value,
                             gpointer v_object);
void bala_value_take_scanner (GValue* value,
                              gpointer v_object);
gpointer bala_value_get_scanner (const GValue* value);
GType bala_scanner_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaScanner, bala_scanner_unref)
BalaSourceFile* bala_scanner_get_source_file (BalaScanner* self);
BalaScanner* bala_scanner_new (BalaSourceFile* source_file);
BalaScanner* bala_scanner_construct (GType object_type,
                                     BalaSourceFile* source_file);
void bala_scanner_seek (BalaScanner* self,
                        BalaSourceLocation* location);
GType bala_token_type_get_type (void) G_GNUC_CONST;
BalaTokenType bala_scanner_read_regex_token (BalaScanner* self,
                                             BalaSourceLocation* token_begin,
                                             BalaSourceLocation* token_end);
BalaTokenType bala_scanner_get_identifier_or_keyword (gchar* begin,
                                                      gint len);
BalaTokenType bala_scanner_read_template_token (BalaScanner* self,
                                                BalaSourceLocation* token_begin,
                                                BalaSourceLocation* token_end);
BalaTokenType bala_scanner_read_token (BalaScanner* self,
                                       BalaSourceLocation* token_begin,
                                       BalaSourceLocation* token_end);
void bala_scanner_parse_file_comments (BalaScanner* self);
BalaComment* bala_scanner_pop_comment (BalaScanner* self);
BalaSymbol* bala_scope_get_owner (BalaScope* self);
void bala_scope_set_owner (BalaScope* self,
                           BalaSymbol* value);
BalaScope* bala_scope_get_parent_scope (BalaScope* self);
void bala_scope_set_parent_scope (BalaScope* self,
                                  BalaScope* value);
BalaScope* bala_scope_new (BalaSymbol* owner);
BalaScope* bala_scope_construct (GType object_type,
                                 BalaSymbol* owner);
void bala_scope_add (BalaScope* self,
                     const gchar* name,
                     BalaSymbol* sym);
void bala_scope_remove (BalaScope* self,
                        const gchar* name);
BalaSymbol* bala_scope_lookup (BalaScope* self,
                               const gchar* name);
gboolean bala_scope_is_subscope_of (BalaScope* self,
                                    BalaScope* scope);
BalaMap* bala_scope_get_symbol_table (BalaScope* self);
GType bala_struct_value_type_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaStructValueType, bala_code_node_unref)
BalaSymbol* bala_semantic_analyzer_get_current_symbol (BalaSemanticAnalyzer* self);
void bala_semantic_analyzer_set_current_symbol (BalaSemanticAnalyzer* self,
                                                BalaSymbol* value);
BalaSourceFile* bala_semantic_analyzer_get_current_source_file (BalaSemanticAnalyzer* self);
void bala_semantic_analyzer_set_current_source_file (BalaSemanticAnalyzer* self,
                                                     BalaSourceFile* value);
BalaTypeSymbol* bala_semantic_analyzer_get_current_type_symbol (BalaSemanticAnalyzer* self);
BalaClass* bala_semantic_analyzer_get_current_class (BalaSemanticAnalyzer* self);
BalaStruct* bala_semantic_analyzer_get_current_struct (BalaSemanticAnalyzer* self);
BalaMethod* bala_semantic_analyzer_get_current_method (BalaSemanticAnalyzer* self);
BalaMethod* bala_semantic_analyzer_get_current_async_method (BalaSemanticAnalyzer* self);
BalaPropertyAccessor* bala_semantic_analyzer_get_current_property_accessor (BalaSemanticAnalyzer* self);
BalaSymbol* bala_semantic_analyzer_get_current_method_or_property_accessor (BalaSemanticAnalyzer* self);
BalaDataType* bala_semantic_analyzer_get_current_return_type (BalaSemanticAnalyzer* self);
BalaSemanticAnalyzer* bala_semantic_analyzer_new (void);
BalaSemanticAnalyzer* bala_semantic_analyzer_construct (GType object_type);
void bala_semantic_analyzer_analyze (BalaSemanticAnalyzer* self,
                                     BalaCodeContext* context);
gboolean bala_semantic_analyzer_is_type_accessible (BalaSemanticAnalyzer* self,
                                                    BalaSymbol* sym,
                                                    BalaDataType* type);
BalaDataType* bala_semantic_analyzer_get_value_type_for_symbol (BalaSemanticAnalyzer* self,
                                                                BalaSymbol* sym,
                                                                gboolean lvalue);
BalaSymbol* bala_semantic_analyzer_symbol_lookup_inherited (BalaSymbol* sym,
                                                            const gchar* name);
BalaDataType* bala_semantic_analyzer_get_data_type_for_symbol (BalaSymbol* sym);
BalaSymbol* bala_semantic_analyzer_get_symbol_for_data_type (BalaDataType* type);
gboolean bala_semantic_analyzer_is_gobject_property (BalaSemanticAnalyzer* self,
                                                     BalaProperty* prop);
gboolean bala_semantic_analyzer_is_gobject_property_type (BalaSemanticAnalyzer* self,
                                                          BalaDataType* property_type);
gboolean bala_semantic_analyzer_check_arguments (BalaSemanticAnalyzer* self,
                                                 BalaExpression* expr,
                                                 BalaDataType* mtype,
                                                 BalaList* params,
                                                 BalaList* args);
gboolean bala_semantic_analyzer_check_variadic_arguments (BalaSemanticAnalyzer* self,
                                                          BalaIterator* arg_it,
                                                          gint i,
                                                          BalaSourceReference* source_reference);
gboolean bala_semantic_analyzer_check_print_format (BalaSemanticAnalyzer* self,
                                                    const gchar* format,
                                                    BalaIterator* arg_it,
                                                    BalaSourceReference* source_reference);
BalaDataType* bala_semantic_analyzer_get_actual_type (BalaDataType* derived_instance_type,
                                                      BalaList* method_type_arguments,
                                                      BalaGenericType* generic_type,
                                                      BalaCodeNode* node_reference);
gboolean bala_semantic_analyzer_is_in_instance_method (BalaSemanticAnalyzer* self);
BalaExpression* bala_semantic_analyzer_create_temp_access (BalaLocalVariable* local,
                                                           BalaDataType* target_type);
void bala_semantic_analyzer_visit_member_initializer (BalaSemanticAnalyzer* self,
                                                      BalaMemberInitializer* init,
                                                      BalaDataType* type);
BalaDataType* bala_semantic_analyzer_get_arithmetic_result_type (BalaSemanticAnalyzer* self,
                                                                 BalaDataType* left_type,
                                                                 BalaDataType* right_type);
BalaMethod* bala_semantic_analyzer_find_current_method (BalaSemanticAnalyzer* self);
BalaMethod* bala_semantic_analyzer_find_parent_method (BalaSymbol* sym);
BalaSymbol* bala_semantic_analyzer_find_parent_method_or_property_accessor (BalaSymbol* sym);
BalaTypeSymbol* bala_semantic_analyzer_find_parent_type_symbol (BalaSymbol* sym);
BalaDataType* bala_semantic_analyzer_get_this_type (BalaSymbol* s,
                                                    BalaTypeSymbol* parent);
gboolean bala_semantic_analyzer_is_in_constructor (BalaSemanticAnalyzer* self);
gboolean bala_semantic_analyzer_is_in_destructor (BalaSemanticAnalyzer* self);
gboolean bala_semantic_analyzer_is_reference_type_argument (BalaSemanticAnalyzer* self,
                                                            BalaDataType* type_arg);
gboolean bala_semantic_analyzer_is_nullable_value_type_argument (BalaSemanticAnalyzer* self,
                                                                 BalaDataType* type_arg);
gboolean bala_semantic_analyzer_is_signed_integer_type_argument (BalaSemanticAnalyzer* self,
                                                                 BalaDataType* type_arg);
gboolean bala_semantic_analyzer_is_unsigned_integer_type_argument (BalaSemanticAnalyzer* self,
                                                                   BalaDataType* type_arg);
void bala_semantic_analyzer_check_type (BalaSemanticAnalyzer* self,
                                        BalaDataType* type);
void bala_semantic_analyzer_check_type_arguments (BalaSemanticAnalyzer* self,
                                                  BalaMemberAccess* access);
BalaBlock* bala_signal_get_body (BalaSignal* self);
void bala_signal_set_body (BalaSignal* self,
                           BalaBlock* value);
gboolean bala_signal_get_is_virtual (BalaSignal* self);
void bala_signal_set_is_virtual (BalaSignal* self,
                                 gboolean value);
BalaMethod* bala_signal_get_default_handler (BalaSignal* self);
BalaMethod* bala_signal_get_emitter (BalaSignal* self);
BalaSignal* bala_signal_new (const gchar* name,
                             BalaDataType* return_type,
                             BalaSourceReference* source_reference,
                             BalaComment* comment);
BalaSignal* bala_signal_construct (GType object_type,
                                   const gchar* name,
                                   BalaDataType* return_type,
                                   BalaSourceReference* source_reference,
                                   BalaComment* comment);
BalaDelegate* bala_signal_get_delegate (BalaSignal* self,
                                        BalaDataType* sender_type,
                                        BalaCodeNode* node_reference);
GType bala_signal_type_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaSignalType, bala_code_node_unref)
BalaSignal* bala_signal_type_get_signal_symbol (BalaSignalType* self);
BalaSignalType* bala_signal_type_new (BalaSignal* signal_symbol);
BalaSignalType* bala_signal_type_construct (GType object_type,
                                            BalaSignal* signal_symbol);
BalaDelegateType* bala_signal_type_get_handler_type (BalaSignalType* self);
BalaDataType* bala_sizeof_expression_get_type_reference (BalaSizeofExpression* self);
void bala_sizeof_expression_set_type_reference (BalaSizeofExpression* self,
                                                BalaDataType* value);
BalaSizeofExpression* bala_sizeof_expression_new (BalaDataType* type,
                                                  BalaSourceReference* source);
BalaSizeofExpression* bala_sizeof_expression_construct (GType object_type,
                                                        BalaDataType* type,
                                                        BalaSourceReference* source);
BalaExpression* bala_slice_expression_get_container (BalaSliceExpression* self);
void bala_slice_expression_set_container (BalaSliceExpression* self,
                                          BalaExpression* value);
BalaExpression* bala_slice_expression_get_start (BalaSliceExpression* self);
BalaExpression* bala_slice_expression_get_stop (BalaSliceExpression* self);
BalaSliceExpression* bala_slice_expression_new (BalaExpression* container,
                                                BalaExpression* start,
                                                BalaExpression* stop,
                                                BalaSourceReference* source_reference);
BalaSliceExpression* bala_slice_expression_construct (GType object_type,
                                                      BalaExpression* container,
                                                      BalaExpression* start,
                                                      BalaExpression* stop,
                                                      BalaSourceReference* source_reference);
const gchar* bala_source_file_get_filename (BalaSourceFile* self);
void bala_source_file_set_relative_filename (BalaSourceFile* self,
                                             const gchar* value);
const gchar* bala_source_file_get_package_name (BalaSourceFile* self);
void bala_source_file_set_package_name (BalaSourceFile* self,
                                        const gchar* value);
const gchar* bala_source_file_get_installed_version (BalaSourceFile* self);
void bala_source_file_set_installed_version (BalaSourceFile* self,
                                             const gchar* value);
GType bala_source_file_type_get_type (void) G_GNUC_CONST;
BalaSourceFileType bala_source_file_get_file_type (BalaSourceFile* self);
void bala_source_file_set_file_type (BalaSourceFile* self,
                                     BalaSourceFileType value);
gboolean bala_source_file_get_from_commandline (BalaSourceFile* self);
void bala_source_file_set_from_commandline (BalaSourceFile* self,
                                            gboolean value);
const gchar* bala_source_file_get_gir_namespace (BalaSourceFile* self);
void bala_source_file_set_gir_namespace (BalaSourceFile* self,
                                         const gchar* value);
const gchar* bala_source_file_get_gir_version (BalaSourceFile* self);
void bala_source_file_set_gir_version (BalaSourceFile* self,
                                       const gchar* value);
BalaCodeContext* bala_source_file_get_context (BalaSourceFile* self);
void bala_source_file_set_context (BalaSourceFile* self,
                                   BalaCodeContext* value);
const gchar* bala_source_file_get_content (BalaSourceFile* self);
void bala_source_file_set_content (BalaSourceFile* self,
                                   const gchar* value);
gboolean bala_source_file_get_used (BalaSourceFile* self);
void bala_source_file_set_used (BalaSourceFile* self,
                                gboolean value);
BalaList* bala_source_file_get_current_using_directives (BalaSourceFile* self);
void bala_source_file_set_current_using_directives (BalaSourceFile* self,
                                                    BalaList* value);
BalaSourceFile* bala_source_file_new (BalaCodeContext* context,
                                      BalaSourceFileType type,
                                      const gchar* filename,
                                      const gchar* content,
                                      gboolean cmdline);
BalaSourceFile* bala_source_file_construct (GType object_type,
                                            BalaCodeContext* context,
                                            BalaSourceFileType type,
                                            const gchar* filename,
                                            const gchar* content,
                                            gboolean cmdline);
void bala_source_file_add_comment (BalaSourceFile* self,
                                   BalaComment* comment);
BalaList* bala_source_file_get_comments (BalaSourceFile* self);
void bala_source_file_add_using_directive (BalaSourceFile* self,
                                           BalaUsingDirective* ns);
void bala_source_file_add_node (BalaSourceFile* self,
                                BalaCodeNode* node);
void bala_source_file_remove_node (BalaSourceFile* self,
                                   BalaCodeNode* node);
BalaList* bala_source_file_get_nodes (BalaSourceFile* self);
void bala_source_file_accept (BalaSourceFile* self,
                              BalaCodeVisitor* visitor);
void bala_source_file_accept_children (BalaSourceFile* self,
                                       BalaCodeVisitor* visitor);
gchar* bala_source_file_get_relative_filename (BalaSourceFile* self);
gchar* bala_source_file_get_csource_filename (BalaSourceFile* self);
gchar* bala_source_file_get_cinclude_filename (BalaSourceFile* self);
gchar* bala_source_file_get_source_line (BalaSourceFile* self,
                                         gint lineno);
gchar* bala_source_file_get_mapped_contents (BalaSourceFile* self);
gsize bala_source_file_get_mapped_length (BalaSourceFile* self);
gboolean bala_source_file_check (BalaSourceFile* self,
                                 BalaCodeContext* context);
void bala_source_location_init (BalaSourceLocation *self,
                                gchar* _pos,
                                gint _line,
                                gint _column);
gchar* bala_source_location_to_string (BalaSourceLocation *self);
BalaSourceFile* bala_source_reference_get_file (BalaSourceReference* self);
void bala_source_reference_set_file (BalaSourceReference* self,
                                     BalaSourceFile* value);
void bala_source_reference_get_begin (BalaSourceReference* self,
                                      BalaSourceLocation * result);
void bala_source_reference_set_begin (BalaSourceReference* self,
                                      BalaSourceLocation * value);
void bala_source_reference_get_end (BalaSourceReference* self,
                                    BalaSourceLocation * result);
void bala_source_reference_set_end (BalaSourceReference* self,
                                    BalaSourceLocation * value);
BalaList* bala_source_reference_get_using_directives (BalaSourceReference* self);
BalaSourceReference* bala_source_reference_new (BalaSourceFile* _file,
                                                BalaSourceLocation* begin,
                                                BalaSourceLocation* end);
BalaSourceReference* bala_source_reference_construct (GType object_type,
                                                      BalaSourceFile* _file,
                                                      BalaSourceLocation* begin,
                                                      BalaSourceLocation* end);
gboolean bala_source_reference_contains (BalaSourceReference* self,
                                         BalaSourceLocation* location);
gchar* bala_source_reference_to_string (BalaSourceReference* self);
GType bala_statement_list_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaStatementList, bala_code_node_unref)
gint bala_statement_list_get_length (BalaStatementList* self);
BalaStatementList* bala_statement_list_new (BalaSourceReference* source_reference);
BalaStatementList* bala_statement_list_construct (GType object_type,
                                                  BalaSourceReference* source_reference);
BalaStatement* bala_statement_list_get (BalaStatementList* self,
                                        gint index);
void bala_statement_list_set (BalaStatementList* self,
                              gint index,
                              BalaStatement* stmt);
void bala_statement_list_add (BalaStatementList* self,
                              BalaStatement* stmt);
void bala_statement_list_insert (BalaStatementList* self,
                                 gint index,
                                 BalaStatement* stmt);
const gchar* bala_string_literal_get_value (BalaStringLiteral* self);
void bala_string_literal_set_value (BalaStringLiteral* self,
                                    const gchar* value);
gboolean bala_string_literal_get_translate (BalaStringLiteral* self);
void bala_string_literal_set_translate (BalaStringLiteral* self,
                                        gboolean value);
BalaStringLiteral* bala_string_literal_new (const gchar* value,
                                            BalaSourceReference* source_reference);
BalaStringLiteral* bala_string_literal_construct (GType object_type,
                                                  const gchar* value,
                                                  BalaSourceReference* source_reference);
gchar* bala_string_literal_eval (BalaStringLiteral* self);
BalaStringLiteral* bala_string_literal_get_format_literal (BalaExpression* expr);
BalaDataType* bala_struct_get_base_type (BalaStruct* self);
void bala_struct_set_base_type (BalaStruct* self,
                                BalaDataType* value);
BalaStruct* bala_struct_get_base_struct (BalaStruct* self);
BalaCreationMethod* bala_struct_get_default_construction_method (BalaStruct* self);
gboolean bala_struct_get_is_immutable (BalaStruct* self);
void bala_struct_set_is_immutable (BalaStruct* self,
                                   gboolean value);
gint bala_struct_get_width (BalaStruct* self);
void bala_struct_set_width (BalaStruct* self,
                            gint value);
gboolean bala_struct_get_signed (BalaStruct* self);
void bala_struct_set_signed (BalaStruct* self,
                             gboolean value);
gint bala_struct_get_rank (BalaStruct* self);
void bala_struct_set_rank (BalaStruct* self,
                           gint value);
BalaStruct* bala_struct_new (const gchar* name,
                             BalaSourceReference* source_reference,
                             BalaComment* comment);
BalaStruct* bala_struct_construct (GType object_type,
                                   const gchar* name,
                                   BalaSourceReference* source_reference,
                                   BalaComment* comment);
void bala_struct_add_type_parameter (BalaStruct* self,
                                     BalaTypeParameter* p);
BalaList* bala_struct_get_type_parameters (BalaStruct* self);
BalaList* bala_struct_get_fields (BalaStruct* self);
BalaList* bala_struct_get_constants (BalaStruct* self);
BalaList* bala_struct_get_methods (BalaStruct* self);
BalaList* bala_struct_get_properties (BalaStruct* self);
gboolean bala_struct_is_boolean_type (BalaStruct* self);
gboolean bala_struct_is_integer_type (BalaStruct* self);
gboolean bala_struct_is_floating_type (BalaStruct* self);
gboolean bala_struct_is_decimal_floating_type (BalaStruct* self);
gboolean bala_struct_is_simple_type (BalaStruct* self);
void bala_struct_set_simple_type (BalaStruct* self,
                                  gboolean simple_type);
gboolean bala_struct_is_disposable (BalaStruct* self);
BalaStructValueType* bala_struct_value_type_new (BalaStruct* type_symbol);
BalaStructValueType* bala_struct_value_type_construct (GType object_type,
                                                       BalaStruct* type_symbol);
BalaBasicBlock* bala_subroutine_get_entry_block (BalaSubroutine* self);
void bala_subroutine_set_entry_block (BalaSubroutine* self,
                                      BalaBasicBlock* value);
BalaBasicBlock* bala_subroutine_get_return_block (BalaSubroutine* self);
void bala_subroutine_set_return_block (BalaSubroutine* self,
                                       BalaBasicBlock* value);
BalaBasicBlock* bala_subroutine_get_exit_block (BalaSubroutine* self);
void bala_subroutine_set_exit_block (BalaSubroutine* self,
                                     BalaBasicBlock* value);
BalaLocalVariable* bala_subroutine_get_result_var (BalaSubroutine* self);
void bala_subroutine_set_result_var (BalaSubroutine* self,
                                     BalaLocalVariable* value);
gboolean bala_subroutine_get_has_result (BalaSubroutine* self);
BalaSubroutine* bala_subroutine_construct (GType object_type,
                                           const gchar* name,
                                           BalaSourceReference* source_reference,
                                           BalaComment* comment);
BalaBlock* bala_subroutine_get_body (BalaSubroutine* self);
void bala_subroutine_set_body (BalaSubroutine* self,
                               BalaBlock* value);
BalaExpression* bala_switch_label_get_expression (BalaSwitchLabel* self);
void bala_switch_label_set_expression (BalaSwitchLabel* self,
                                       BalaExpression* value);
BalaSwitchSection* bala_switch_label_get_section (BalaSwitchLabel* self);
BalaSwitchLabel* bala_switch_label_new (BalaExpression* expr,
                                        BalaSourceReference* source);
BalaSwitchLabel* bala_switch_label_construct (GType object_type,
                                              BalaExpression* expr,
                                              BalaSourceReference* source);
BalaSwitchLabel* bala_switch_label_new_with_default (BalaSourceReference* source);
BalaSwitchLabel* bala_switch_label_construct_with_default (GType object_type,
                                                           BalaSourceReference* source);
BalaSwitchSection* bala_switch_section_new (BalaSourceReference* source_reference);
BalaSwitchSection* bala_switch_section_construct (GType object_type,
                                                  BalaSourceReference* source_reference);
void bala_switch_section_add_label (BalaSwitchSection* self,
                                    BalaSwitchLabel* label);
BalaList* bala_switch_section_get_labels (BalaSwitchSection* self);
gboolean bala_switch_section_has_default_label (BalaSwitchSection* self);
BalaExpression* bala_switch_statement_get_expression (BalaSwitchStatement* self);
void bala_switch_statement_set_expression (BalaSwitchStatement* self,
                                           BalaExpression* value);
BalaSwitchStatement* bala_switch_statement_new (BalaExpression* expression,
                                                BalaSourceReference* source_reference);
BalaSwitchStatement* bala_switch_statement_construct (GType object_type,
                                                      BalaExpression* expression,
                                                      BalaSourceReference* source_reference);
void bala_switch_statement_add_section (BalaSwitchStatement* self,
                                        BalaSwitchSection* section);
BalaList* bala_switch_statement_get_sections (BalaSwitchStatement* self);
BalaSymbol* bala_symbol_get_parent_symbol (BalaSymbol* self);
BalaScope* bala_symbol_get_owner (BalaSymbol* self);
void bala_symbol_set_owner (BalaSymbol* self,
                            BalaScope* value);
const gchar* bala_symbol_get_name (BalaSymbol* self);
void bala_symbol_set_name (BalaSymbol* self,
                           const gchar* value);
gboolean bala_symbol_get_active (BalaSymbol* self);
void bala_symbol_set_active (BalaSymbol* self,
                             gboolean value);
gboolean bala_symbol_get_used (BalaSymbol* self);
void bala_symbol_set_used (BalaSymbol* self,
                           gboolean value);
gboolean bala_symbol_get_anonymous (BalaSymbol* self);
void bala_symbol_set_anonymous (BalaSymbol* self,
                                gboolean value);
GType bala_symbol_accessibility_get_type (void) G_GNUC_CONST;
BalaSymbolAccessibility bala_symbol_get_access (BalaSymbol* self);
void bala_symbol_set_access (BalaSymbol* self,
                             BalaSymbolAccessibility value);
BalaComment* bala_symbol_get_comment (BalaSymbol* self);
void bala_symbol_set_comment (BalaSymbol* self,
                              BalaComment* value);
gpointer bala_version_attribute_ref (gpointer instance);
void bala_version_attribute_unref (gpointer instance);
GParamSpec* bala_param_spec_version_attribute (const gchar* name,
                                               const gchar* nick,
                                               const gchar* blurb,
                                               GType object_type,
                                               GParamFlags flags);
void bala_value_set_version_attribute (GValue* value,
                                       gpointer v_object);
void bala_value_take_version_attribute (GValue* value,
                                        gpointer v_object);
gpointer bala_value_get_version_attribute (const GValue* value);
GType bala_version_attribute_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaVersionAttribute, bala_version_attribute_unref)
BalaVersionAttribute* bala_symbol_get_version (BalaSymbol* self);
gboolean bala_symbol_get_hides (BalaSymbol* self);
void bala_symbol_set_hides (BalaSymbol* self,
                            gboolean value);
gboolean bala_symbol_is_internal_symbol (BalaSymbol* self);
gboolean bala_symbol_is_private_symbol (BalaSymbol* self);
BalaScope* bala_symbol_get_scope (BalaSymbol* self);
gboolean bala_symbol_get_is_extern (BalaSymbol* self);
void bala_symbol_set_is_extern (BalaSymbol* self,
                                gboolean value);
gboolean bala_symbol_get_external (BalaSymbol* self);
void bala_symbol_set_external (BalaSymbol* self,
                               gboolean value);
gboolean bala_symbol_get_external_package (BalaSymbol* self);
gboolean bala_symbol_get_from_commandline (BalaSymbol* self);
BalaSourceFileType bala_symbol_get_source_type (BalaSymbol* self);
BalaSymbol* bala_symbol_construct (GType object_type,
                                   const gchar* name,
                                   BalaSourceReference* source_reference,
                                   BalaComment* comment);
gchar* bala_symbol_get_full_name (BalaSymbol* self);
gchar* bala_symbol_camel_case_to_lower_case (const gchar* camel_case);
gchar* bala_symbol_lower_case_to_camel_case (const gchar* lower_case);
gboolean bala_symbol_equal_func (BalaSymbol* a,
                                 BalaSymbol* b);
guint bala_symbol_hash_func (BalaSymbol* s);
BalaScope* bala_symbol_get_top_accessible_scope (BalaSymbol* self,
                                                 gboolean is_internal);
gboolean bala_symbol_is_instance_member (BalaSymbol* self);
gboolean bala_symbol_is_class_member (BalaSymbol* self);
BalaSymbol* bala_symbol_get_hidden_member (BalaSymbol* self);
gboolean bala_symbol_is_accessible (BalaSymbol* self,
                                    BalaSymbol* sym);
void bala_symbol_add_namespace (BalaSymbol* self,
                                BalaNamespace* ns);
void bala_symbol_add_class (BalaSymbol* self,
                            BalaClass* cl);
void bala_symbol_add_interface (BalaSymbol* self,
                                BalaInterface* iface);
void bala_symbol_add_struct (BalaSymbol* self,
                             BalaStruct* st);
void bala_symbol_add_enum (BalaSymbol* self,
                           BalaEnum* en);
void bala_symbol_add_error_domain (BalaSymbol* self,
                                   BalaErrorDomain* edomain);
void bala_symbol_add_delegate (BalaSymbol* self,
                               BalaDelegate* d);
void bala_symbol_add_constant (BalaSymbol* self,
                               BalaConstant* constant);
void bala_symbol_add_field (BalaSymbol* self,
                            BalaField* f);
void bala_symbol_add_method (BalaSymbol* self,
                             BalaMethod* m);
void bala_symbol_add_property (BalaSymbol* self,
                               BalaProperty* prop);
void bala_symbol_add_signal (BalaSymbol* self,
                             BalaSignal* sig);
void bala_symbol_add_constructor (BalaSymbol* self,
                                  BalaConstructor* c);
void bala_symbol_add_destructor (BalaSymbol* self,
                                 BalaDestructor* d);
const gchar* bala_symbol_accessibility_to_string (BalaSymbolAccessibility self);
void bala_symbol_resolver_resolve (BalaSymbolResolver* self,
                                   BalaCodeContext* context);
BalaSymbolResolver* bala_symbol_resolver_new (void);
BalaSymbolResolver* bala_symbol_resolver_construct (GType object_type);
BalaDataType* bala_target_value_get_value_type (BalaTargetValue* self);
void bala_target_value_set_value_type (BalaTargetValue* self,
                                       BalaDataType* value);
BalaDataType* bala_target_value_get_actual_value_type (BalaTargetValue* self);
void bala_target_value_set_actual_value_type (BalaTargetValue* self,
                                              BalaDataType* value);
BalaTargetValue* bala_target_value_construct (GType object_type,
                                              BalaDataType* value_type);
BalaTemplate* bala_template_new (BalaSourceReference* source_reference);
BalaTemplate* bala_template_construct (GType object_type,
                                       BalaSourceReference* source_reference);
void bala_template_add_expression (BalaTemplate* self,
                                   BalaExpression* expr);
BalaList* bala_template_get_expressions (BalaTemplate* self);
BalaExpression* bala_throw_statement_get_error_expression (BalaThrowStatement* self);
void bala_throw_statement_set_error_expression (BalaThrowStatement* self,
                                                BalaExpression* value);
BalaThrowStatement* bala_throw_statement_new (BalaExpression* error_expression,
                                              BalaSourceReference* source_reference);
BalaThrowStatement* bala_throw_statement_construct (GType object_type,
                                                    BalaExpression* error_expression,
                                                    BalaSourceReference* source_reference);
const gchar* bala_token_type_to_string (BalaTokenType self);
GType bala_traverse_visitor_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaTraverseVisitor, bala_code_visitor_unref)
GType bala_traverse_status_get_type (void) G_GNUC_CONST;
BalaTraverseVisitor* bala_traverse_visitor_new (BalaTraverseFunc func,
                                                gpointer func_target,
                                                GDestroyNotify func_target_destroy_notify);
BalaTraverseVisitor* bala_traverse_visitor_construct (GType object_type,
                                                      BalaTraverseFunc func,
                                                      gpointer func_target,
                                                      GDestroyNotify func_target_destroy_notify);
BalaBlock* bala_try_statement_get_body (BalaTryStatement* self);
void bala_try_statement_set_body (BalaTryStatement* self,
                                  BalaBlock* value);
BalaBlock* bala_try_statement_get_finally_body (BalaTryStatement* self);
void bala_try_statement_set_finally_body (BalaTryStatement* self,
                                          BalaBlock* value);
gboolean bala_try_statement_get_after_try_block_reachable (BalaTryStatement* self);
void bala_try_statement_set_after_try_block_reachable (BalaTryStatement* self,
                                                       gboolean value);
BalaTryStatement* bala_try_statement_new (BalaBlock* body,
                                          BalaBlock* finally_body,
                                          BalaSourceReference* source_reference);
BalaTryStatement* bala_try_statement_construct (GType object_type,
                                                BalaBlock* body,
                                                BalaBlock* finally_body,
                                                BalaSourceReference* source_reference);
void bala_try_statement_add_catch_clause (BalaTryStatement* self,
                                          BalaCatchClause* clause);
BalaList* bala_try_statement_get_catch_clauses (BalaTryStatement* self);
BalaTuple* bala_tuple_new (BalaSourceReference* source_reference);
BalaTuple* bala_tuple_construct (GType object_type,
                                 BalaSourceReference* source_reference);
void bala_tuple_add_expression (BalaTuple* self,
                                BalaExpression* expr);
BalaList* bala_tuple_get_expressions (BalaTuple* self);
BalaExpression* bala_typecheck_get_expression (BalaTypeCheck* self);
void bala_typecheck_set_expression (BalaTypeCheck* self,
                                    BalaExpression* value);
BalaDataType* bala_typecheck_get_type_reference (BalaTypeCheck* self);
void bala_typecheck_set_type_reference (BalaTypeCheck* self,
                                        BalaDataType* value);
BalaTypeCheck* bala_typecheck_new (BalaExpression* expr,
                                   BalaDataType* type,
                                   BalaSourceReference* source);
BalaTypeCheck* bala_typecheck_construct (GType object_type,
                                         BalaExpression* expr,
                                         BalaDataType* type,
                                         BalaSourceReference* source);
BalaDataType* bala_typeof_expression_get_type_reference (BalaTypeofExpression* self);
void bala_typeof_expression_set_type_reference (BalaTypeofExpression* self,
                                                BalaDataType* value);
BalaTypeofExpression* bala_typeof_expression_new (BalaDataType* type,
                                                  BalaSourceReference* source);
BalaTypeofExpression* bala_typeof_expression_construct (GType object_type,
                                                        BalaDataType* type,
                                                        BalaSourceReference* source);
BalaTypeParameter* bala_typeparameter_new (const gchar* name,
                                           BalaSourceReference* source_reference);
BalaTypeParameter* bala_typeparameter_construct (GType object_type,
                                                 const gchar* name,
                                                 BalaSourceReference* source_reference);
gboolean bala_typeparameter_equals (BalaTypeParameter* self,
                                    BalaTypeParameter* param2);
BalaTypeSymbol* bala_typesymbol_construct (GType object_type,
                                           const gchar* name,
                                           BalaSourceReference* source_reference,
                                           BalaComment* comment);
gboolean bala_typesymbol_is_reference_type (BalaTypeSymbol* self);
gboolean bala_typesymbol_is_subtype_of (BalaTypeSymbol* self,
                                        BalaTypeSymbol* t);
gint bala_typesymbol_get_type_parameter_index (BalaTypeSymbol* self,
                                               const gchar* name);
GType bala_unary_operator_get_type (void) G_GNUC_CONST;
BalaUnaryOperator bala_unary_expression_get_operator (BalaUnaryExpression* self);
void bala_unary_expression_set_operator (BalaUnaryExpression* self,
                                         BalaUnaryOperator value);
BalaExpression* bala_unary_expression_get_inner (BalaUnaryExpression* self);
void bala_unary_expression_set_inner (BalaUnaryExpression* self,
                                      BalaExpression* value);
BalaUnaryExpression* bala_unary_expression_new (BalaUnaryOperator op,
                                                BalaExpression* _inner,
                                                BalaSourceReference* source);
BalaUnaryExpression* bala_unary_expression_construct (GType object_type,
                                                      BalaUnaryOperator op,
                                                      BalaExpression* _inner,
                                                      BalaSourceReference* source);
const gchar* bala_unary_operator_to_string (BalaUnaryOperator self);
BalaExpression* bala_unlock_statement_get_resource (BalaUnlockStatement* self);
void bala_unlock_statement_set_resource (BalaUnlockStatement* self,
                                         BalaExpression* value);
BalaUnlockStatement* bala_unlock_statement_new (BalaExpression* resource,
                                                BalaSourceReference* source_reference);
BalaUnlockStatement* bala_unlock_statement_construct (GType object_type,
                                                      BalaExpression* resource,
                                                      BalaSourceReference* source_reference);
GType bala_unresolved_symbol_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaUnresolvedSymbol, bala_code_node_unref)
BalaUnresolvedSymbol* bala_unresolved_symbol_get_inner (BalaUnresolvedSymbol* self);
void bala_unresolved_symbol_set_inner (BalaUnresolvedSymbol* self,
                                       BalaUnresolvedSymbol* value);
gboolean bala_unresolved_symbol_get_qualified (BalaUnresolvedSymbol* self);
void bala_unresolved_symbol_set_qualified (BalaUnresolvedSymbol* self,
                                           gboolean value);
BalaUnresolvedSymbol* bala_unresolved_symbol_new (BalaUnresolvedSymbol* inner,
                                                  const gchar* name,
                                                  BalaSourceReference* source_reference);
BalaUnresolvedSymbol* bala_unresolved_symbol_construct (GType object_type,
                                                        BalaUnresolvedSymbol* inner,
                                                        const gchar* name,
                                                        BalaSourceReference* source_reference);
BalaUnresolvedSymbol* bala_unresolved_symbol_new_from_expression (BalaExpression* expr);
BalaUnresolvedSymbol* bala_unresolved_symbol_copy (BalaUnresolvedSymbol* self);
GType bala_unresolved_type_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaUnresolvedType, bala_code_node_unref)
BalaUnresolvedSymbol* bala_unresolved_type_get_unresolved_symbol (BalaUnresolvedType* self);
void bala_unresolved_type_set_unresolved_symbol (BalaUnresolvedType* self,
                                                 BalaUnresolvedSymbol* value);
BalaUnresolvedType* bala_unresolved_type_new (void);
BalaUnresolvedType* bala_unresolved_type_construct (GType object_type);
BalaUnresolvedType* bala_unresolved_type_new_from_symbol (BalaUnresolvedSymbol* symbol,
                                                          BalaSourceReference* source);
BalaUnresolvedType* bala_unresolved_type_construct_from_symbol (GType object_type,
                                                                BalaUnresolvedSymbol* symbol,
                                                                BalaSourceReference* source);
BalaUnresolvedType* bala_unresolved_type_new_from_expression (BalaExpression* expr);
BalaUsedAttr* bala_used_attr_new (void);
BalaUsedAttr* bala_used_attr_construct (GType object_type);
void bala_used_attr_mark (BalaUsedAttr* self,
                          const gchar* attribute,
                          const gchar* argument);
void bala_used_attr_check_unused (BalaUsedAttr* self,
                                  BalaCodeContext* context);
BalaSymbol* bala_using_directive_get_namespace_symbol (BalaUsingDirective* self);
void bala_using_directive_set_namespace_symbol (BalaUsingDirective* self,
                                                BalaSymbol* value);
BalaUsingDirective* bala_using_directive_new (BalaSymbol* namespace_symbol,
                                              BalaSourceReference* source_reference);
BalaUsingDirective* bala_using_directive_construct (GType object_type,
                                                    BalaSymbol* namespace_symbol,
                                                    BalaSourceReference* source_reference);
BalaValueType* bala_value_type_construct (GType object_type,
                                          BalaTypeSymbol* type_symbol);
BalaExpression* bala_variable_get_initializer (BalaVariable* self);
void bala_variable_set_initializer (BalaVariable* self,
                                    BalaExpression* value);
BalaDataType* bala_variable_get_variable_type (BalaVariable* self);
void bala_variable_set_variable_type (BalaVariable* self,
                                      BalaDataType* value);
gboolean bala_variable_get_single_assignment (BalaVariable* self);
void bala_variable_set_single_assignment (BalaVariable* self,
                                          gboolean value);
BalaVariable* bala_variable_new (BalaDataType* variable_type,
                                 const gchar* name,
                                 BalaExpression* initializer,
                                 BalaSourceReference* source_reference,
                                 BalaComment* comment);
BalaVariable* bala_variable_construct (GType object_type,
                                       BalaDataType* variable_type,
                                       const gchar* name,
                                       BalaExpression* initializer,
                                       BalaSourceReference* source_reference,
                                       BalaComment* comment);
GType bala_var_type_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaVarType, bala_code_node_unref)
BalaVarType* bala_var_type_new (gboolean value_owned);
BalaVarType* bala_var_type_construct (GType object_type,
                                      gboolean value_owned);
#define BALA_MAJOR_VERSION 0
#define BALA_MINOR_VERSION 48
#define BALA_MICRO_VERSION 17
#define BALA_API_VERSION "0.48"
#define BALA_BUILD_VERSION "0.48.17"
guint bala_get_major_version (void);
guint bala_get_minor_version (void);
guint bala_get_micro_version (void);
const gchar* bala_get_build_version (void);
const gchar* bala_check_version (guint required_major,
                                 guint required_minor,
                                 guint required_micro);
BalaVersionAttribute* bala_version_attribute_new (BalaSymbol* symbol);
BalaVersionAttribute* bala_version_attribute_construct (GType object_type,
                                                        BalaSymbol* symbol);
gboolean bala_version_attribute_get_deprecated (BalaVersionAttribute* self);
void bala_version_attribute_set_deprecated (BalaVersionAttribute* self,
                                            gboolean value);
gchar* bala_version_attribute_get_deprecated_since (BalaVersionAttribute* self);
void bala_version_attribute_set_deprecated_since (BalaVersionAttribute* self,
                                                  const gchar* value);
gchar* bala_version_attribute_get_replacement (BalaVersionAttribute* self);
void bala_version_attribute_set_replacement (BalaVersionAttribute* self,
                                             const gchar* value);
gboolean bala_version_attribute_get_experimental (BalaVersionAttribute* self);
void bala_version_attribute_set_experimental (BalaVersionAttribute* self,
                                              gboolean value);
gchar* bala_version_attribute_get_experimental_until (BalaVersionAttribute* self);
void bala_version_attribute_set_experimental_until (BalaVersionAttribute* self,
                                                    const gchar* value);
gchar* bala_version_attribute_get_since (BalaVersionAttribute* self);
void bala_version_attribute_set_since (BalaVersionAttribute* self,
                                       const gchar* value);
gboolean bala_version_attribute_check (BalaVersionAttribute* self,
                                       BalaSourceReference* source_ref);
gint bala_version_attribute_cmp_versions (const gchar* v1str,
                                          const gchar* v2str);
GType bala_void_type_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (BalaVoidType, bala_code_node_unref)
BalaVoidType* bala_void_type_new (BalaSourceReference* source_reference);
BalaVoidType* bala_void_type_construct (GType object_type,
                                        BalaSourceReference* source_reference);
BalaExpression* bala_while_statement_get_condition (BalaWhileStatement* self);
void bala_while_statement_set_condition (BalaWhileStatement* self,
                                         BalaExpression* value);
BalaBlock* bala_while_statement_get_body (BalaWhileStatement* self);
void bala_while_statement_set_body (BalaWhileStatement* self,
                                    BalaBlock* value);
BalaWhileStatement* bala_while_statement_new (BalaExpression* condition,
                                              BalaBlock* body,
                                              BalaSourceReference* source_reference);
BalaWhileStatement* bala_while_statement_construct (GType object_type,
                                                    BalaExpression* condition,
                                                    BalaBlock* body,
                                                    BalaSourceReference* source_reference);
BalaYieldStatement* bala_yield_statement_new (BalaSourceReference* source_reference);
BalaYieldStatement* bala_yield_statement_construct (GType object_type,
                                                    BalaSourceReference* source_reference);

G_END_DECLS

#endif
