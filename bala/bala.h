/* bala.h generated by balac, the Vala compiler, do not modify */

#ifndef __BALA_H__
#define __BALA_H__

#include <glib-object.h>
#include <glib.h>
#include <stdlib.h>
#include <string.h>
#include <balagee.h>
#include <float.h>
#include <math.h>

G_BEGIN_DECLS

#define BALA_TYPE_CODE_NODE (bala_code_node_get_type ())
#define BALA_CODE_NODE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_CODE_NODE, ValaCodeNode))
#define BALA_CODE_NODE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_CODE_NODE, ValaCodeNodeClass))
#define BALA_IS_CODE_NODE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_CODE_NODE))
#define BALA_IS_CODE_NODE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_CODE_NODE))
#define BALA_CODE_NODE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_CODE_NODE, ValaCodeNodeClass))

typedef struct _ValaCodeNode ValaCodeNode;
typedef struct _ValaCodeNodeClass ValaCodeNodeClass;
typedef struct _ValaCodeNodePrivate ValaCodeNodePrivate;

#define BALA_TYPE_ATTRIBUTE (bala_attribute_get_type ())
#define BALA_ATTRIBUTE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_ATTRIBUTE, ValaAttribute))
#define BALA_ATTRIBUTE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_ATTRIBUTE, ValaAttributeClass))
#define BALA_IS_ATTRIBUTE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_ATTRIBUTE))
#define BALA_IS_ATTRIBUTE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_ATTRIBUTE))
#define BALA_ATTRIBUTE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_ATTRIBUTE, ValaAttributeClass))

typedef struct _ValaAttribute ValaAttribute;
typedef struct _ValaAttributeClass ValaAttributeClass;

#define BALA_TYPE_CODE_VISITOR (bala_code_visitor_get_type ())
#define BALA_CODE_VISITOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_CODE_VISITOR, ValaCodeVisitor))
#define BALA_CODE_VISITOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_CODE_VISITOR, ValaCodeVisitorClass))
#define BALA_IS_CODE_VISITOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_CODE_VISITOR))
#define BALA_IS_CODE_VISITOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_CODE_VISITOR))
#define BALA_CODE_VISITOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_CODE_VISITOR, ValaCodeVisitorClass))

typedef struct _ValaCodeVisitor ValaCodeVisitor;
typedef struct _ValaCodeVisitorClass ValaCodeVisitorClass;

#define BALA_TYPE_CODE_CONTEXT (bala_code_context_get_type ())
#define BALA_CODE_CONTEXT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_CODE_CONTEXT, ValaCodeContext))
#define BALA_CODE_CONTEXT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_CODE_CONTEXT, ValaCodeContextClass))
#define BALA_IS_CODE_CONTEXT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_CODE_CONTEXT))
#define BALA_IS_CODE_CONTEXT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_CODE_CONTEXT))
#define BALA_CODE_CONTEXT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_CODE_CONTEXT, ValaCodeContextClass))

typedef struct _ValaCodeContext ValaCodeContext;
typedef struct _ValaCodeContextClass ValaCodeContextClass;

#define BALA_TYPE_CODE_GENERATOR (bala_code_generator_get_type ())
#define BALA_CODE_GENERATOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_CODE_GENERATOR, ValaCodeGenerator))
#define BALA_CODE_GENERATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_CODE_GENERATOR, ValaCodeGeneratorClass))
#define BALA_IS_CODE_GENERATOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_CODE_GENERATOR))
#define BALA_IS_CODE_GENERATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_CODE_GENERATOR))
#define BALA_CODE_GENERATOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_CODE_GENERATOR, ValaCodeGeneratorClass))

typedef struct _ValaCodeGenerator ValaCodeGenerator;
typedef struct _ValaCodeGeneratorClass ValaCodeGeneratorClass;

#define BALA_TYPE_DATA_TYPE (bala_data_type_get_type ())
#define BALA_DATA_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_DATA_TYPE, ValaDataType))
#define BALA_DATA_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_DATA_TYPE, ValaDataTypeClass))
#define BALA_IS_DATA_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_DATA_TYPE))
#define BALA_IS_DATA_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_DATA_TYPE))
#define BALA_DATA_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_DATA_TYPE, ValaDataTypeClass))

typedef struct _ValaDataType ValaDataType;
typedef struct _ValaDataTypeClass ValaDataTypeClass;

#define BALA_TYPE_EXPRESSION (bala_expression_get_type ())
#define BALA_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_EXPRESSION, ValaExpression))
#define BALA_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_EXPRESSION, ValaExpressionClass))
#define BALA_IS_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_EXPRESSION))
#define BALA_IS_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_EXPRESSION))
#define BALA_EXPRESSION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_EXPRESSION, ValaExpressionClass))

typedef struct _ValaExpression ValaExpression;
typedef struct _ValaExpressionClass ValaExpressionClass;

#define BALA_TYPE_SYMBOL (bala_symbol_get_type ())
#define BALA_SYMBOL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_SYMBOL, ValaSymbol))
#define BALA_SYMBOL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_SYMBOL, ValaSymbolClass))
#define BALA_IS_SYMBOL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_SYMBOL))
#define BALA_IS_SYMBOL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_SYMBOL))
#define BALA_SYMBOL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_SYMBOL, ValaSymbolClass))

typedef struct _ValaSymbol ValaSymbol;
typedef struct _ValaSymbolClass ValaSymbolClass;

#define BALA_TYPE_VARIABLE (bala_variable_get_type ())
#define BALA_VARIABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_VARIABLE, ValaVariable))
#define BALA_VARIABLE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_VARIABLE, ValaVariableClass))
#define BALA_IS_VARIABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_VARIABLE))
#define BALA_IS_VARIABLE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_VARIABLE))
#define BALA_VARIABLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_VARIABLE, ValaVariableClass))

typedef struct _ValaVariable ValaVariable;
typedef struct _ValaVariableClass ValaVariableClass;

#define BALA_TYPE_SOURCE_REFERENCE (bala_source_reference_get_type ())
#define BALA_SOURCE_REFERENCE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_SOURCE_REFERENCE, ValaSourceReference))
#define BALA_SOURCE_REFERENCE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_SOURCE_REFERENCE, ValaSourceReferenceClass))
#define BALA_IS_SOURCE_REFERENCE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_SOURCE_REFERENCE))
#define BALA_IS_SOURCE_REFERENCE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_SOURCE_REFERENCE))
#define BALA_SOURCE_REFERENCE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_SOURCE_REFERENCE, ValaSourceReferenceClass))

typedef struct _ValaSourceReference ValaSourceReference;
typedef struct _ValaSourceReferenceClass ValaSourceReferenceClass;
typedef struct _ValaExpressionPrivate ValaExpressionPrivate;

#define BALA_TYPE_ADDRESSOF_EXPRESSION (bala_addressof_expression_get_type ())
#define BALA_ADDRESSOF_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_ADDRESSOF_EXPRESSION, ValaAddressofExpression))
#define BALA_ADDRESSOF_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_ADDRESSOF_EXPRESSION, ValaAddressofExpressionClass))
#define BALA_IS_ADDRESSOF_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_ADDRESSOF_EXPRESSION))
#define BALA_IS_ADDRESSOF_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_ADDRESSOF_EXPRESSION))
#define BALA_ADDRESSOF_EXPRESSION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_ADDRESSOF_EXPRESSION, ValaAddressofExpressionClass))

typedef struct _ValaAddressofExpression ValaAddressofExpression;
typedef struct _ValaAddressofExpressionClass ValaAddressofExpressionClass;
typedef struct _ValaAddressofExpressionPrivate ValaAddressofExpressionPrivate;
typedef struct _ValaSymbolPrivate ValaSymbolPrivate;

#define BALA_TYPE_NAMESPACE (bala_namespace_get_type ())
#define BALA_NAMESPACE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_NAMESPACE, ValaNamespace))
#define BALA_NAMESPACE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_NAMESPACE, ValaNamespaceClass))
#define BALA_IS_NAMESPACE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_NAMESPACE))
#define BALA_IS_NAMESPACE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_NAMESPACE))
#define BALA_NAMESPACE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_NAMESPACE, ValaNamespaceClass))

typedef struct _ValaNamespace ValaNamespace;
typedef struct _ValaNamespaceClass ValaNamespaceClass;

#define BALA_TYPE_TYPESYMBOL (bala_typesymbol_get_type ())
#define BALA_TYPESYMBOL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_TYPESYMBOL, ValaTypeSymbol))
#define BALA_TYPESYMBOL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_TYPESYMBOL, ValaTypeSymbolClass))
#define BALA_IS_TYPESYMBOL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_TYPESYMBOL))
#define BALA_IS_TYPESYMBOL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_TYPESYMBOL))
#define BALA_TYPESYMBOL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_TYPESYMBOL, ValaTypeSymbolClass))

typedef struct _ValaTypeSymbol ValaTypeSymbol;
typedef struct _ValaTypeSymbolClass ValaTypeSymbolClass;

#define BALA_TYPE_OBJECT_TYPE_SYMBOL (bala_object_type_symbol_get_type ())
#define BALA_OBJECT_TYPE_SYMBOL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_OBJECT_TYPE_SYMBOL, ValaObjectTypeSymbol))
#define BALA_OBJECT_TYPE_SYMBOL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_OBJECT_TYPE_SYMBOL, ValaObjectTypeSymbolClass))
#define BALA_IS_OBJECT_TYPE_SYMBOL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_OBJECT_TYPE_SYMBOL))
#define BALA_IS_OBJECT_TYPE_SYMBOL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_OBJECT_TYPE_SYMBOL))
#define BALA_OBJECT_TYPE_SYMBOL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_OBJECT_TYPE_SYMBOL, ValaObjectTypeSymbolClass))

typedef struct _ValaObjectTypeSymbol ValaObjectTypeSymbol;
typedef struct _ValaObjectTypeSymbolClass ValaObjectTypeSymbolClass;

#define BALA_TYPE_CLASS (bala_class_get_type ())
#define BALA_CLASS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_CLASS, ValaClass))
#define BALA_CLASS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_CLASS, ValaClassClass))
#define BALA_IS_CLASS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_CLASS))
#define BALA_IS_CLASS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_CLASS))
#define BALA_CLASS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_CLASS, ValaClassClass))

typedef struct _ValaClass ValaClass;
typedef struct _ValaClassClass ValaClassClass;

#define BALA_TYPE_INTERFACE (bala_interface_get_type ())
#define BALA_INTERFACE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_INTERFACE, ValaInterface))
#define BALA_INTERFACE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_INTERFACE, ValaInterfaceClass))
#define BALA_IS_INTERFACE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_INTERFACE))
#define BALA_IS_INTERFACE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_INTERFACE))
#define BALA_INTERFACE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_INTERFACE, ValaInterfaceClass))

typedef struct _ValaInterface ValaInterface;
typedef struct _ValaInterfaceClass ValaInterfaceClass;

#define BALA_TYPE_STRUCT (bala_struct_get_type ())
#define BALA_STRUCT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_STRUCT, ValaStruct))
#define BALA_STRUCT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_STRUCT, ValaStructClass))
#define BALA_IS_STRUCT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_STRUCT))
#define BALA_IS_STRUCT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_STRUCT))
#define BALA_STRUCT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_STRUCT, ValaStructClass))

typedef struct _ValaStruct ValaStruct;
typedef struct _ValaStructClass ValaStructClass;

#define BALA_TYPE_ENUM (bala_enum_get_type ())
#define BALA_ENUM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_ENUM, ValaEnum))
#define BALA_ENUM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_ENUM, ValaEnumClass))
#define BALA_IS_ENUM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_ENUM))
#define BALA_IS_ENUM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_ENUM))
#define BALA_ENUM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_ENUM, ValaEnumClass))

typedef struct _ValaEnum ValaEnum;
typedef struct _ValaEnumClass ValaEnumClass;

#define BALA_TYPE_ERROR_DOMAIN (bala_error_domain_get_type ())
#define BALA_ERROR_DOMAIN(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_ERROR_DOMAIN, ValaErrorDomain))
#define BALA_ERROR_DOMAIN_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_ERROR_DOMAIN, ValaErrorDomainClass))
#define BALA_IS_ERROR_DOMAIN(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_ERROR_DOMAIN))
#define BALA_IS_ERROR_DOMAIN_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_ERROR_DOMAIN))
#define BALA_ERROR_DOMAIN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_ERROR_DOMAIN, ValaErrorDomainClass))

typedef struct _ValaErrorDomain ValaErrorDomain;
typedef struct _ValaErrorDomainClass ValaErrorDomainClass;

#define BALA_TYPE_DELEGATE (bala_delegate_get_type ())
#define BALA_DELEGATE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_DELEGATE, ValaDelegate))
#define BALA_DELEGATE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_DELEGATE, ValaDelegateClass))
#define BALA_IS_DELEGATE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_DELEGATE))
#define BALA_IS_DELEGATE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_DELEGATE))
#define BALA_DELEGATE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_DELEGATE, ValaDelegateClass))

typedef struct _ValaDelegate ValaDelegate;
typedef struct _ValaDelegateClass ValaDelegateClass;

#define BALA_TYPE_CONSTANT (bala_constant_get_type ())
#define BALA_CONSTANT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_CONSTANT, ValaConstant))
#define BALA_CONSTANT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_CONSTANT, ValaConstantClass))
#define BALA_IS_CONSTANT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_CONSTANT))
#define BALA_IS_CONSTANT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_CONSTANT))
#define BALA_CONSTANT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_CONSTANT, ValaConstantClass))

typedef struct _ValaConstant ValaConstant;
typedef struct _ValaConstantClass ValaConstantClass;

#define BALA_TYPE_FIELD (bala_field_get_type ())
#define BALA_FIELD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_FIELD, ValaField))
#define BALA_FIELD_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_FIELD, ValaFieldClass))
#define BALA_IS_FIELD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_FIELD))
#define BALA_IS_FIELD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_FIELD))
#define BALA_FIELD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_FIELD, ValaFieldClass))

typedef struct _ValaField ValaField;
typedef struct _ValaFieldClass ValaFieldClass;

#define BALA_TYPE_SUBROUTINE (bala_subroutine_get_type ())
#define BALA_SUBROUTINE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_SUBROUTINE, ValaSubroutine))
#define BALA_SUBROUTINE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_SUBROUTINE, ValaSubroutineClass))
#define BALA_IS_SUBROUTINE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_SUBROUTINE))
#define BALA_IS_SUBROUTINE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_SUBROUTINE))
#define BALA_SUBROUTINE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_SUBROUTINE, ValaSubroutineClass))

typedef struct _ValaSubroutine ValaSubroutine;
typedef struct _ValaSubroutineClass ValaSubroutineClass;

#define BALA_TYPE_METHOD (bala_method_get_type ())
#define BALA_METHOD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_METHOD, ValaMethod))
#define BALA_METHOD_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_METHOD, ValaMethodClass))
#define BALA_IS_METHOD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_METHOD))
#define BALA_IS_METHOD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_METHOD))
#define BALA_METHOD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_METHOD, ValaMethodClass))

typedef struct _ValaMethod ValaMethod;
typedef struct _ValaMethodClass ValaMethodClass;

#define BALA_TYPE_PROPERTY (bala_property_get_type ())
#define BALA_PROPERTY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_PROPERTY, ValaProperty))
#define BALA_PROPERTY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_PROPERTY, ValaPropertyClass))
#define BALA_IS_PROPERTY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_PROPERTY))
#define BALA_IS_PROPERTY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_PROPERTY))
#define BALA_PROPERTY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_PROPERTY, ValaPropertyClass))

typedef struct _ValaProperty ValaProperty;
typedef struct _ValaPropertyClass ValaPropertyClass;

#define BALA_TYPE_SIGNAL (bala_signal_get_type ())
#define BALA_SIGNAL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_SIGNAL, ValaSignal))
#define BALA_SIGNAL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_SIGNAL, ValaSignalClass))
#define BALA_IS_SIGNAL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_SIGNAL))
#define BALA_IS_SIGNAL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_SIGNAL))
#define BALA_SIGNAL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_SIGNAL, ValaSignalClass))

typedef struct _ValaSignal ValaSignal;
typedef struct _ValaSignalClass ValaSignalClass;

#define BALA_TYPE_CONSTRUCTOR (bala_constructor_get_type ())
#define BALA_CONSTRUCTOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_CONSTRUCTOR, ValaConstructor))
#define BALA_CONSTRUCTOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_CONSTRUCTOR, ValaConstructorClass))
#define BALA_IS_CONSTRUCTOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_CONSTRUCTOR))
#define BALA_IS_CONSTRUCTOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_CONSTRUCTOR))
#define BALA_CONSTRUCTOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_CONSTRUCTOR, ValaConstructorClass))

typedef struct _ValaConstructor ValaConstructor;
typedef struct _ValaConstructorClass ValaConstructorClass;

#define BALA_TYPE_DESTRUCTOR (bala_destructor_get_type ())
#define BALA_DESTRUCTOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_DESTRUCTOR, ValaDestructor))
#define BALA_DESTRUCTOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_DESTRUCTOR, ValaDestructorClass))
#define BALA_IS_DESTRUCTOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_DESTRUCTOR))
#define BALA_IS_DESTRUCTOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_DESTRUCTOR))
#define BALA_DESTRUCTOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_DESTRUCTOR, ValaDestructorClass))

typedef struct _ValaDestructor ValaDestructor;
typedef struct _ValaDestructorClass ValaDestructorClass;
typedef struct _ValaSubroutinePrivate ValaSubroutinePrivate;

#define BALA_TYPE_CALLABLE (bala_callable_get_type ())
#define BALA_CALLABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_CALLABLE, ValaCallable))
#define BALA_IS_CALLABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_CALLABLE))
#define BALA_CALLABLE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), BALA_TYPE_CALLABLE, ValaCallableIface))

typedef struct _ValaCallable ValaCallable;
typedef struct _ValaCallableIface ValaCallableIface;

#define BALA_TYPE_PARAMETER (bala_parameter_get_type ())
#define BALA_PARAMETER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_PARAMETER, ValaParameter))
#define BALA_PARAMETER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_PARAMETER, ValaParameterClass))
#define BALA_IS_PARAMETER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_PARAMETER))
#define BALA_IS_PARAMETER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_PARAMETER))
#define BALA_PARAMETER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_PARAMETER, ValaParameterClass))

typedef struct _ValaParameter ValaParameter;
typedef struct _ValaParameterClass ValaParameterClass;
typedef struct _ValaMethodPrivate ValaMethodPrivate;

#define BALA_TYPE_ARRAY_COPY_METHOD (bala_array_copy_method_get_type ())
#define BALA_ARRAY_COPY_METHOD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_ARRAY_COPY_METHOD, ValaArrayCopyMethod))
#define BALA_ARRAY_COPY_METHOD_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_ARRAY_COPY_METHOD, ValaArrayCopyMethodClass))
#define BALA_IS_ARRAY_COPY_METHOD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_ARRAY_COPY_METHOD))
#define BALA_IS_ARRAY_COPY_METHOD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_ARRAY_COPY_METHOD))
#define BALA_ARRAY_COPY_METHOD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_ARRAY_COPY_METHOD, ValaArrayCopyMethodClass))

typedef struct _ValaArrayCopyMethod ValaArrayCopyMethod;
typedef struct _ValaArrayCopyMethodClass ValaArrayCopyMethodClass;
typedef struct _ValaArrayCopyMethodPrivate ValaArrayCopyMethodPrivate;

#define BALA_TYPE_ARRAY_CREATION_EXPRESSION (bala_array_creation_expression_get_type ())
#define BALA_ARRAY_CREATION_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_ARRAY_CREATION_EXPRESSION, ValaArrayCreationExpression))
#define BALA_ARRAY_CREATION_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_ARRAY_CREATION_EXPRESSION, ValaArrayCreationExpressionClass))
#define BALA_IS_ARRAY_CREATION_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_ARRAY_CREATION_EXPRESSION))
#define BALA_IS_ARRAY_CREATION_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_ARRAY_CREATION_EXPRESSION))
#define BALA_ARRAY_CREATION_EXPRESSION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_ARRAY_CREATION_EXPRESSION, ValaArrayCreationExpressionClass))

typedef struct _ValaArrayCreationExpression ValaArrayCreationExpression;
typedef struct _ValaArrayCreationExpressionClass ValaArrayCreationExpressionClass;
typedef struct _ValaArrayCreationExpressionPrivate ValaArrayCreationExpressionPrivate;

#define BALA_TYPE_INITIALIZER_LIST (bala_initializer_list_get_type ())
#define BALA_INITIALIZER_LIST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_INITIALIZER_LIST, ValaInitializerList))
#define BALA_INITIALIZER_LIST_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_INITIALIZER_LIST, ValaInitializerListClass))
#define BALA_IS_INITIALIZER_LIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_INITIALIZER_LIST))
#define BALA_IS_INITIALIZER_LIST_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_INITIALIZER_LIST))
#define BALA_INITIALIZER_LIST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_INITIALIZER_LIST, ValaInitializerListClass))

typedef struct _ValaInitializerList ValaInitializerList;
typedef struct _ValaInitializerListClass ValaInitializerListClass;
typedef struct _ValaVariablePrivate ValaVariablePrivate;

#define BALA_TYPE_LOCKABLE (bala_lockable_get_type ())
#define BALA_LOCKABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_LOCKABLE, ValaLockable))
#define BALA_IS_LOCKABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_LOCKABLE))
#define BALA_LOCKABLE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), BALA_TYPE_LOCKABLE, ValaLockableIface))

typedef struct _ValaLockable ValaLockable;
typedef struct _ValaLockableIface ValaLockableIface;
typedef struct _ValaFieldPrivate ValaFieldPrivate;

#define BALA_TYPE_ARRAY_LENGTH_FIELD (bala_array_length_field_get_type ())
#define BALA_ARRAY_LENGTH_FIELD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_ARRAY_LENGTH_FIELD, ValaArrayLengthField))
#define BALA_ARRAY_LENGTH_FIELD_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_ARRAY_LENGTH_FIELD, ValaArrayLengthFieldClass))
#define BALA_IS_ARRAY_LENGTH_FIELD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_ARRAY_LENGTH_FIELD))
#define BALA_IS_ARRAY_LENGTH_FIELD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_ARRAY_LENGTH_FIELD))
#define BALA_ARRAY_LENGTH_FIELD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_ARRAY_LENGTH_FIELD, ValaArrayLengthFieldClass))

typedef struct _ValaArrayLengthField ValaArrayLengthField;
typedef struct _ValaArrayLengthFieldClass ValaArrayLengthFieldClass;
typedef struct _ValaArrayLengthFieldPrivate ValaArrayLengthFieldPrivate;

#define BALA_TYPE_ARRAY_MOVE_METHOD (bala_array_move_method_get_type ())
#define BALA_ARRAY_MOVE_METHOD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_ARRAY_MOVE_METHOD, ValaArrayMoveMethod))
#define BALA_ARRAY_MOVE_METHOD_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_ARRAY_MOVE_METHOD, ValaArrayMoveMethodClass))
#define BALA_IS_ARRAY_MOVE_METHOD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_ARRAY_MOVE_METHOD))
#define BALA_IS_ARRAY_MOVE_METHOD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_ARRAY_MOVE_METHOD))
#define BALA_ARRAY_MOVE_METHOD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_ARRAY_MOVE_METHOD, ValaArrayMoveMethodClass))

typedef struct _ValaArrayMoveMethod ValaArrayMoveMethod;
typedef struct _ValaArrayMoveMethodClass ValaArrayMoveMethodClass;
typedef struct _ValaArrayMoveMethodPrivate ValaArrayMoveMethodPrivate;

#define BALA_TYPE_ARRAY_RESIZE_METHOD (bala_array_resize_method_get_type ())
#define BALA_ARRAY_RESIZE_METHOD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_ARRAY_RESIZE_METHOD, ValaArrayResizeMethod))
#define BALA_ARRAY_RESIZE_METHOD_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_ARRAY_RESIZE_METHOD, ValaArrayResizeMethodClass))
#define BALA_IS_ARRAY_RESIZE_METHOD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_ARRAY_RESIZE_METHOD))
#define BALA_IS_ARRAY_RESIZE_METHOD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_ARRAY_RESIZE_METHOD))
#define BALA_ARRAY_RESIZE_METHOD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_ARRAY_RESIZE_METHOD, ValaArrayResizeMethodClass))

typedef struct _ValaArrayResizeMethod ValaArrayResizeMethod;
typedef struct _ValaArrayResizeMethodClass ValaArrayResizeMethodClass;
typedef struct _ValaArrayResizeMethodPrivate ValaArrayResizeMethodPrivate;
typedef struct _ValaDataTypePrivate ValaDataTypePrivate;

#define BALA_TYPE_SCOPE (bala_scope_get_type ())
#define BALA_SCOPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_SCOPE, ValaScope))
#define BALA_SCOPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_SCOPE, ValaScopeClass))
#define BALA_IS_SCOPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_SCOPE))
#define BALA_IS_SCOPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_SCOPE))
#define BALA_SCOPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_SCOPE, ValaScopeClass))

typedef struct _ValaScope ValaScope;
typedef struct _ValaScopeClass ValaScopeClass;

#define BALA_TYPE_TYPEPARAMETER (bala_typeparameter_get_type ())
#define BALA_TYPEPARAMETER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_TYPEPARAMETER, ValaTypeParameter))
#define BALA_TYPEPARAMETER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_TYPEPARAMETER, ValaTypeParameterClass))
#define BALA_IS_TYPEPARAMETER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_TYPEPARAMETER))
#define BALA_IS_TYPEPARAMETER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_TYPEPARAMETER))
#define BALA_TYPEPARAMETER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_TYPEPARAMETER, ValaTypeParameterClass))

typedef struct _ValaTypeParameter ValaTypeParameter;
typedef struct _ValaTypeParameterClass ValaTypeParameterClass;

#define BALA_TYPE_REFERENCE_TYPE (bala_reference_type_get_type ())
#define BALA_REFERENCE_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_REFERENCE_TYPE, ValaReferenceType))
#define BALA_REFERENCE_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_REFERENCE_TYPE, ValaReferenceTypeClass))
#define BALA_IS_REFERENCE_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_REFERENCE_TYPE))
#define BALA_IS_REFERENCE_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_REFERENCE_TYPE))
#define BALA_REFERENCE_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_REFERENCE_TYPE, ValaReferenceTypeClass))

typedef struct _ValaReferenceType ValaReferenceType;
typedef struct _ValaReferenceTypeClass ValaReferenceTypeClass;
typedef struct _ValaReferenceTypePrivate ValaReferenceTypePrivate;

#define BALA_TYPE_ARRAY_TYPE (bala_array_type_get_type ())
#define BALA_ARRAY_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_ARRAY_TYPE, ValaArrayType))
#define BALA_ARRAY_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_ARRAY_TYPE, ValaArrayTypeClass))
#define BALA_IS_ARRAY_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_ARRAY_TYPE))
#define BALA_IS_ARRAY_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_ARRAY_TYPE))
#define BALA_ARRAY_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_ARRAY_TYPE, ValaArrayTypeClass))

typedef struct _ValaArrayType ValaArrayType;
typedef struct _ValaArrayTypeClass ValaArrayTypeClass;
typedef struct _ValaArrayTypePrivate ValaArrayTypePrivate;

#define BALA_TYPE_ASSIGNMENT (bala_assignment_get_type ())
#define BALA_ASSIGNMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_ASSIGNMENT, ValaAssignment))
#define BALA_ASSIGNMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_ASSIGNMENT, ValaAssignmentClass))
#define BALA_IS_ASSIGNMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_ASSIGNMENT))
#define BALA_IS_ASSIGNMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_ASSIGNMENT))
#define BALA_ASSIGNMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_ASSIGNMENT, ValaAssignmentClass))

typedef struct _ValaAssignment ValaAssignment;
typedef struct _ValaAssignmentClass ValaAssignmentClass;
typedef struct _ValaAssignmentPrivate ValaAssignmentPrivate;
typedef enum  {
	BALA_ASSIGNMENT_OPERATOR_NONE,
	BALA_ASSIGNMENT_OPERATOR_SIMPLE,
	BALA_ASSIGNMENT_OPERATOR_BITWISE_OR,
	BALA_ASSIGNMENT_OPERATOR_BITWISE_AND,
	BALA_ASSIGNMENT_OPERATOR_BITWISE_XOR,
	BALA_ASSIGNMENT_OPERATOR_ADD,
	BALA_ASSIGNMENT_OPERATOR_SUB,
	BALA_ASSIGNMENT_OPERATOR_MUL,
	BALA_ASSIGNMENT_OPERATOR_DIV,
	BALA_ASSIGNMENT_OPERATOR_PERCENT,
	BALA_ASSIGNMENT_OPERATOR_SHIFT_LEFT,
	BALA_ASSIGNMENT_OPERATOR_SHIFT_RIGHT
} ValaAssignmentOperator;

#define BALA_TYPE_ASSIGNMENT_OPERATOR (bala_assignment_operator_get_type ())
typedef struct _ValaAttributePrivate ValaAttributePrivate;

#define BALA_TYPE_BASE_ACCESS (bala_base_access_get_type ())
#define BALA_BASE_ACCESS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_BASE_ACCESS, ValaBaseAccess))
#define BALA_BASE_ACCESS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_BASE_ACCESS, ValaBaseAccessClass))
#define BALA_IS_BASE_ACCESS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_BASE_ACCESS))
#define BALA_IS_BASE_ACCESS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_BASE_ACCESS))
#define BALA_BASE_ACCESS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_BASE_ACCESS, ValaBaseAccessClass))

typedef struct _ValaBaseAccess ValaBaseAccess;
typedef struct _ValaBaseAccessClass ValaBaseAccessClass;
typedef struct _ValaBaseAccessPrivate ValaBaseAccessPrivate;

#define BALA_TYPE_BASIC_BLOCK (bala_basic_block_get_type ())
#define BALA_BASIC_BLOCK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_BASIC_BLOCK, ValaBasicBlock))
#define BALA_BASIC_BLOCK_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_BASIC_BLOCK, ValaBasicBlockClass))
#define BALA_IS_BASIC_BLOCK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_BASIC_BLOCK))
#define BALA_IS_BASIC_BLOCK_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_BASIC_BLOCK))
#define BALA_BASIC_BLOCK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_BASIC_BLOCK, ValaBasicBlockClass))

typedef struct _ValaBasicBlock ValaBasicBlock;
typedef struct _ValaBasicBlockClass ValaBasicBlockClass;
typedef struct _ValaBasicBlockPrivate ValaBasicBlockPrivate;

#define BALA_TYPE_PHI_FUNCTION (bala_phi_function_get_type ())
#define BALA_PHI_FUNCTION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_PHI_FUNCTION, ValaPhiFunction))
#define BALA_PHI_FUNCTION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_PHI_FUNCTION, ValaPhiFunctionClass))
#define BALA_IS_PHI_FUNCTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_PHI_FUNCTION))
#define BALA_IS_PHI_FUNCTION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_PHI_FUNCTION))
#define BALA_PHI_FUNCTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_PHI_FUNCTION, ValaPhiFunctionClass))

typedef struct _ValaPhiFunction ValaPhiFunction;
typedef struct _ValaPhiFunctionClass ValaPhiFunctionClass;

#define BALA_TYPE_BINARY_EXPRESSION (bala_binary_expression_get_type ())
#define BALA_BINARY_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_BINARY_EXPRESSION, ValaBinaryExpression))
#define BALA_BINARY_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_BINARY_EXPRESSION, ValaBinaryExpressionClass))
#define BALA_IS_BINARY_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_BINARY_EXPRESSION))
#define BALA_IS_BINARY_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_BINARY_EXPRESSION))
#define BALA_BINARY_EXPRESSION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_BINARY_EXPRESSION, ValaBinaryExpressionClass))

typedef struct _ValaBinaryExpression ValaBinaryExpression;
typedef struct _ValaBinaryExpressionClass ValaBinaryExpressionClass;
typedef struct _ValaBinaryExpressionPrivate ValaBinaryExpressionPrivate;
typedef enum  {
	BALA_BINARY_OPERATOR_NONE,
	BALA_BINARY_OPERATOR_PLUS,
	BALA_BINARY_OPERATOR_MINUS,
	BALA_BINARY_OPERATOR_MUL,
	BALA_BINARY_OPERATOR_DIV,
	BALA_BINARY_OPERATOR_MOD,
	BALA_BINARY_OPERATOR_SHIFT_LEFT,
	BALA_BINARY_OPERATOR_SHIFT_RIGHT,
	BALA_BINARY_OPERATOR_LESS_THAN,
	BALA_BINARY_OPERATOR_GREATER_THAN,
	BALA_BINARY_OPERATOR_LESS_THAN_OR_EQUAL,
	BALA_BINARY_OPERATOR_GREATER_THAN_OR_EQUAL,
	BALA_BINARY_OPERATOR_EQUALITY,
	BALA_BINARY_OPERATOR_INEQUALITY,
	BALA_BINARY_OPERATOR_BITWISE_AND,
	BALA_BINARY_OPERATOR_BITWISE_OR,
	BALA_BINARY_OPERATOR_BITWISE_XOR,
	BALA_BINARY_OPERATOR_AND,
	BALA_BINARY_OPERATOR_OR,
	BALA_BINARY_OPERATOR_IN,
	BALA_BINARY_OPERATOR_COALESCE
} ValaBinaryOperator;

#define BALA_TYPE_BINARY_OPERATOR (bala_binary_operator_get_type ())

#define BALA_TYPE_STATEMENT (bala_statement_get_type ())
#define BALA_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_STATEMENT, ValaStatement))
#define BALA_IS_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_STATEMENT))
#define BALA_STATEMENT_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), BALA_TYPE_STATEMENT, ValaStatementIface))

typedef struct _ValaStatement ValaStatement;
typedef struct _ValaStatementIface ValaStatementIface;

#define BALA_TYPE_BLOCK (bala_block_get_type ())
#define BALA_BLOCK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_BLOCK, ValaBlock))
#define BALA_BLOCK_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_BLOCK, ValaBlockClass))
#define BALA_IS_BLOCK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_BLOCK))
#define BALA_IS_BLOCK_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_BLOCK))
#define BALA_BLOCK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_BLOCK, ValaBlockClass))

typedef struct _ValaBlock ValaBlock;
typedef struct _ValaBlockClass ValaBlockClass;
typedef struct _ValaBlockPrivate ValaBlockPrivate;

#define BALA_TYPE_LOCAL_VARIABLE (bala_local_variable_get_type ())
#define BALA_LOCAL_VARIABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_LOCAL_VARIABLE, ValaLocalVariable))
#define BALA_LOCAL_VARIABLE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_LOCAL_VARIABLE, ValaLocalVariableClass))
#define BALA_IS_LOCAL_VARIABLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_LOCAL_VARIABLE))
#define BALA_IS_LOCAL_VARIABLE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_LOCAL_VARIABLE))
#define BALA_LOCAL_VARIABLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_LOCAL_VARIABLE, ValaLocalVariableClass))

typedef struct _ValaLocalVariable ValaLocalVariable;
typedef struct _ValaLocalVariableClass ValaLocalVariableClass;

#define BALA_TYPE_LITERAL (bala_literal_get_type ())
#define BALA_LITERAL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_LITERAL, ValaLiteral))
#define BALA_LITERAL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_LITERAL, ValaLiteralClass))
#define BALA_IS_LITERAL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_LITERAL))
#define BALA_IS_LITERAL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_LITERAL))
#define BALA_LITERAL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_LITERAL, ValaLiteralClass))

typedef struct _ValaLiteral ValaLiteral;
typedef struct _ValaLiteralClass ValaLiteralClass;
typedef struct _ValaLiteralPrivate ValaLiteralPrivate;

#define BALA_TYPE_BOOLEAN_LITERAL (bala_boolean_literal_get_type ())
#define BALA_BOOLEAN_LITERAL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_BOOLEAN_LITERAL, ValaBooleanLiteral))
#define BALA_BOOLEAN_LITERAL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_BOOLEAN_LITERAL, ValaBooleanLiteralClass))
#define BALA_IS_BOOLEAN_LITERAL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_BOOLEAN_LITERAL))
#define BALA_IS_BOOLEAN_LITERAL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_BOOLEAN_LITERAL))
#define BALA_BOOLEAN_LITERAL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_BOOLEAN_LITERAL, ValaBooleanLiteralClass))

typedef struct _ValaBooleanLiteral ValaBooleanLiteral;
typedef struct _ValaBooleanLiteralClass ValaBooleanLiteralClass;
typedef struct _ValaBooleanLiteralPrivate ValaBooleanLiteralPrivate;

#define BALA_TYPE_VALUE_TYPE (bala_value_type_get_type ())
#define BALA_VALUE_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_VALUE_TYPE, ValaValueType))
#define BALA_VALUE_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_VALUE_TYPE, ValaValueTypeClass))
#define BALA_IS_VALUE_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_VALUE_TYPE))
#define BALA_IS_VALUE_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_VALUE_TYPE))
#define BALA_VALUE_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_VALUE_TYPE, ValaValueTypeClass))

typedef struct _ValaValueType ValaValueType;
typedef struct _ValaValueTypeClass ValaValueTypeClass;
typedef struct _ValaValueTypePrivate ValaValueTypePrivate;

#define BALA_TYPE_BOOLEAN_TYPE (bala_boolean_type_get_type ())
#define BALA_BOOLEAN_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_BOOLEAN_TYPE, ValaBooleanType))
#define BALA_BOOLEAN_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_BOOLEAN_TYPE, ValaBooleanTypeClass))
#define BALA_IS_BOOLEAN_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_BOOLEAN_TYPE))
#define BALA_IS_BOOLEAN_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_BOOLEAN_TYPE))
#define BALA_BOOLEAN_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_BOOLEAN_TYPE, ValaBooleanTypeClass))

typedef struct _ValaBooleanType ValaBooleanType;
typedef struct _ValaBooleanTypeClass ValaBooleanTypeClass;
typedef struct _ValaBooleanTypePrivate ValaBooleanTypePrivate;

#define BALA_TYPE_BREAK_STATEMENT (bala_break_statement_get_type ())
#define BALA_BREAK_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_BREAK_STATEMENT, ValaBreakStatement))
#define BALA_BREAK_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_BREAK_STATEMENT, ValaBreakStatementClass))
#define BALA_IS_BREAK_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_BREAK_STATEMENT))
#define BALA_IS_BREAK_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_BREAK_STATEMENT))
#define BALA_BREAK_STATEMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_BREAK_STATEMENT, ValaBreakStatementClass))

typedef struct _ValaBreakStatement ValaBreakStatement;
typedef struct _ValaBreakStatementClass ValaBreakStatementClass;
typedef struct _ValaBreakStatementPrivate ValaBreakStatementPrivate;

#define BALA_TYPE_CALLABLE_TYPE (bala_callable_type_get_type ())
#define BALA_CALLABLE_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_CALLABLE_TYPE, ValaCallableType))
#define BALA_CALLABLE_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_CALLABLE_TYPE, ValaCallableTypeClass))
#define BALA_IS_CALLABLE_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_CALLABLE_TYPE))
#define BALA_IS_CALLABLE_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_CALLABLE_TYPE))
#define BALA_CALLABLE_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_CALLABLE_TYPE, ValaCallableTypeClass))

typedef struct _ValaCallableType ValaCallableType;
typedef struct _ValaCallableTypeClass ValaCallableTypeClass;
typedef struct _ValaCallableTypePrivate ValaCallableTypePrivate;

#define BALA_TYPE_CAST_EXPRESSION (bala_cast_expression_get_type ())
#define BALA_CAST_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_CAST_EXPRESSION, ValaCastExpression))
#define BALA_CAST_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_CAST_EXPRESSION, ValaCastExpressionClass))
#define BALA_IS_CAST_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_CAST_EXPRESSION))
#define BALA_IS_CAST_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_CAST_EXPRESSION))
#define BALA_CAST_EXPRESSION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_CAST_EXPRESSION, ValaCastExpressionClass))

typedef struct _ValaCastExpression ValaCastExpression;
typedef struct _ValaCastExpressionClass ValaCastExpressionClass;
typedef struct _ValaCastExpressionPrivate ValaCastExpressionPrivate;

#define BALA_TYPE_CATCH_CLAUSE (bala_catch_clause_get_type ())
#define BALA_CATCH_CLAUSE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_CATCH_CLAUSE, ValaCatchClause))
#define BALA_CATCH_CLAUSE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_CATCH_CLAUSE, ValaCatchClauseClass))
#define BALA_IS_CATCH_CLAUSE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_CATCH_CLAUSE))
#define BALA_IS_CATCH_CLAUSE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_CATCH_CLAUSE))
#define BALA_CATCH_CLAUSE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_CATCH_CLAUSE, ValaCatchClauseClass))

typedef struct _ValaCatchClause ValaCatchClause;
typedef struct _ValaCatchClauseClass ValaCatchClauseClass;
typedef struct _ValaCatchClausePrivate ValaCatchClausePrivate;

#define BALA_TYPE_CHARACTER_LITERAL (bala_character_literal_get_type ())
#define BALA_CHARACTER_LITERAL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_CHARACTER_LITERAL, ValaCharacterLiteral))
#define BALA_CHARACTER_LITERAL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_CHARACTER_LITERAL, ValaCharacterLiteralClass))
#define BALA_IS_CHARACTER_LITERAL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_CHARACTER_LITERAL))
#define BALA_IS_CHARACTER_LITERAL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_CHARACTER_LITERAL))
#define BALA_CHARACTER_LITERAL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_CHARACTER_LITERAL, ValaCharacterLiteralClass))

typedef struct _ValaCharacterLiteral ValaCharacterLiteral;
typedef struct _ValaCharacterLiteralClass ValaCharacterLiteralClass;
typedef struct _ValaCharacterLiteralPrivate ValaCharacterLiteralPrivate;
typedef struct _ValaTypeSymbolPrivate ValaTypeSymbolPrivate;
typedef struct _ValaObjectTypeSymbolPrivate ValaObjectTypeSymbolPrivate;
typedef struct _ValaClassPrivate ValaClassPrivate;

#define BALA_TYPE_CREATION_METHOD (bala_creation_method_get_type ())
#define BALA_CREATION_METHOD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_CREATION_METHOD, ValaCreationMethod))
#define BALA_CREATION_METHOD_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_CREATION_METHOD, ValaCreationMethodClass))
#define BALA_IS_CREATION_METHOD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_CREATION_METHOD))
#define BALA_IS_CREATION_METHOD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_CREATION_METHOD))
#define BALA_CREATION_METHOD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_CREATION_METHOD, ValaCreationMethodClass))

typedef struct _ValaCreationMethod ValaCreationMethod;
typedef struct _ValaCreationMethodClass ValaCreationMethodClass;

#define BALA_TYPE_COMMENT (bala_comment_get_type ())
#define BALA_COMMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_COMMENT, ValaComment))
#define BALA_COMMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_COMMENT, ValaCommentClass))
#define BALA_IS_COMMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_COMMENT))
#define BALA_IS_COMMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_COMMENT))
#define BALA_COMMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_COMMENT, ValaCommentClass))

typedef struct _ValaComment ValaComment;
typedef struct _ValaCommentClass ValaCommentClass;

#define BALA_TYPE_CLASS_TYPE (bala_class_type_get_type ())
#define BALA_CLASS_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_CLASS_TYPE, ValaClassType))
#define BALA_CLASS_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_CLASS_TYPE, ValaClassTypeClass))
#define BALA_IS_CLASS_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_CLASS_TYPE))
#define BALA_IS_CLASS_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_CLASS_TYPE))
#define BALA_CLASS_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_CLASS_TYPE, ValaClassTypeClass))

typedef struct _ValaClassType ValaClassType;
typedef struct _ValaClassTypeClass ValaClassTypeClass;
typedef struct _ValaClassTypePrivate ValaClassTypePrivate;
typedef struct _ValaCodeContextPrivate ValaCodeContextPrivate;
typedef enum  {
	BALA_PROFILE_GOBJECT,
	BALA_PROFILE_POSIX
} ValaProfile;

#define BALA_TYPE_PROFILE (bala_profile_get_type ())

#define BALA_TYPE_REPORT (bala_report_get_type ())
#define BALA_REPORT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_REPORT, ValaReport))
#define BALA_REPORT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_REPORT, ValaReportClass))
#define BALA_IS_REPORT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_REPORT))
#define BALA_IS_REPORT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_REPORT))
#define BALA_REPORT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_REPORT, ValaReportClass))

typedef struct _ValaReport ValaReport;
typedef struct _ValaReportClass ValaReportClass;

#define BALA_TYPE_SYMBOL_RESOLVER (bala_symbol_resolver_get_type ())
#define BALA_SYMBOL_RESOLVER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_SYMBOL_RESOLVER, ValaSymbolResolver))
#define BALA_SYMBOL_RESOLVER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_SYMBOL_RESOLVER, ValaSymbolResolverClass))
#define BALA_IS_SYMBOL_RESOLVER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_SYMBOL_RESOLVER))
#define BALA_IS_SYMBOL_RESOLVER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_SYMBOL_RESOLVER))
#define BALA_SYMBOL_RESOLVER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_SYMBOL_RESOLVER, ValaSymbolResolverClass))

typedef struct _ValaSymbolResolver ValaSymbolResolver;
typedef struct _ValaSymbolResolverClass ValaSymbolResolverClass;

#define BALA_TYPE_SEMANTIC_ANALYZER (bala_semantic_analyzer_get_type ())
#define BALA_SEMANTIC_ANALYZER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_SEMANTIC_ANALYZER, ValaSemanticAnalyzer))
#define BALA_SEMANTIC_ANALYZER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_SEMANTIC_ANALYZER, ValaSemanticAnalyzerClass))
#define BALA_IS_SEMANTIC_ANALYZER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_SEMANTIC_ANALYZER))
#define BALA_IS_SEMANTIC_ANALYZER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_SEMANTIC_ANALYZER))
#define BALA_SEMANTIC_ANALYZER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_SEMANTIC_ANALYZER, ValaSemanticAnalyzerClass))

typedef struct _ValaSemanticAnalyzer ValaSemanticAnalyzer;
typedef struct _ValaSemanticAnalyzerClass ValaSemanticAnalyzerClass;

#define BALA_TYPE_FLOW_ANALYZER (bala_flow_analyzer_get_type ())
#define BALA_FLOW_ANALYZER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_FLOW_ANALYZER, ValaFlowAnalyzer))
#define BALA_FLOW_ANALYZER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_FLOW_ANALYZER, ValaFlowAnalyzerClass))
#define BALA_IS_FLOW_ANALYZER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_FLOW_ANALYZER))
#define BALA_IS_FLOW_ANALYZER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_FLOW_ANALYZER))
#define BALA_FLOW_ANALYZER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_FLOW_ANALYZER, ValaFlowAnalyzerClass))

typedef struct _ValaFlowAnalyzer ValaFlowAnalyzer;
typedef struct _ValaFlowAnalyzerClass ValaFlowAnalyzerClass;

#define BALA_TYPE_USED_ATTR (bala_used_attr_get_type ())
#define BALA_USED_ATTR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_USED_ATTR, ValaUsedAttr))
#define BALA_USED_ATTR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_USED_ATTR, ValaUsedAttrClass))
#define BALA_IS_USED_ATTR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_USED_ATTR))
#define BALA_IS_USED_ATTR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_USED_ATTR))
#define BALA_USED_ATTR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_USED_ATTR, ValaUsedAttrClass))

typedef struct _ValaUsedAttr ValaUsedAttr;
typedef struct _ValaUsedAttrClass ValaUsedAttrClass;

#define BALA_TYPE_SOURCE_FILE (bala_source_file_get_type ())
#define BALA_SOURCE_FILE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_SOURCE_FILE, ValaSourceFile))
#define BALA_SOURCE_FILE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_SOURCE_FILE, ValaSourceFileClass))
#define BALA_IS_SOURCE_FILE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_SOURCE_FILE))
#define BALA_IS_SOURCE_FILE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_SOURCE_FILE))
#define BALA_SOURCE_FILE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_SOURCE_FILE, ValaSourceFileClass))

typedef struct _ValaSourceFile ValaSourceFile;
typedef struct _ValaSourceFileClass ValaSourceFileClass;
typedef struct _ValaCodeVisitorPrivate ValaCodeVisitorPrivate;

#define BALA_TYPE_ENUM_VALUE (bala_enum_value_get_type ())
#define BALA_ENUM_VALUE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_ENUM_VALUE, ValaEnumValue))
#define BALA_ENUM_VALUE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_ENUM_VALUE, ValaEnumValueClass))
#define BALA_IS_ENUM_VALUE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_ENUM_VALUE))
#define BALA_IS_ENUM_VALUE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_ENUM_VALUE))
#define BALA_ENUM_VALUE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_ENUM_VALUE, ValaEnumValueClass))

typedef struct _ValaEnumValue ValaEnumValue;
typedef struct _ValaEnumValueClass ValaEnumValueClass;

#define BALA_TYPE_ERROR_CODE (bala_error_code_get_type ())
#define BALA_ERROR_CODE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_ERROR_CODE, ValaErrorCode))
#define BALA_ERROR_CODE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_ERROR_CODE, ValaErrorCodeClass))
#define BALA_IS_ERROR_CODE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_ERROR_CODE))
#define BALA_IS_ERROR_CODE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_ERROR_CODE))
#define BALA_ERROR_CODE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_ERROR_CODE, ValaErrorCodeClass))

typedef struct _ValaErrorCode ValaErrorCode;
typedef struct _ValaErrorCodeClass ValaErrorCodeClass;

#define BALA_TYPE_PROPERTY_ACCESSOR (bala_property_accessor_get_type ())
#define BALA_PROPERTY_ACCESSOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_PROPERTY_ACCESSOR, ValaPropertyAccessor))
#define BALA_PROPERTY_ACCESSOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_PROPERTY_ACCESSOR, ValaPropertyAccessorClass))
#define BALA_IS_PROPERTY_ACCESSOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_PROPERTY_ACCESSOR))
#define BALA_IS_PROPERTY_ACCESSOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_PROPERTY_ACCESSOR))
#define BALA_PROPERTY_ACCESSOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_PROPERTY_ACCESSOR, ValaPropertyAccessorClass))

typedef struct _ValaPropertyAccessor ValaPropertyAccessor;
typedef struct _ValaPropertyAccessorClass ValaPropertyAccessorClass;

#define BALA_TYPE_USING_DIRECTIVE (bala_using_directive_get_type ())
#define BALA_USING_DIRECTIVE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_USING_DIRECTIVE, ValaUsingDirective))
#define BALA_USING_DIRECTIVE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_USING_DIRECTIVE, ValaUsingDirectiveClass))
#define BALA_IS_USING_DIRECTIVE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_USING_DIRECTIVE))
#define BALA_IS_USING_DIRECTIVE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_USING_DIRECTIVE))
#define BALA_USING_DIRECTIVE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_USING_DIRECTIVE, ValaUsingDirectiveClass))

typedef struct _ValaUsingDirective ValaUsingDirective;
typedef struct _ValaUsingDirectiveClass ValaUsingDirectiveClass;

#define BALA_TYPE_EMPTY_STATEMENT (bala_empty_statement_get_type ())
#define BALA_EMPTY_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_EMPTY_STATEMENT, ValaEmptyStatement))
#define BALA_EMPTY_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_EMPTY_STATEMENT, ValaEmptyStatementClass))
#define BALA_IS_EMPTY_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_EMPTY_STATEMENT))
#define BALA_IS_EMPTY_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_EMPTY_STATEMENT))
#define BALA_EMPTY_STATEMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_EMPTY_STATEMENT, ValaEmptyStatementClass))

typedef struct _ValaEmptyStatement ValaEmptyStatement;
typedef struct _ValaEmptyStatementClass ValaEmptyStatementClass;

#define BALA_TYPE_DECLARATION_STATEMENT (bala_declaration_statement_get_type ())
#define BALA_DECLARATION_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_DECLARATION_STATEMENT, ValaDeclarationStatement))
#define BALA_DECLARATION_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_DECLARATION_STATEMENT, ValaDeclarationStatementClass))
#define BALA_IS_DECLARATION_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_DECLARATION_STATEMENT))
#define BALA_IS_DECLARATION_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_DECLARATION_STATEMENT))
#define BALA_DECLARATION_STATEMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_DECLARATION_STATEMENT, ValaDeclarationStatementClass))

typedef struct _ValaDeclarationStatement ValaDeclarationStatement;
typedef struct _ValaDeclarationStatementClass ValaDeclarationStatementClass;

#define BALA_TYPE_EXPRESSION_STATEMENT (bala_expression_statement_get_type ())
#define BALA_EXPRESSION_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_EXPRESSION_STATEMENT, ValaExpressionStatement))
#define BALA_EXPRESSION_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_EXPRESSION_STATEMENT, ValaExpressionStatementClass))
#define BALA_IS_EXPRESSION_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_EXPRESSION_STATEMENT))
#define BALA_IS_EXPRESSION_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_EXPRESSION_STATEMENT))
#define BALA_EXPRESSION_STATEMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_EXPRESSION_STATEMENT, ValaExpressionStatementClass))

typedef struct _ValaExpressionStatement ValaExpressionStatement;
typedef struct _ValaExpressionStatementClass ValaExpressionStatementClass;

#define BALA_TYPE_IF_STATEMENT (bala_if_statement_get_type ())
#define BALA_IF_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_IF_STATEMENT, ValaIfStatement))
#define BALA_IF_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_IF_STATEMENT, ValaIfStatementClass))
#define BALA_IS_IF_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_IF_STATEMENT))
#define BALA_IS_IF_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_IF_STATEMENT))
#define BALA_IF_STATEMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_IF_STATEMENT, ValaIfStatementClass))

typedef struct _ValaIfStatement ValaIfStatement;
typedef struct _ValaIfStatementClass ValaIfStatementClass;

#define BALA_TYPE_SWITCH_STATEMENT (bala_switch_statement_get_type ())
#define BALA_SWITCH_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_SWITCH_STATEMENT, ValaSwitchStatement))
#define BALA_SWITCH_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_SWITCH_STATEMENT, ValaSwitchStatementClass))
#define BALA_IS_SWITCH_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_SWITCH_STATEMENT))
#define BALA_IS_SWITCH_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_SWITCH_STATEMENT))
#define BALA_SWITCH_STATEMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_SWITCH_STATEMENT, ValaSwitchStatementClass))

typedef struct _ValaSwitchStatement ValaSwitchStatement;
typedef struct _ValaSwitchStatementClass ValaSwitchStatementClass;

#define BALA_TYPE_SWITCH_SECTION (bala_switch_section_get_type ())
#define BALA_SWITCH_SECTION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_SWITCH_SECTION, ValaSwitchSection))
#define BALA_SWITCH_SECTION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_SWITCH_SECTION, ValaSwitchSectionClass))
#define BALA_IS_SWITCH_SECTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_SWITCH_SECTION))
#define BALA_IS_SWITCH_SECTION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_SWITCH_SECTION))
#define BALA_SWITCH_SECTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_SWITCH_SECTION, ValaSwitchSectionClass))

typedef struct _ValaSwitchSection ValaSwitchSection;
typedef struct _ValaSwitchSectionClass ValaSwitchSectionClass;

#define BALA_TYPE_SWITCH_LABEL (bala_switch_label_get_type ())
#define BALA_SWITCH_LABEL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_SWITCH_LABEL, ValaSwitchLabel))
#define BALA_SWITCH_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_SWITCH_LABEL, ValaSwitchLabelClass))
#define BALA_IS_SWITCH_LABEL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_SWITCH_LABEL))
#define BALA_IS_SWITCH_LABEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_SWITCH_LABEL))
#define BALA_SWITCH_LABEL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_SWITCH_LABEL, ValaSwitchLabelClass))

typedef struct _ValaSwitchLabel ValaSwitchLabel;
typedef struct _ValaSwitchLabelClass ValaSwitchLabelClass;

#define BALA_TYPE_LOOP (bala_loop_get_type ())
#define BALA_LOOP(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_LOOP, ValaLoop))
#define BALA_LOOP_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_LOOP, ValaLoopClass))
#define BALA_IS_LOOP(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_LOOP))
#define BALA_IS_LOOP_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_LOOP))
#define BALA_LOOP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_LOOP, ValaLoopClass))

typedef struct _ValaLoop ValaLoop;
typedef struct _ValaLoopClass ValaLoopClass;

#define BALA_TYPE_WHILE_STATEMENT (bala_while_statement_get_type ())
#define BALA_WHILE_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_WHILE_STATEMENT, ValaWhileStatement))
#define BALA_WHILE_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_WHILE_STATEMENT, ValaWhileStatementClass))
#define BALA_IS_WHILE_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_WHILE_STATEMENT))
#define BALA_IS_WHILE_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_WHILE_STATEMENT))
#define BALA_WHILE_STATEMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_WHILE_STATEMENT, ValaWhileStatementClass))

typedef struct _ValaWhileStatement ValaWhileStatement;
typedef struct _ValaWhileStatementClass ValaWhileStatementClass;

#define BALA_TYPE_DO_STATEMENT (bala_do_statement_get_type ())
#define BALA_DO_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_DO_STATEMENT, ValaDoStatement))
#define BALA_DO_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_DO_STATEMENT, ValaDoStatementClass))
#define BALA_IS_DO_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_DO_STATEMENT))
#define BALA_IS_DO_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_DO_STATEMENT))
#define BALA_DO_STATEMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_DO_STATEMENT, ValaDoStatementClass))

typedef struct _ValaDoStatement ValaDoStatement;
typedef struct _ValaDoStatementClass ValaDoStatementClass;

#define BALA_TYPE_FOR_STATEMENT (bala_for_statement_get_type ())
#define BALA_FOR_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_FOR_STATEMENT, ValaForStatement))
#define BALA_FOR_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_FOR_STATEMENT, ValaForStatementClass))
#define BALA_IS_FOR_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_FOR_STATEMENT))
#define BALA_IS_FOR_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_FOR_STATEMENT))
#define BALA_FOR_STATEMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_FOR_STATEMENT, ValaForStatementClass))

typedef struct _ValaForStatement ValaForStatement;
typedef struct _ValaForStatementClass ValaForStatementClass;

#define BALA_TYPE_FOREACH_STATEMENT (bala_foreach_statement_get_type ())
#define BALA_FOREACH_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_FOREACH_STATEMENT, ValaForeachStatement))
#define BALA_FOREACH_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_FOREACH_STATEMENT, ValaForeachStatementClass))
#define BALA_IS_FOREACH_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_FOREACH_STATEMENT))
#define BALA_IS_FOREACH_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_FOREACH_STATEMENT))
#define BALA_FOREACH_STATEMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_FOREACH_STATEMENT, ValaForeachStatementClass))

typedef struct _ValaForeachStatement ValaForeachStatement;
typedef struct _ValaForeachStatementClass ValaForeachStatementClass;

#define BALA_TYPE_CONTINUE_STATEMENT (bala_continue_statement_get_type ())
#define BALA_CONTINUE_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_CONTINUE_STATEMENT, ValaContinueStatement))
#define BALA_CONTINUE_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_CONTINUE_STATEMENT, ValaContinueStatementClass))
#define BALA_IS_CONTINUE_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_CONTINUE_STATEMENT))
#define BALA_IS_CONTINUE_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_CONTINUE_STATEMENT))
#define BALA_CONTINUE_STATEMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_CONTINUE_STATEMENT, ValaContinueStatementClass))

typedef struct _ValaContinueStatement ValaContinueStatement;
typedef struct _ValaContinueStatementClass ValaContinueStatementClass;

#define BALA_TYPE_RETURN_STATEMENT (bala_return_statement_get_type ())
#define BALA_RETURN_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_RETURN_STATEMENT, ValaReturnStatement))
#define BALA_RETURN_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_RETURN_STATEMENT, ValaReturnStatementClass))
#define BALA_IS_RETURN_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_RETURN_STATEMENT))
#define BALA_IS_RETURN_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_RETURN_STATEMENT))
#define BALA_RETURN_STATEMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_RETURN_STATEMENT, ValaReturnStatementClass))

typedef struct _ValaReturnStatement ValaReturnStatement;
typedef struct _ValaReturnStatementClass ValaReturnStatementClass;

#define BALA_TYPE_YIELD_STATEMENT (bala_yield_statement_get_type ())
#define BALA_YIELD_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_YIELD_STATEMENT, ValaYieldStatement))
#define BALA_YIELD_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_YIELD_STATEMENT, ValaYieldStatementClass))
#define BALA_IS_YIELD_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_YIELD_STATEMENT))
#define BALA_IS_YIELD_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_YIELD_STATEMENT))
#define BALA_YIELD_STATEMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_YIELD_STATEMENT, ValaYieldStatementClass))

typedef struct _ValaYieldStatement ValaYieldStatement;
typedef struct _ValaYieldStatementClass ValaYieldStatementClass;

#define BALA_TYPE_THROW_STATEMENT (bala_throw_statement_get_type ())
#define BALA_THROW_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_THROW_STATEMENT, ValaThrowStatement))
#define BALA_THROW_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_THROW_STATEMENT, ValaThrowStatementClass))
#define BALA_IS_THROW_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_THROW_STATEMENT))
#define BALA_IS_THROW_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_THROW_STATEMENT))
#define BALA_THROW_STATEMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_THROW_STATEMENT, ValaThrowStatementClass))

typedef struct _ValaThrowStatement ValaThrowStatement;
typedef struct _ValaThrowStatementClass ValaThrowStatementClass;

#define BALA_TYPE_TRY_STATEMENT (bala_try_statement_get_type ())
#define BALA_TRY_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_TRY_STATEMENT, ValaTryStatement))
#define BALA_TRY_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_TRY_STATEMENT, ValaTryStatementClass))
#define BALA_IS_TRY_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_TRY_STATEMENT))
#define BALA_IS_TRY_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_TRY_STATEMENT))
#define BALA_TRY_STATEMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_TRY_STATEMENT, ValaTryStatementClass))

typedef struct _ValaTryStatement ValaTryStatement;
typedef struct _ValaTryStatementClass ValaTryStatementClass;

#define BALA_TYPE_LOCK_STATEMENT (bala_lock_statement_get_type ())
#define BALA_LOCK_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_LOCK_STATEMENT, ValaLockStatement))
#define BALA_LOCK_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_LOCK_STATEMENT, ValaLockStatementClass))
#define BALA_IS_LOCK_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_LOCK_STATEMENT))
#define BALA_IS_LOCK_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_LOCK_STATEMENT))
#define BALA_LOCK_STATEMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_LOCK_STATEMENT, ValaLockStatementClass))

typedef struct _ValaLockStatement ValaLockStatement;
typedef struct _ValaLockStatementClass ValaLockStatementClass;

#define BALA_TYPE_UNLOCK_STATEMENT (bala_unlock_statement_get_type ())
#define BALA_UNLOCK_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_UNLOCK_STATEMENT, ValaUnlockStatement))
#define BALA_UNLOCK_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_UNLOCK_STATEMENT, ValaUnlockStatementClass))
#define BALA_IS_UNLOCK_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_UNLOCK_STATEMENT))
#define BALA_IS_UNLOCK_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_UNLOCK_STATEMENT))
#define BALA_UNLOCK_STATEMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_UNLOCK_STATEMENT, ValaUnlockStatementClass))

typedef struct _ValaUnlockStatement ValaUnlockStatement;
typedef struct _ValaUnlockStatementClass ValaUnlockStatementClass;

#define BALA_TYPE_DELETE_STATEMENT (bala_delete_statement_get_type ())
#define BALA_DELETE_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_DELETE_STATEMENT, ValaDeleteStatement))
#define BALA_DELETE_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_DELETE_STATEMENT, ValaDeleteStatementClass))
#define BALA_IS_DELETE_STATEMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_DELETE_STATEMENT))
#define BALA_IS_DELETE_STATEMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_DELETE_STATEMENT))
#define BALA_DELETE_STATEMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_DELETE_STATEMENT, ValaDeleteStatementClass))

typedef struct _ValaDeleteStatement ValaDeleteStatement;
typedef struct _ValaDeleteStatementClass ValaDeleteStatementClass;

#define BALA_TYPE_INTEGER_LITERAL (bala_integer_literal_get_type ())
#define BALA_INTEGER_LITERAL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_INTEGER_LITERAL, ValaIntegerLiteral))
#define BALA_INTEGER_LITERAL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_INTEGER_LITERAL, ValaIntegerLiteralClass))
#define BALA_IS_INTEGER_LITERAL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_INTEGER_LITERAL))
#define BALA_IS_INTEGER_LITERAL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_INTEGER_LITERAL))
#define BALA_INTEGER_LITERAL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_INTEGER_LITERAL, ValaIntegerLiteralClass))

typedef struct _ValaIntegerLiteral ValaIntegerLiteral;
typedef struct _ValaIntegerLiteralClass ValaIntegerLiteralClass;

#define BALA_TYPE_REAL_LITERAL (bala_real_literal_get_type ())
#define BALA_REAL_LITERAL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_REAL_LITERAL, ValaRealLiteral))
#define BALA_REAL_LITERAL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_REAL_LITERAL, ValaRealLiteralClass))
#define BALA_IS_REAL_LITERAL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_REAL_LITERAL))
#define BALA_IS_REAL_LITERAL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_REAL_LITERAL))
#define BALA_REAL_LITERAL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_REAL_LITERAL, ValaRealLiteralClass))

typedef struct _ValaRealLiteral ValaRealLiteral;
typedef struct _ValaRealLiteralClass ValaRealLiteralClass;

#define BALA_TYPE_REGEX_LITERAL (bala_regex_literal_get_type ())
#define BALA_REGEX_LITERAL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_REGEX_LITERAL, ValaRegexLiteral))
#define BALA_REGEX_LITERAL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_REGEX_LITERAL, ValaRegexLiteralClass))
#define BALA_IS_REGEX_LITERAL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_REGEX_LITERAL))
#define BALA_IS_REGEX_LITERAL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_REGEX_LITERAL))
#define BALA_REGEX_LITERAL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_REGEX_LITERAL, ValaRegexLiteralClass))

typedef struct _ValaRegexLiteral ValaRegexLiteral;
typedef struct _ValaRegexLiteralClass ValaRegexLiteralClass;

#define BALA_TYPE_STRING_LITERAL (bala_string_literal_get_type ())
#define BALA_STRING_LITERAL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_STRING_LITERAL, ValaStringLiteral))
#define BALA_STRING_LITERAL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_STRING_LITERAL, ValaStringLiteralClass))
#define BALA_IS_STRING_LITERAL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_STRING_LITERAL))
#define BALA_IS_STRING_LITERAL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_STRING_LITERAL))
#define BALA_STRING_LITERAL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_STRING_LITERAL, ValaStringLiteralClass))

typedef struct _ValaStringLiteral ValaStringLiteral;
typedef struct _ValaStringLiteralClass ValaStringLiteralClass;

#define BALA_TYPE_TEMPLATE (bala_template_get_type ())
#define BALA_TEMPLATE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_TEMPLATE, ValaTemplate))
#define BALA_TEMPLATE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_TEMPLATE, ValaTemplateClass))
#define BALA_IS_TEMPLATE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_TEMPLATE))
#define BALA_IS_TEMPLATE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_TEMPLATE))
#define BALA_TEMPLATE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_TEMPLATE, ValaTemplateClass))

typedef struct _ValaTemplate ValaTemplate;
typedef struct _ValaTemplateClass ValaTemplateClass;

#define BALA_TYPE_TUPLE (bala_tuple_get_type ())
#define BALA_TUPLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_TUPLE, ValaTuple))
#define BALA_TUPLE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_TUPLE, ValaTupleClass))
#define BALA_IS_TUPLE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_TUPLE))
#define BALA_IS_TUPLE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_TUPLE))
#define BALA_TUPLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_TUPLE, ValaTupleClass))

typedef struct _ValaTuple ValaTuple;
typedef struct _ValaTupleClass ValaTupleClass;

#define BALA_TYPE_NULL_LITERAL (bala_null_literal_get_type ())
#define BALA_NULL_LITERAL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_NULL_LITERAL, ValaNullLiteral))
#define BALA_NULL_LITERAL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_NULL_LITERAL, ValaNullLiteralClass))
#define BALA_IS_NULL_LITERAL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_NULL_LITERAL))
#define BALA_IS_NULL_LITERAL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_NULL_LITERAL))
#define BALA_NULL_LITERAL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_NULL_LITERAL, ValaNullLiteralClass))

typedef struct _ValaNullLiteral ValaNullLiteral;
typedef struct _ValaNullLiteralClass ValaNullLiteralClass;

#define BALA_TYPE_MEMBER_ACCESS (bala_member_access_get_type ())
#define BALA_MEMBER_ACCESS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_MEMBER_ACCESS, ValaMemberAccess))
#define BALA_MEMBER_ACCESS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_MEMBER_ACCESS, ValaMemberAccessClass))
#define BALA_IS_MEMBER_ACCESS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_MEMBER_ACCESS))
#define BALA_IS_MEMBER_ACCESS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_MEMBER_ACCESS))
#define BALA_MEMBER_ACCESS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_MEMBER_ACCESS, ValaMemberAccessClass))

typedef struct _ValaMemberAccess ValaMemberAccess;
typedef struct _ValaMemberAccessClass ValaMemberAccessClass;

#define BALA_TYPE_METHOD_CALL (bala_method_call_get_type ())
#define BALA_METHOD_CALL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_METHOD_CALL, ValaMethodCall))
#define BALA_METHOD_CALL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_METHOD_CALL, ValaMethodCallClass))
#define BALA_IS_METHOD_CALL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_METHOD_CALL))
#define BALA_IS_METHOD_CALL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_METHOD_CALL))
#define BALA_METHOD_CALL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_METHOD_CALL, ValaMethodCallClass))

typedef struct _ValaMethodCall ValaMethodCall;
typedef struct _ValaMethodCallClass ValaMethodCallClass;

#define BALA_TYPE_ELEMENT_ACCESS (bala_element_access_get_type ())
#define BALA_ELEMENT_ACCESS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_ELEMENT_ACCESS, ValaElementAccess))
#define BALA_ELEMENT_ACCESS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_ELEMENT_ACCESS, ValaElementAccessClass))
#define BALA_IS_ELEMENT_ACCESS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_ELEMENT_ACCESS))
#define BALA_IS_ELEMENT_ACCESS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_ELEMENT_ACCESS))
#define BALA_ELEMENT_ACCESS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_ELEMENT_ACCESS, ValaElementAccessClass))

typedef struct _ValaElementAccess ValaElementAccess;
typedef struct _ValaElementAccessClass ValaElementAccessClass;

#define BALA_TYPE_SLICE_EXPRESSION (bala_slice_expression_get_type ())
#define BALA_SLICE_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_SLICE_EXPRESSION, ValaSliceExpression))
#define BALA_SLICE_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_SLICE_EXPRESSION, ValaSliceExpressionClass))
#define BALA_IS_SLICE_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_SLICE_EXPRESSION))
#define BALA_IS_SLICE_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_SLICE_EXPRESSION))
#define BALA_SLICE_EXPRESSION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_SLICE_EXPRESSION, ValaSliceExpressionClass))

typedef struct _ValaSliceExpression ValaSliceExpression;
typedef struct _ValaSliceExpressionClass ValaSliceExpressionClass;

#define BALA_TYPE_POSTFIX_EXPRESSION (bala_postfix_expression_get_type ())
#define BALA_POSTFIX_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_POSTFIX_EXPRESSION, ValaPostfixExpression))
#define BALA_POSTFIX_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_POSTFIX_EXPRESSION, ValaPostfixExpressionClass))
#define BALA_IS_POSTFIX_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_POSTFIX_EXPRESSION))
#define BALA_IS_POSTFIX_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_POSTFIX_EXPRESSION))
#define BALA_POSTFIX_EXPRESSION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_POSTFIX_EXPRESSION, ValaPostfixExpressionClass))

typedef struct _ValaPostfixExpression ValaPostfixExpression;
typedef struct _ValaPostfixExpressionClass ValaPostfixExpressionClass;

#define BALA_TYPE_OBJECT_CREATION_EXPRESSION (bala_object_creation_expression_get_type ())
#define BALA_OBJECT_CREATION_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_OBJECT_CREATION_EXPRESSION, ValaObjectCreationExpression))
#define BALA_OBJECT_CREATION_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_OBJECT_CREATION_EXPRESSION, ValaObjectCreationExpressionClass))
#define BALA_IS_OBJECT_CREATION_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_OBJECT_CREATION_EXPRESSION))
#define BALA_IS_OBJECT_CREATION_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_OBJECT_CREATION_EXPRESSION))
#define BALA_OBJECT_CREATION_EXPRESSION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_OBJECT_CREATION_EXPRESSION, ValaObjectCreationExpressionClass))

typedef struct _ValaObjectCreationExpression ValaObjectCreationExpression;
typedef struct _ValaObjectCreationExpressionClass ValaObjectCreationExpressionClass;

#define BALA_TYPE_SIZEOF_EXPRESSION (bala_sizeof_expression_get_type ())
#define BALA_SIZEOF_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_SIZEOF_EXPRESSION, ValaSizeofExpression))
#define BALA_SIZEOF_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_SIZEOF_EXPRESSION, ValaSizeofExpressionClass))
#define BALA_IS_SIZEOF_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_SIZEOF_EXPRESSION))
#define BALA_IS_SIZEOF_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_SIZEOF_EXPRESSION))
#define BALA_SIZEOF_EXPRESSION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_SIZEOF_EXPRESSION, ValaSizeofExpressionClass))

typedef struct _ValaSizeofExpression ValaSizeofExpression;
typedef struct _ValaSizeofExpressionClass ValaSizeofExpressionClass;

#define BALA_TYPE_TYPEOF_EXPRESSION (bala_typeof_expression_get_type ())
#define BALA_TYPEOF_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_TYPEOF_EXPRESSION, ValaTypeofExpression))
#define BALA_TYPEOF_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_TYPEOF_EXPRESSION, ValaTypeofExpressionClass))
#define BALA_IS_TYPEOF_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_TYPEOF_EXPRESSION))
#define BALA_IS_TYPEOF_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_TYPEOF_EXPRESSION))
#define BALA_TYPEOF_EXPRESSION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_TYPEOF_EXPRESSION, ValaTypeofExpressionClass))

typedef struct _ValaTypeofExpression ValaTypeofExpression;
typedef struct _ValaTypeofExpressionClass ValaTypeofExpressionClass;

#define BALA_TYPE_UNARY_EXPRESSION (bala_unary_expression_get_type ())
#define BALA_UNARY_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_UNARY_EXPRESSION, ValaUnaryExpression))
#define BALA_UNARY_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_UNARY_EXPRESSION, ValaUnaryExpressionClass))
#define BALA_IS_UNARY_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_UNARY_EXPRESSION))
#define BALA_IS_UNARY_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_UNARY_EXPRESSION))
#define BALA_UNARY_EXPRESSION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_UNARY_EXPRESSION, ValaUnaryExpressionClass))

typedef struct _ValaUnaryExpression ValaUnaryExpression;
typedef struct _ValaUnaryExpressionClass ValaUnaryExpressionClass;

#define BALA_TYPE_NAMED_ARGUMENT (bala_named_argument_get_type ())
#define BALA_NAMED_ARGUMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_NAMED_ARGUMENT, ValaNamedArgument))
#define BALA_NAMED_ARGUMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_NAMED_ARGUMENT, ValaNamedArgumentClass))
#define BALA_IS_NAMED_ARGUMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_NAMED_ARGUMENT))
#define BALA_IS_NAMED_ARGUMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_NAMED_ARGUMENT))
#define BALA_NAMED_ARGUMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_NAMED_ARGUMENT, ValaNamedArgumentClass))

typedef struct _ValaNamedArgument ValaNamedArgument;
typedef struct _ValaNamedArgumentClass ValaNamedArgumentClass;

#define BALA_TYPE_POINTER_INDIRECTION (bala_pointer_indirection_get_type ())
#define BALA_POINTER_INDIRECTION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_POINTER_INDIRECTION, ValaPointerIndirection))
#define BALA_POINTER_INDIRECTION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_POINTER_INDIRECTION, ValaPointerIndirectionClass))
#define BALA_IS_POINTER_INDIRECTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_POINTER_INDIRECTION))
#define BALA_IS_POINTER_INDIRECTION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_POINTER_INDIRECTION))
#define BALA_POINTER_INDIRECTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_POINTER_INDIRECTION, ValaPointerIndirectionClass))

typedef struct _ValaPointerIndirection ValaPointerIndirection;
typedef struct _ValaPointerIndirectionClass ValaPointerIndirectionClass;

#define BALA_TYPE_REFERENCE_TRANSFER_EXPRESSION (bala_reference_transfer_expression_get_type ())
#define BALA_REFERENCE_TRANSFER_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_REFERENCE_TRANSFER_EXPRESSION, ValaReferenceTransferExpression))
#define BALA_REFERENCE_TRANSFER_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_REFERENCE_TRANSFER_EXPRESSION, ValaReferenceTransferExpressionClass))
#define BALA_IS_REFERENCE_TRANSFER_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_REFERENCE_TRANSFER_EXPRESSION))
#define BALA_IS_REFERENCE_TRANSFER_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_REFERENCE_TRANSFER_EXPRESSION))
#define BALA_REFERENCE_TRANSFER_EXPRESSION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_REFERENCE_TRANSFER_EXPRESSION, ValaReferenceTransferExpressionClass))

typedef struct _ValaReferenceTransferExpression ValaReferenceTransferExpression;
typedef struct _ValaReferenceTransferExpressionClass ValaReferenceTransferExpressionClass;

#define BALA_TYPE_TYPECHECK (bala_typecheck_get_type ())
#define BALA_TYPECHECK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_TYPECHECK, ValaTypeCheck))
#define BALA_TYPECHECK_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_TYPECHECK, ValaTypeCheckClass))
#define BALA_IS_TYPECHECK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_TYPECHECK))
#define BALA_IS_TYPECHECK_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_TYPECHECK))
#define BALA_TYPECHECK_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_TYPECHECK, ValaTypeCheckClass))

typedef struct _ValaTypeCheck ValaTypeCheck;
typedef struct _ValaTypeCheckClass ValaTypeCheckClass;

#define BALA_TYPE_CONDITIONAL_EXPRESSION (bala_conditional_expression_get_type ())
#define BALA_CONDITIONAL_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_CONDITIONAL_EXPRESSION, ValaConditionalExpression))
#define BALA_CONDITIONAL_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_CONDITIONAL_EXPRESSION, ValaConditionalExpressionClass))
#define BALA_IS_CONDITIONAL_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_CONDITIONAL_EXPRESSION))
#define BALA_IS_CONDITIONAL_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_CONDITIONAL_EXPRESSION))
#define BALA_CONDITIONAL_EXPRESSION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_CONDITIONAL_EXPRESSION, ValaConditionalExpressionClass))

typedef struct _ValaConditionalExpression ValaConditionalExpression;
typedef struct _ValaConditionalExpressionClass ValaConditionalExpressionClass;

#define BALA_TYPE_LAMBDA_EXPRESSION (bala_lambda_expression_get_type ())
#define BALA_LAMBDA_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_LAMBDA_EXPRESSION, ValaLambdaExpression))
#define BALA_LAMBDA_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_LAMBDA_EXPRESSION, ValaLambdaExpressionClass))
#define BALA_IS_LAMBDA_EXPRESSION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_LAMBDA_EXPRESSION))
#define BALA_IS_LAMBDA_EXPRESSION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_LAMBDA_EXPRESSION))
#define BALA_LAMBDA_EXPRESSION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_LAMBDA_EXPRESSION, ValaLambdaExpressionClass))

typedef struct _ValaLambdaExpression ValaLambdaExpression;
typedef struct _ValaLambdaExpressionClass ValaLambdaExpressionClass;
typedef struct _ValaCodeGeneratorPrivate ValaCodeGeneratorPrivate;

#define BALA_TYPE_TARGET_VALUE (bala_target_value_get_type ())
#define BALA_TARGET_VALUE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_TARGET_VALUE, ValaTargetValue))
#define BALA_TARGET_VALUE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_TARGET_VALUE, ValaTargetValueClass))
#define BALA_IS_TARGET_VALUE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_TARGET_VALUE))
#define BALA_IS_TARGET_VALUE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_TARGET_VALUE))
#define BALA_TARGET_VALUE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_TARGET_VALUE, ValaTargetValueClass))

typedef struct _ValaTargetValue ValaTargetValue;
typedef struct _ValaTargetValueClass ValaTargetValueClass;

#define BALA_TYPE_ATTRIBUTE_CACHE (bala_attribute_cache_get_type ())
#define BALA_ATTRIBUTE_CACHE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_ATTRIBUTE_CACHE, ValaAttributeCache))
#define BALA_ATTRIBUTE_CACHE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_ATTRIBUTE_CACHE, ValaAttributeCacheClass))
#define BALA_IS_ATTRIBUTE_CACHE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_ATTRIBUTE_CACHE))
#define BALA_IS_ATTRIBUTE_CACHE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_ATTRIBUTE_CACHE))
#define BALA_ATTRIBUTE_CACHE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_ATTRIBUTE_CACHE, ValaAttributeCacheClass))

typedef struct _ValaAttributeCache ValaAttributeCache;
typedef struct _ValaAttributeCacheClass ValaAttributeCacheClass;
typedef struct _ValaAttributeCachePrivate ValaAttributeCachePrivate;

#define BALA_TYPE_CODE_WRITER (bala_code_writer_get_type ())
#define BALA_CODE_WRITER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_CODE_WRITER, ValaCodeWriter))
#define BALA_CODE_WRITER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_CODE_WRITER, ValaCodeWriterClass))
#define BALA_IS_CODE_WRITER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_CODE_WRITER))
#define BALA_IS_CODE_WRITER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_CODE_WRITER))
#define BALA_CODE_WRITER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_CODE_WRITER, ValaCodeWriterClass))

typedef struct _ValaCodeWriter ValaCodeWriter;
typedef struct _ValaCodeWriterClass ValaCodeWriterClass;
typedef struct _ValaCodeWriterPrivate ValaCodeWriterPrivate;
typedef enum  {
	BALA_CODE_WRITER_TYPE_EXTERNAL,
	BALA_CODE_WRITER_TYPE_INTERNAL,
	BALA_CODE_WRITER_TYPE_FAST,
	BALA_CODE_WRITER_TYPE_DUMP,
	BALA_CODE_WRITER_TYPE_VAPIGEN
} ValaCodeWriterType;

#define BALA_TYPE_CODE_WRITER_TYPE (bala_code_writer_type_get_type ())
typedef struct _ValaCommentPrivate ValaCommentPrivate;

#define BALA_TYPE_GIR_COMMENT (bala_gir_comment_get_type ())
#define BALA_GIR_COMMENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_GIR_COMMENT, ValaGirComment))
#define BALA_GIR_COMMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_GIR_COMMENT, ValaGirCommentClass))
#define BALA_IS_GIR_COMMENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_GIR_COMMENT))
#define BALA_IS_GIR_COMMENT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_GIR_COMMENT))
#define BALA_GIR_COMMENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_GIR_COMMENT, ValaGirCommentClass))

typedef struct _ValaGirComment ValaGirComment;
typedef struct _ValaGirCommentClass ValaGirCommentClass;
typedef struct _ValaGirCommentPrivate ValaGirCommentPrivate;
typedef struct _ValaConditionalExpressionPrivate ValaConditionalExpressionPrivate;
typedef struct _ValaConstantPrivate ValaConstantPrivate;
typedef struct _ValaConstructorPrivate ValaConstructorPrivate;
typedef enum  {
	BALA_MEMBER_BINDING_INSTANCE,
	BALA_MEMBER_BINDING_CLASS,
	BALA_MEMBER_BINDING_STATIC
} ValaMemberBinding;

#define BALA_TYPE_MEMBER_BINDING (bala_member_binding_get_type ())
typedef struct _ValaContinueStatementPrivate ValaContinueStatementPrivate;
typedef struct _ValaCreationMethodPrivate ValaCreationMethodPrivate;
typedef struct _ValaDeclarationStatementPrivate ValaDeclarationStatementPrivate;
typedef struct _ValaDelegatePrivate ValaDelegatePrivate;

#define BALA_TYPE_DELEGATE_DESTROY_FIELD (bala_delegate_destroy_field_get_type ())
#define BALA_DELEGATE_DESTROY_FIELD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_DELEGATE_DESTROY_FIELD, ValaDelegateDestroyField))
#define BALA_DELEGATE_DESTROY_FIELD_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_DELEGATE_DESTROY_FIELD, ValaDelegateDestroyFieldClass))
#define BALA_IS_DELEGATE_DESTROY_FIELD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_DELEGATE_DESTROY_FIELD))
#define BALA_IS_DELEGATE_DESTROY_FIELD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_DELEGATE_DESTROY_FIELD))
#define BALA_DELEGATE_DESTROY_FIELD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_DELEGATE_DESTROY_FIELD, ValaDelegateDestroyFieldClass))

typedef struct _ValaDelegateDestroyField ValaDelegateDestroyField;
typedef struct _ValaDelegateDestroyFieldClass ValaDelegateDestroyFieldClass;
typedef struct _ValaDelegateDestroyFieldPrivate ValaDelegateDestroyFieldPrivate;

#define BALA_TYPE_DELEGATE_TARGET_FIELD (bala_delegate_target_field_get_type ())
#define BALA_DELEGATE_TARGET_FIELD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_DELEGATE_TARGET_FIELD, ValaDelegateTargetField))
#define BALA_DELEGATE_TARGET_FIELD_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_DELEGATE_TARGET_FIELD, ValaDelegateTargetFieldClass))
#define BALA_IS_DELEGATE_TARGET_FIELD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_DELEGATE_TARGET_FIELD))
#define BALA_IS_DELEGATE_TARGET_FIELD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_DELEGATE_TARGET_FIELD))
#define BALA_DELEGATE_TARGET_FIELD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_DELEGATE_TARGET_FIELD, ValaDelegateTargetFieldClass))

typedef struct _ValaDelegateTargetField ValaDelegateTargetField;
typedef struct _ValaDelegateTargetFieldClass ValaDelegateTargetFieldClass;
typedef struct _ValaDelegateTargetFieldPrivate ValaDelegateTargetFieldPrivate;

#define BALA_TYPE_DELEGATE_TYPE (bala_delegate_type_get_type ())
#define BALA_DELEGATE_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_DELEGATE_TYPE, ValaDelegateType))
#define BALA_DELEGATE_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_DELEGATE_TYPE, ValaDelegateTypeClass))
#define BALA_IS_DELEGATE_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_DELEGATE_TYPE))
#define BALA_IS_DELEGATE_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_DELEGATE_TYPE))
#define BALA_DELEGATE_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_DELEGATE_TYPE, ValaDelegateTypeClass))

typedef struct _ValaDelegateType ValaDelegateType;
typedef struct _ValaDelegateTypeClass ValaDelegateTypeClass;
typedef struct _ValaDelegateTypePrivate ValaDelegateTypePrivate;
typedef struct _ValaDeleteStatementPrivate ValaDeleteStatementPrivate;
typedef struct _ValaDestructorPrivate ValaDestructorPrivate;
typedef struct _ValaDoStatementPrivate ValaDoStatementPrivate;

#define BALA_TYPE_DYNAMIC_METHOD (bala_dynamic_method_get_type ())
#define BALA_DYNAMIC_METHOD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_DYNAMIC_METHOD, ValaDynamicMethod))
#define BALA_DYNAMIC_METHOD_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_DYNAMIC_METHOD, ValaDynamicMethodClass))
#define BALA_IS_DYNAMIC_METHOD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_DYNAMIC_METHOD))
#define BALA_IS_DYNAMIC_METHOD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_DYNAMIC_METHOD))
#define BALA_DYNAMIC_METHOD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_DYNAMIC_METHOD, ValaDynamicMethodClass))

typedef struct _ValaDynamicMethod ValaDynamicMethod;
typedef struct _ValaDynamicMethodClass ValaDynamicMethodClass;
typedef struct _ValaDynamicMethodPrivate ValaDynamicMethodPrivate;
typedef struct _ValaPropertyPrivate ValaPropertyPrivate;

#define BALA_TYPE_DYNAMIC_PROPERTY (bala_dynamic_property_get_type ())
#define BALA_DYNAMIC_PROPERTY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_DYNAMIC_PROPERTY, ValaDynamicProperty))
#define BALA_DYNAMIC_PROPERTY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_DYNAMIC_PROPERTY, ValaDynamicPropertyClass))
#define BALA_IS_DYNAMIC_PROPERTY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_DYNAMIC_PROPERTY))
#define BALA_IS_DYNAMIC_PROPERTY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_DYNAMIC_PROPERTY))
#define BALA_DYNAMIC_PROPERTY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_DYNAMIC_PROPERTY, ValaDynamicPropertyClass))

typedef struct _ValaDynamicProperty ValaDynamicProperty;
typedef struct _ValaDynamicPropertyClass ValaDynamicPropertyClass;
typedef struct _ValaDynamicPropertyPrivate ValaDynamicPropertyPrivate;
typedef struct _ValaSignalPrivate ValaSignalPrivate;

#define BALA_TYPE_DYNAMIC_SIGNAL (bala_dynamic_signal_get_type ())
#define BALA_DYNAMIC_SIGNAL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_DYNAMIC_SIGNAL, ValaDynamicSignal))
#define BALA_DYNAMIC_SIGNAL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_DYNAMIC_SIGNAL, ValaDynamicSignalClass))
#define BALA_IS_DYNAMIC_SIGNAL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_DYNAMIC_SIGNAL))
#define BALA_IS_DYNAMIC_SIGNAL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_DYNAMIC_SIGNAL))
#define BALA_DYNAMIC_SIGNAL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_DYNAMIC_SIGNAL, ValaDynamicSignalClass))

typedef struct _ValaDynamicSignal ValaDynamicSignal;
typedef struct _ValaDynamicSignalClass ValaDynamicSignalClass;
typedef struct _ValaDynamicSignalPrivate ValaDynamicSignalPrivate;
typedef struct _ValaElementAccessPrivate ValaElementAccessPrivate;
typedef struct _ValaEmptyStatementPrivate ValaEmptyStatementPrivate;
typedef struct _ValaEnumPrivate ValaEnumPrivate;
typedef struct _ValaEnumValuePrivate ValaEnumValuePrivate;

#define BALA_TYPE_ENUM_VALUE_TYPE (bala_enum_value_type_get_type ())
#define BALA_ENUM_VALUE_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_ENUM_VALUE_TYPE, ValaEnumValueType))
#define BALA_ENUM_VALUE_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_ENUM_VALUE_TYPE, ValaEnumValueTypeClass))
#define BALA_IS_ENUM_VALUE_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_ENUM_VALUE_TYPE))
#define BALA_IS_ENUM_VALUE_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_ENUM_VALUE_TYPE))
#define BALA_ENUM_VALUE_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_ENUM_VALUE_TYPE, ValaEnumValueTypeClass))

typedef struct _ValaEnumValueType ValaEnumValueType;
typedef struct _ValaEnumValueTypeClass ValaEnumValueTypeClass;
typedef struct _ValaEnumValueTypePrivate ValaEnumValueTypePrivate;
typedef struct _ValaErrorCodePrivate ValaErrorCodePrivate;
typedef struct _ValaErrorDomainPrivate ValaErrorDomainPrivate;

#define BALA_TYPE_ERROR_TYPE (bala_error_type_get_type ())
#define BALA_ERROR_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_ERROR_TYPE, ValaErrorType))
#define BALA_ERROR_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_ERROR_TYPE, ValaErrorTypeClass))
#define BALA_IS_ERROR_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_ERROR_TYPE))
#define BALA_IS_ERROR_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_ERROR_TYPE))
#define BALA_ERROR_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_ERROR_TYPE, ValaErrorTypeClass))

typedef struct _ValaErrorType ValaErrorType;
typedef struct _ValaErrorTypeClass ValaErrorTypeClass;
typedef struct _ValaErrorTypePrivate ValaErrorTypePrivate;
typedef struct _ValaExpressionStatementPrivate ValaExpressionStatementPrivate;

#define BALA_TYPE_FIELD_PROTOTYPE (bala_field_prototype_get_type ())
#define BALA_FIELD_PROTOTYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_FIELD_PROTOTYPE, ValaFieldPrototype))
#define BALA_FIELD_PROTOTYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_FIELD_PROTOTYPE, ValaFieldPrototypeClass))
#define BALA_IS_FIELD_PROTOTYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_FIELD_PROTOTYPE))
#define BALA_IS_FIELD_PROTOTYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_FIELD_PROTOTYPE))
#define BALA_FIELD_PROTOTYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_FIELD_PROTOTYPE, ValaFieldPrototypeClass))

typedef struct _ValaFieldPrototype ValaFieldPrototype;
typedef struct _ValaFieldPrototypeClass ValaFieldPrototypeClass;
typedef struct _ValaFieldPrototypePrivate ValaFieldPrototypePrivate;

#define BALA_TYPE_FLOATING_TYPE (bala_floating_type_get_type ())
#define BALA_FLOATING_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_FLOATING_TYPE, ValaFloatingType))
#define BALA_FLOATING_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_FLOATING_TYPE, ValaFloatingTypeClass))
#define BALA_IS_FLOATING_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_FLOATING_TYPE))
#define BALA_IS_FLOATING_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_FLOATING_TYPE))
#define BALA_FLOATING_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_FLOATING_TYPE, ValaFloatingTypeClass))

typedef struct _ValaFloatingType ValaFloatingType;
typedef struct _ValaFloatingTypeClass ValaFloatingTypeClass;
typedef struct _ValaFloatingTypePrivate ValaFloatingTypePrivate;
typedef struct _ValaFlowAnalyzerPrivate ValaFlowAnalyzerPrivate;
typedef struct _ValaForeachStatementPrivate ValaForeachStatementPrivate;
typedef struct _ValaForStatementPrivate ValaForStatementPrivate;

#define BALA_TYPE_GIR_PARSER (bala_gir_parser_get_type ())
#define BALA_GIR_PARSER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_GIR_PARSER, ValaGirParser))
#define BALA_GIR_PARSER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_GIR_PARSER, ValaGirParserClass))
#define BALA_IS_GIR_PARSER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_GIR_PARSER))
#define BALA_IS_GIR_PARSER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_GIR_PARSER))
#define BALA_GIR_PARSER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_GIR_PARSER, ValaGirParserClass))

typedef struct _ValaGirParser ValaGirParser;
typedef struct _ValaGirParserClass ValaGirParserClass;
typedef struct _ValaGirParserPrivate ValaGirParserPrivate;

#define BALA_TYPE_GENERIC_DESTROY_FIELD (bala_generic_destroy_field_get_type ())
#define BALA_GENERIC_DESTROY_FIELD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_GENERIC_DESTROY_FIELD, ValaGenericDestroyField))
#define BALA_GENERIC_DESTROY_FIELD_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_GENERIC_DESTROY_FIELD, ValaGenericDestroyFieldClass))
#define BALA_IS_GENERIC_DESTROY_FIELD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_GENERIC_DESTROY_FIELD))
#define BALA_IS_GENERIC_DESTROY_FIELD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_GENERIC_DESTROY_FIELD))
#define BALA_GENERIC_DESTROY_FIELD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_GENERIC_DESTROY_FIELD, ValaGenericDestroyFieldClass))

typedef struct _ValaGenericDestroyField ValaGenericDestroyField;
typedef struct _ValaGenericDestroyFieldClass ValaGenericDestroyFieldClass;
typedef struct _ValaGenericDestroyFieldPrivate ValaGenericDestroyFieldPrivate;

#define BALA_TYPE_GENERIC_DUP_FIELD (bala_generic_dup_field_get_type ())
#define BALA_GENERIC_DUP_FIELD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_GENERIC_DUP_FIELD, ValaGenericDupField))
#define BALA_GENERIC_DUP_FIELD_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_GENERIC_DUP_FIELD, ValaGenericDupFieldClass))
#define BALA_IS_GENERIC_DUP_FIELD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_GENERIC_DUP_FIELD))
#define BALA_IS_GENERIC_DUP_FIELD_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_GENERIC_DUP_FIELD))
#define BALA_GENERIC_DUP_FIELD_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_GENERIC_DUP_FIELD, ValaGenericDupFieldClass))

typedef struct _ValaGenericDupField ValaGenericDupField;
typedef struct _ValaGenericDupFieldClass ValaGenericDupFieldClass;
typedef struct _ValaGenericDupFieldPrivate ValaGenericDupFieldPrivate;

#define BALA_TYPE_GENERIC_TYPE (bala_generic_type_get_type ())
#define BALA_GENERIC_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_GENERIC_TYPE, ValaGenericType))
#define BALA_GENERIC_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_GENERIC_TYPE, ValaGenericTypeClass))
#define BALA_IS_GENERIC_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_GENERIC_TYPE))
#define BALA_IS_GENERIC_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_GENERIC_TYPE))
#define BALA_GENERIC_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_GENERIC_TYPE, ValaGenericTypeClass))

typedef struct _ValaGenericType ValaGenericType;
typedef struct _ValaGenericTypeClass ValaGenericTypeClass;
typedef struct _ValaGenericTypePrivate ValaGenericTypePrivate;

#define BALA_GENIE_TYPE_PARSER (bala_genie_parser_get_type ())
#define BALA_GENIE_PARSER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_GENIE_TYPE_PARSER, ValaGenieParser))
#define BALA_GENIE_PARSER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_GENIE_TYPE_PARSER, ValaGenieParserClass))
#define BALA_GENIE_IS_PARSER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_GENIE_TYPE_PARSER))
#define BALA_GENIE_IS_PARSER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_GENIE_TYPE_PARSER))
#define BALA_GENIE_PARSER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_GENIE_TYPE_PARSER, ValaGenieParserClass))

typedef struct _ValaGenieParser ValaGenieParser;
typedef struct _ValaGenieParserClass ValaGenieParserClass;
typedef struct _ValaGenieParserPrivate ValaGenieParserPrivate;

#define BALA_GENIE_TYPE_SCANNER (bala_genie_scanner_get_type ())
#define BALA_GENIE_SCANNER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_GENIE_TYPE_SCANNER, ValaGenieScanner))
#define BALA_GENIE_SCANNER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_GENIE_TYPE_SCANNER, ValaGenieScannerClass))
#define BALA_GENIE_IS_SCANNER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_GENIE_TYPE_SCANNER))
#define BALA_GENIE_IS_SCANNER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_GENIE_TYPE_SCANNER))
#define BALA_GENIE_SCANNER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_GENIE_TYPE_SCANNER, ValaGenieScannerClass))

typedef struct _ValaGenieScanner ValaGenieScanner;
typedef struct _ValaGenieScannerClass ValaGenieScannerClass;
typedef struct _ValaGenieScannerPrivate ValaGenieScannerPrivate;

#define BALA_TYPE_SOURCE_LOCATION (bala_source_location_get_type ())
typedef struct _ValaSourceLocation ValaSourceLocation;
typedef enum  {
	BALA_GENIE_TOKEN_TYPE_NONE,
	BALA_GENIE_TOKEN_TYPE_ABSTRACT,
	BALA_GENIE_TOKEN_TYPE_ARRAY,
	BALA_GENIE_TOKEN_TYPE_AS,
	BALA_GENIE_TOKEN_TYPE_ASSERT,
	BALA_GENIE_TOKEN_TYPE_ASSIGN,
	BALA_GENIE_TOKEN_TYPE_ASSIGN_ADD,
	BALA_GENIE_TOKEN_TYPE_ASSIGN_BITWISE_AND,
	BALA_GENIE_TOKEN_TYPE_ASSIGN_BITWISE_OR,
	BALA_GENIE_TOKEN_TYPE_ASSIGN_BITWISE_XOR,
	BALA_GENIE_TOKEN_TYPE_ASSIGN_DIV,
	BALA_GENIE_TOKEN_TYPE_ASSIGN_MUL,
	BALA_GENIE_TOKEN_TYPE_ASSIGN_PERCENT,
	BALA_GENIE_TOKEN_TYPE_ASSIGN_SHIFT_LEFT,
	BALA_GENIE_TOKEN_TYPE_ASSIGN_SUB,
	BALA_GENIE_TOKEN_TYPE_ASYNC,
	BALA_GENIE_TOKEN_TYPE_BITWISE_AND,
	BALA_GENIE_TOKEN_TYPE_BITWISE_OR,
	BALA_GENIE_TOKEN_TYPE_BREAK,
	BALA_GENIE_TOKEN_TYPE_CARRET,
	BALA_GENIE_TOKEN_TYPE_CASE,
	BALA_GENIE_TOKEN_TYPE_CHARACTER_LITERAL,
	BALA_GENIE_TOKEN_TYPE_CLASS,
	BALA_GENIE_TOKEN_TYPE_CLOSE_BRACE,
	BALA_GENIE_TOKEN_TYPE_CLOSE_BRACKET,
	BALA_GENIE_TOKEN_TYPE_CLOSE_PARENS,
	BALA_GENIE_TOKEN_TYPE_CLOSE_REGEX_LITERAL,
	BALA_GENIE_TOKEN_TYPE_CLOSE_TEMPLATE,
	BALA_GENIE_TOKEN_TYPE_COLON,
	BALA_GENIE_TOKEN_TYPE_COMMA,
	BALA_GENIE_TOKEN_TYPE_CONST,
	BALA_GENIE_TOKEN_TYPE_CONSTRUCT,
	BALA_GENIE_TOKEN_TYPE_CONTINUE,
	BALA_GENIE_TOKEN_TYPE_DEDENT,
	BALA_GENIE_TOKEN_TYPE_DEF,
	BALA_GENIE_TOKEN_TYPE_DEFAULT,
	BALA_GENIE_TOKEN_TYPE_DELEGATE,
	BALA_GENIE_TOKEN_TYPE_DELETE,
	BALA_GENIE_TOKEN_TYPE_DICT,
	BALA_GENIE_TOKEN_TYPE_DIV,
	BALA_GENIE_TOKEN_TYPE_DO,
	BALA_GENIE_TOKEN_TYPE_DOT,
	BALA_GENIE_TOKEN_TYPE_DOWNTO,
	BALA_GENIE_TOKEN_TYPE_DYNAMIC,
	BALA_GENIE_TOKEN_TYPE_ELLIPSIS,
	BALA_GENIE_TOKEN_TYPE_ELSE,
	BALA_GENIE_TOKEN_TYPE_ENUM,
	BALA_GENIE_TOKEN_TYPE_ENSURES,
	BALA_GENIE_TOKEN_TYPE_ERRORDOMAIN,
	BALA_GENIE_TOKEN_TYPE_EOF,
	BALA_GENIE_TOKEN_TYPE_EOL,
	BALA_GENIE_TOKEN_TYPE_EVENT,
	BALA_GENIE_TOKEN_TYPE_EXCEPT,
	BALA_GENIE_TOKEN_TYPE_EXTERN,
	BALA_GENIE_TOKEN_TYPE_FALSE,
	BALA_GENIE_TOKEN_TYPE_FINAL,
	BALA_GENIE_TOKEN_TYPE_FINALLY,
	BALA_GENIE_TOKEN_TYPE_FOR,
	BALA_GENIE_TOKEN_TYPE_GET,
	BALA_GENIE_TOKEN_TYPE_HASH,
	BALA_GENIE_TOKEN_TYPE_IDENTIFIER,
	BALA_GENIE_TOKEN_TYPE_IF,
	BALA_GENIE_TOKEN_TYPE_IMPLEMENTS,
	BALA_GENIE_TOKEN_TYPE_IN,
	BALA_GENIE_TOKEN_TYPE_INDENT,
	BALA_GENIE_TOKEN_TYPE_INIT,
	BALA_GENIE_TOKEN_TYPE_INLINE,
	BALA_GENIE_TOKEN_TYPE_INTEGER_LITERAL,
	BALA_GENIE_TOKEN_TYPE_INTERFACE,
	BALA_GENIE_TOKEN_TYPE_INTERNAL,
	BALA_GENIE_TOKEN_TYPE_INTERR,
	BALA_GENIE_TOKEN_TYPE_IS,
	BALA_GENIE_TOKEN_TYPE_ISA,
	BALA_GENIE_TOKEN_TYPE_LAMBDA,
	BALA_GENIE_TOKEN_TYPE_LIST,
	BALA_GENIE_TOKEN_TYPE_LOCK,
	BALA_GENIE_TOKEN_TYPE_MINUS,
	BALA_GENIE_TOKEN_TYPE_NAMESPACE,
	BALA_GENIE_TOKEN_TYPE_NEW,
	BALA_GENIE_TOKEN_TYPE_NULL,
	BALA_GENIE_TOKEN_TYPE_OF,
	BALA_GENIE_TOKEN_TYPE_OUT,
	BALA_GENIE_TOKEN_TYPE_OP_AND,
	BALA_GENIE_TOKEN_TYPE_OP_DEC,
	BALA_GENIE_TOKEN_TYPE_OP_EQ,
	BALA_GENIE_TOKEN_TYPE_OP_GE,
	BALA_GENIE_TOKEN_TYPE_OP_GT,
	BALA_GENIE_TOKEN_TYPE_OP_INC,
	BALA_GENIE_TOKEN_TYPE_OP_LE,
	BALA_GENIE_TOKEN_TYPE_OP_LT,
	BALA_GENIE_TOKEN_TYPE_OP_NE,
	BALA_GENIE_TOKEN_TYPE_OP_NEG,
	BALA_GENIE_TOKEN_TYPE_OP_OR,
	BALA_GENIE_TOKEN_TYPE_OP_PTR,
	BALA_GENIE_TOKEN_TYPE_OP_SHIFT_LEFT,
	BALA_GENIE_TOKEN_TYPE_OPEN_BRACE,
	BALA_GENIE_TOKEN_TYPE_OPEN_BRACKET,
	BALA_GENIE_TOKEN_TYPE_OPEN_PARENS,
	BALA_GENIE_TOKEN_TYPE_OPEN_REGEX_LITERAL,
	BALA_GENIE_TOKEN_TYPE_OPEN_TEMPLATE,
	BALA_GENIE_TOKEN_TYPE_OVERRIDE,
	BALA_GENIE_TOKEN_TYPE_OWNED,
	BALA_GENIE_TOKEN_TYPE_PARAMS,
	BALA_GENIE_TOKEN_TYPE_PASS,
	BALA_GENIE_TOKEN_TYPE_PERCENT,
	BALA_GENIE_TOKEN_TYPE_PLUS,
	BALA_GENIE_TOKEN_TYPE_PRINT,
	BALA_GENIE_TOKEN_TYPE_PRIVATE,
	BALA_GENIE_TOKEN_TYPE_PROP,
	BALA_GENIE_TOKEN_TYPE_PROTECTED,
	BALA_GENIE_TOKEN_TYPE_PUBLIC,
	BALA_GENIE_TOKEN_TYPE_RAISE,
	BALA_GENIE_TOKEN_TYPE_RAISES,
	BALA_GENIE_TOKEN_TYPE_READONLY,
	BALA_GENIE_TOKEN_TYPE_REAL_LITERAL,
	BALA_GENIE_TOKEN_TYPE_REF,
	BALA_GENIE_TOKEN_TYPE_REGEX_LITERAL,
	BALA_GENIE_TOKEN_TYPE_REQUIRES,
	BALA_GENIE_TOKEN_TYPE_RETURN,
	BALA_GENIE_TOKEN_TYPE_SEALED,
	BALA_GENIE_TOKEN_TYPE_SELF,
	BALA_GENIE_TOKEN_TYPE_SEMICOLON,
	BALA_GENIE_TOKEN_TYPE_SET,
	BALA_GENIE_TOKEN_TYPE_SIZEOF,
	BALA_GENIE_TOKEN_TYPE_STAR,
	BALA_GENIE_TOKEN_TYPE_STATIC,
	BALA_GENIE_TOKEN_TYPE_STRING_LITERAL,
	BALA_GENIE_TOKEN_TYPE_STRUCT,
	BALA_GENIE_TOKEN_TYPE_SUPER,
	BALA_GENIE_TOKEN_TYPE_TEMPLATE_STRING_LITERAL,
	BALA_GENIE_TOKEN_TYPE_TILDE,
	BALA_GENIE_TOKEN_TYPE_TO,
	BALA_GENIE_TOKEN_TYPE_TRUE,
	BALA_GENIE_TOKEN_TYPE_TRY,
	BALA_GENIE_TOKEN_TYPE_TYPEOF,
	BALA_GENIE_TOKEN_TYPE_UNOWNED,
	BALA_GENIE_TOKEN_TYPE_USES,
	BALA_GENIE_TOKEN_TYPE_VAR,
	BALA_GENIE_TOKEN_TYPE_VERBATIM_STRING_LITERAL,
	BALA_GENIE_TOKEN_TYPE_VIRTUAL,
	BALA_GENIE_TOKEN_TYPE_VOID,
	BALA_GENIE_TOKEN_TYPE_VOLATILE,
	BALA_GENIE_TOKEN_TYPE_WEAK,
	BALA_GENIE_TOKEN_TYPE_WHEN,
	BALA_GENIE_TOKEN_TYPE_WHILE,
	BALA_GENIE_TOKEN_TYPE_YIELD
} ValaGenieTokenType;

#define BALA_GENIE_TYPE_TOKEN_TYPE (bala_genie_token_type_get_type ())
typedef struct _ValaIfStatementPrivate ValaIfStatementPrivate;
typedef struct _ValaInitializerListPrivate ValaInitializerListPrivate;
typedef struct _ValaIntegerLiteralPrivate ValaIntegerLiteralPrivate;

#define BALA_TYPE_INTEGER_TYPE (bala_integer_type_get_type ())
#define BALA_INTEGER_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_INTEGER_TYPE, ValaIntegerType))
#define BALA_INTEGER_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_INTEGER_TYPE, ValaIntegerTypeClass))
#define BALA_IS_INTEGER_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_INTEGER_TYPE))
#define BALA_IS_INTEGER_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_INTEGER_TYPE))
#define BALA_INTEGER_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_INTEGER_TYPE, ValaIntegerTypeClass))

typedef struct _ValaIntegerType ValaIntegerType;
typedef struct _ValaIntegerTypeClass ValaIntegerTypeClass;
typedef struct _ValaIntegerTypePrivate ValaIntegerTypePrivate;
typedef struct _ValaInterfacePrivate ValaInterfacePrivate;

#define BALA_TYPE_INTERFACE_TYPE (bala_interface_type_get_type ())
#define BALA_INTERFACE_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_INTERFACE_TYPE, ValaInterfaceType))
#define BALA_INTERFACE_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_INTERFACE_TYPE, ValaInterfaceTypeClass))
#define BALA_IS_INTERFACE_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_INTERFACE_TYPE))
#define BALA_IS_INTERFACE_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_INTERFACE_TYPE))
#define BALA_INTERFACE_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_INTERFACE_TYPE, ValaInterfaceTypeClass))

typedef struct _ValaInterfaceType ValaInterfaceType;
typedef struct _ValaInterfaceTypeClass ValaInterfaceTypeClass;
typedef struct _ValaInterfaceTypePrivate ValaInterfaceTypePrivate;

#define BALA_TYPE_INVALID_TYPE (bala_invalid_type_get_type ())
#define BALA_INVALID_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_INVALID_TYPE, ValaInvalidType))
#define BALA_INVALID_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_INVALID_TYPE, ValaInvalidTypeClass))
#define BALA_IS_INVALID_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_INVALID_TYPE))
#define BALA_IS_INVALID_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_INVALID_TYPE))
#define BALA_INVALID_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_INVALID_TYPE, ValaInvalidTypeClass))

typedef struct _ValaInvalidType ValaInvalidType;
typedef struct _ValaInvalidTypeClass ValaInvalidTypeClass;
typedef struct _ValaInvalidTypePrivate ValaInvalidTypePrivate;
typedef struct _ValaLambdaExpressionPrivate ValaLambdaExpressionPrivate;
typedef struct _ValaLocalVariablePrivate ValaLocalVariablePrivate;
typedef struct _ValaLockStatementPrivate ValaLockStatementPrivate;
typedef struct _ValaLoopPrivate ValaLoopPrivate;

#define BALA_TYPE_MARKUP_READER (bala_markup_reader_get_type ())
#define BALA_MARKUP_READER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_MARKUP_READER, ValaMarkupReader))
#define BALA_MARKUP_READER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_MARKUP_READER, ValaMarkupReaderClass))
#define BALA_IS_MARKUP_READER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_MARKUP_READER))
#define BALA_IS_MARKUP_READER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_MARKUP_READER))
#define BALA_MARKUP_READER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_MARKUP_READER, ValaMarkupReaderClass))

typedef struct _ValaMarkupReader ValaMarkupReader;
typedef struct _ValaMarkupReaderClass ValaMarkupReaderClass;
typedef struct _ValaMarkupReaderPrivate ValaMarkupReaderPrivate;
typedef enum  {
	BALA_MARKUP_TOKEN_TYPE_NONE,
	BALA_MARKUP_TOKEN_TYPE_START_ELEMENT,
	BALA_MARKUP_TOKEN_TYPE_END_ELEMENT,
	BALA_MARKUP_TOKEN_TYPE_TEXT,
	BALA_MARKUP_TOKEN_TYPE_EOF
} ValaMarkupTokenType;

#define BALA_TYPE_MARKUP_TOKEN_TYPE (bala_markup_token_type_get_type ())
typedef struct _ValaMemberAccessPrivate ValaMemberAccessPrivate;

#define BALA_TYPE_MEMBER_INITIALIZER (bala_member_initializer_get_type ())
#define BALA_MEMBER_INITIALIZER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_MEMBER_INITIALIZER, ValaMemberInitializer))
#define BALA_MEMBER_INITIALIZER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_MEMBER_INITIALIZER, ValaMemberInitializerClass))
#define BALA_IS_MEMBER_INITIALIZER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_MEMBER_INITIALIZER))
#define BALA_IS_MEMBER_INITIALIZER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_MEMBER_INITIALIZER))
#define BALA_MEMBER_INITIALIZER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_MEMBER_INITIALIZER, ValaMemberInitializerClass))

typedef struct _ValaMemberInitializer ValaMemberInitializer;
typedef struct _ValaMemberInitializerClass ValaMemberInitializerClass;
typedef struct _ValaMemberInitializerPrivate ValaMemberInitializerPrivate;
typedef struct _ValaMethodCallPrivate ValaMethodCallPrivate;

#define BALA_TYPE_METHOD_TYPE (bala_method_type_get_type ())
#define BALA_METHOD_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_METHOD_TYPE, ValaMethodType))
#define BALA_METHOD_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_METHOD_TYPE, ValaMethodTypeClass))
#define BALA_IS_METHOD_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_METHOD_TYPE))
#define BALA_IS_METHOD_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_METHOD_TYPE))
#define BALA_METHOD_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_METHOD_TYPE, ValaMethodTypeClass))

typedef struct _ValaMethodType ValaMethodType;
typedef struct _ValaMethodTypeClass ValaMethodTypeClass;
typedef struct _ValaMethodTypePrivate ValaMethodTypePrivate;
typedef struct _ValaNamedArgumentPrivate ValaNamedArgumentPrivate;
typedef struct _ValaNamespacePrivate ValaNamespacePrivate;
typedef struct _ValaNullLiteralPrivate ValaNullLiteralPrivate;

#define BALA_TYPE_NULL_TYPE (bala_null_type_get_type ())
#define BALA_NULL_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_NULL_TYPE, ValaNullType))
#define BALA_NULL_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_NULL_TYPE, ValaNullTypeClass))
#define BALA_IS_NULL_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_NULL_TYPE))
#define BALA_IS_NULL_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_NULL_TYPE))
#define BALA_NULL_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_NULL_TYPE, ValaNullTypeClass))

typedef struct _ValaNullType ValaNullType;
typedef struct _ValaNullTypeClass ValaNullTypeClass;
typedef struct _ValaNullTypePrivate ValaNullTypePrivate;
typedef struct _ValaObjectCreationExpressionPrivate ValaObjectCreationExpressionPrivate;

#define BALA_TYPE_OBJECT_TYPE (bala_object_type_get_type ())
#define BALA_OBJECT_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_OBJECT_TYPE, ValaObjectType))
#define BALA_OBJECT_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_OBJECT_TYPE, ValaObjectTypeClass))
#define BALA_IS_OBJECT_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_OBJECT_TYPE))
#define BALA_IS_OBJECT_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_OBJECT_TYPE))
#define BALA_OBJECT_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_OBJECT_TYPE, ValaObjectTypeClass))

typedef struct _ValaObjectType ValaObjectType;
typedef struct _ValaObjectTypeClass ValaObjectTypeClass;
typedef struct _ValaObjectTypePrivate ValaObjectTypePrivate;
typedef struct _ValaParameterPrivate ValaParameterPrivate;
typedef enum  {
	BALA_PARAMETER_DIRECTION_IN,
	BALA_PARAMETER_DIRECTION_OUT,
	BALA_PARAMETER_DIRECTION_REF
} ValaParameterDirection;

#define BALA_TYPE_PARAMETER_DIRECTION (bala_parameter_direction_get_type ())

#define BALA_TYPE_PARSER (bala_parser_get_type ())
#define BALA_PARSER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_PARSER, ValaParser))
#define BALA_PARSER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_PARSER, ValaParserClass))
#define BALA_IS_PARSER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_PARSER))
#define BALA_IS_PARSER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_PARSER))
#define BALA_PARSER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_PARSER, ValaParserClass))

typedef struct _ValaParser ValaParser;
typedef struct _ValaParserClass ValaParserClass;
typedef struct _ValaParserPrivate ValaParserPrivate;
typedef struct _ValaPhiFunctionPrivate ValaPhiFunctionPrivate;
typedef struct _ValaPointerIndirectionPrivate ValaPointerIndirectionPrivate;

#define BALA_TYPE_POINTER_TYPE (bala_pointer_type_get_type ())
#define BALA_POINTER_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_POINTER_TYPE, ValaPointerType))
#define BALA_POINTER_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_POINTER_TYPE, ValaPointerTypeClass))
#define BALA_IS_POINTER_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_POINTER_TYPE))
#define BALA_IS_POINTER_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_POINTER_TYPE))
#define BALA_POINTER_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_POINTER_TYPE, ValaPointerTypeClass))

typedef struct _ValaPointerType ValaPointerType;
typedef struct _ValaPointerTypeClass ValaPointerTypeClass;
typedef struct _ValaPointerTypePrivate ValaPointerTypePrivate;
typedef struct _ValaPostfixExpressionPrivate ValaPostfixExpressionPrivate;
typedef struct _ValaPropertyAccessorPrivate ValaPropertyAccessorPrivate;

#define BALA_TYPE_PROPERTY_PROTOTYPE (bala_property_prototype_get_type ())
#define BALA_PROPERTY_PROTOTYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_PROPERTY_PROTOTYPE, ValaPropertyPrototype))
#define BALA_PROPERTY_PROTOTYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_PROPERTY_PROTOTYPE, ValaPropertyPrototypeClass))
#define BALA_IS_PROPERTY_PROTOTYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_PROPERTY_PROTOTYPE))
#define BALA_IS_PROPERTY_PROTOTYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_PROPERTY_PROTOTYPE))
#define BALA_PROPERTY_PROTOTYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_PROPERTY_PROTOTYPE, ValaPropertyPrototypeClass))

typedef struct _ValaPropertyPrototype ValaPropertyPrototype;
typedef struct _ValaPropertyPrototypeClass ValaPropertyPrototypeClass;
typedef struct _ValaPropertyPrototypePrivate ValaPropertyPrototypePrivate;
typedef struct _ValaRealLiteralPrivate ValaRealLiteralPrivate;
typedef struct _ValaReferenceTransferExpressionPrivate ValaReferenceTransferExpressionPrivate;
typedef struct _ValaRegexLiteralPrivate ValaRegexLiteralPrivate;
typedef struct _ValaReportPrivate ValaReportPrivate;
typedef enum  {
	BALA_REPORT_COLORED_AUTO,
	BALA_REPORT_COLORED_NEVER,
	BALA_REPORT_COLORED_ALWAYS
} ValaReportColored;

#define BALA_REPORT_TYPE_COLORED (bala_report_colored_get_type ())
typedef struct _ValaReturnStatementPrivate ValaReturnStatementPrivate;

#define BALA_TYPE_SCANNER (bala_scanner_get_type ())
#define BALA_SCANNER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_SCANNER, ValaScanner))
#define BALA_SCANNER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_SCANNER, ValaScannerClass))
#define BALA_IS_SCANNER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_SCANNER))
#define BALA_IS_SCANNER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_SCANNER))
#define BALA_SCANNER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_SCANNER, ValaScannerClass))

typedef struct _ValaScanner ValaScanner;
typedef struct _ValaScannerClass ValaScannerClass;
typedef struct _ValaScannerPrivate ValaScannerPrivate;
typedef enum  {
	BALA_TOKEN_TYPE_NONE,
	BALA_TOKEN_TYPE_ABSTRACT,
	BALA_TOKEN_TYPE_AS,
	BALA_TOKEN_TYPE_ASSIGN,
	BALA_TOKEN_TYPE_ASSIGN_ADD,
	BALA_TOKEN_TYPE_ASSIGN_BITWISE_AND,
	BALA_TOKEN_TYPE_ASSIGN_BITWISE_OR,
	BALA_TOKEN_TYPE_ASSIGN_BITWISE_XOR,
	BALA_TOKEN_TYPE_ASSIGN_DIV,
	BALA_TOKEN_TYPE_ASSIGN_MUL,
	BALA_TOKEN_TYPE_ASSIGN_PERCENT,
	BALA_TOKEN_TYPE_ASSIGN_SHIFT_LEFT,
	BALA_TOKEN_TYPE_ASSIGN_SUB,
	BALA_TOKEN_TYPE_ASYNC,
	BALA_TOKEN_TYPE_BASE,
	BALA_TOKEN_TYPE_BITWISE_AND,
	BALA_TOKEN_TYPE_BITWISE_OR,
	BALA_TOKEN_TYPE_BREAK,
	BALA_TOKEN_TYPE_CARRET,
	BALA_TOKEN_TYPE_CASE,
	BALA_TOKEN_TYPE_CATCH,
	BALA_TOKEN_TYPE_CHARACTER_LITERAL,
	BALA_TOKEN_TYPE_CLASS,
	BALA_TOKEN_TYPE_CLOSE_BRACE,
	BALA_TOKEN_TYPE_CLOSE_BRACKET,
	BALA_TOKEN_TYPE_CLOSE_PARENS,
	BALA_TOKEN_TYPE_CLOSE_REGEX_LITERAL,
	BALA_TOKEN_TYPE_CLOSE_TEMPLATE,
	BALA_TOKEN_TYPE_COLON,
	BALA_TOKEN_TYPE_COMMA,
	BALA_TOKEN_TYPE_CONST,
	BALA_TOKEN_TYPE_CONSTRUCT,
	BALA_TOKEN_TYPE_CONTINUE,
	BALA_TOKEN_TYPE_DEFAULT,
	BALA_TOKEN_TYPE_DELEGATE,
	BALA_TOKEN_TYPE_DELETE,
	BALA_TOKEN_TYPE_DIV,
	BALA_TOKEN_TYPE_DO,
	BALA_TOKEN_TYPE_DOUBLE_COLON,
	BALA_TOKEN_TYPE_DOT,
	BALA_TOKEN_TYPE_DYNAMIC,
	BALA_TOKEN_TYPE_ELLIPSIS,
	BALA_TOKEN_TYPE_ELSE,
	BALA_TOKEN_TYPE_ENUM,
	BALA_TOKEN_TYPE_ENSURES,
	BALA_TOKEN_TYPE_ERRORDOMAIN,
	BALA_TOKEN_TYPE_EOF,
	BALA_TOKEN_TYPE_EXTERN,
	BALA_TOKEN_TYPE_FALSE,
	BALA_TOKEN_TYPE_FINALLY,
	BALA_TOKEN_TYPE_FOR,
	BALA_TOKEN_TYPE_FOREACH,
	BALA_TOKEN_TYPE_GET,
	BALA_TOKEN_TYPE_HASH,
	BALA_TOKEN_TYPE_IDENTIFIER,
	BALA_TOKEN_TYPE_IF,
	BALA_TOKEN_TYPE_IN,
	BALA_TOKEN_TYPE_INLINE,
	BALA_TOKEN_TYPE_INTEGER_LITERAL,
	BALA_TOKEN_TYPE_INTERFACE,
	BALA_TOKEN_TYPE_INTERNAL,
	BALA_TOKEN_TYPE_INTERR,
	BALA_TOKEN_TYPE_IS,
	BALA_TOKEN_TYPE_LAMBDA,
	BALA_TOKEN_TYPE_LOCK,
	BALA_TOKEN_TYPE_MINUS,
	BALA_TOKEN_TYPE_NAMESPACE,
	BALA_TOKEN_TYPE_NEW,
	BALA_TOKEN_TYPE_NULL,
	BALA_TOKEN_TYPE_OUT,
	BALA_TOKEN_TYPE_OP_AND,
	BALA_TOKEN_TYPE_OP_COALESCING,
	BALA_TOKEN_TYPE_OP_DEC,
	BALA_TOKEN_TYPE_OP_EQ,
	BALA_TOKEN_TYPE_OP_GE,
	BALA_TOKEN_TYPE_OP_GT,
	BALA_TOKEN_TYPE_OP_INC,
	BALA_TOKEN_TYPE_OP_LE,
	BALA_TOKEN_TYPE_OP_LT,
	BALA_TOKEN_TYPE_OP_NE,
	BALA_TOKEN_TYPE_OP_NEG,
	BALA_TOKEN_TYPE_OP_OR,
	BALA_TOKEN_TYPE_OP_PTR,
	BALA_TOKEN_TYPE_OP_SHIFT_LEFT,
	BALA_TOKEN_TYPE_OPEN_BRACE,
	BALA_TOKEN_TYPE_OPEN_BRACKET,
	BALA_TOKEN_TYPE_OPEN_PARENS,
	BALA_TOKEN_TYPE_OPEN_REGEX_LITERAL,
	BALA_TOKEN_TYPE_OPEN_TEMPLATE,
	BALA_TOKEN_TYPE_OVERRIDE,
	BALA_TOKEN_TYPE_OWNED,
	BALA_TOKEN_TYPE_PARAMS,
	BALA_TOKEN_TYPE_PERCENT,
	BALA_TOKEN_TYPE_PLUS,
	BALA_TOKEN_TYPE_PRIVATE,
	BALA_TOKEN_TYPE_PROTECTED,
	BALA_TOKEN_TYPE_PUBLIC,
	BALA_TOKEN_TYPE_REAL_LITERAL,
	BALA_TOKEN_TYPE_REF,
	BALA_TOKEN_TYPE_REGEX_LITERAL,
	BALA_TOKEN_TYPE_REQUIRES,
	BALA_TOKEN_TYPE_RETURN,
	BALA_TOKEN_TYPE_SEALED,
	BALA_TOKEN_TYPE_SEMICOLON,
	BALA_TOKEN_TYPE_SET,
	BALA_TOKEN_TYPE_SIGNAL,
	BALA_TOKEN_TYPE_SIZEOF,
	BALA_TOKEN_TYPE_STAR,
	BALA_TOKEN_TYPE_STATIC,
	BALA_TOKEN_TYPE_STRING_LITERAL,
	BALA_TOKEN_TYPE_STRUCT,
	BALA_TOKEN_TYPE_SWITCH,
	BALA_TOKEN_TYPE_TEMPLATE_STRING_LITERAL,
	BALA_TOKEN_TYPE_THIS,
	BALA_TOKEN_TYPE_THROW,
	BALA_TOKEN_TYPE_THROWS,
	BALA_TOKEN_TYPE_TILDE,
	BALA_TOKEN_TYPE_TRUE,
	BALA_TOKEN_TYPE_TRY,
	BALA_TOKEN_TYPE_TYPEOF,
	BALA_TOKEN_TYPE_UNLOCK,
	BALA_TOKEN_TYPE_UNOWNED,
	BALA_TOKEN_TYPE_USING,
	BALA_TOKEN_TYPE_VAR,
	BALA_TOKEN_TYPE_VERBATIM_STRING_LITERAL,
	BALA_TOKEN_TYPE_VIRTUAL,
	BALA_TOKEN_TYPE_VOID,
	BALA_TOKEN_TYPE_VOLATILE,
	BALA_TOKEN_TYPE_WEAK,
	BALA_TOKEN_TYPE_WHILE,
	BALA_TOKEN_TYPE_YIELD
} ValaTokenType;

#define BALA_TYPE_TOKEN_TYPE (bala_token_type_get_type ())
typedef struct _ValaScopePrivate ValaScopePrivate;
typedef struct _ValaSemanticAnalyzerPrivate ValaSemanticAnalyzerPrivate;

#define BALA_TYPE_STRUCT_VALUE_TYPE (bala_struct_value_type_get_type ())
#define BALA_STRUCT_VALUE_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_STRUCT_VALUE_TYPE, ValaStructValueType))
#define BALA_STRUCT_VALUE_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_STRUCT_VALUE_TYPE, ValaStructValueTypeClass))
#define BALA_IS_STRUCT_VALUE_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_STRUCT_VALUE_TYPE))
#define BALA_IS_STRUCT_VALUE_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_STRUCT_VALUE_TYPE))
#define BALA_STRUCT_VALUE_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_STRUCT_VALUE_TYPE, ValaStructValueTypeClass))

typedef struct _ValaStructValueType ValaStructValueType;
typedef struct _ValaStructValueTypeClass ValaStructValueTypeClass;

#define BALA_TYPE_SIGNAL_TYPE (bala_signal_type_get_type ())
#define BALA_SIGNAL_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_SIGNAL_TYPE, ValaSignalType))
#define BALA_SIGNAL_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_SIGNAL_TYPE, ValaSignalTypeClass))
#define BALA_IS_SIGNAL_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_SIGNAL_TYPE))
#define BALA_IS_SIGNAL_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_SIGNAL_TYPE))
#define BALA_SIGNAL_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_SIGNAL_TYPE, ValaSignalTypeClass))

typedef struct _ValaSignalType ValaSignalType;
typedef struct _ValaSignalTypeClass ValaSignalTypeClass;
typedef struct _ValaSignalTypePrivate ValaSignalTypePrivate;
typedef struct _ValaSizeofExpressionPrivate ValaSizeofExpressionPrivate;
typedef struct _ValaSliceExpressionPrivate ValaSliceExpressionPrivate;
typedef struct _ValaSourceFilePrivate ValaSourceFilePrivate;
typedef enum  {
	BALA_SOURCE_FILE_TYPE_NONE,
	BALA_SOURCE_FILE_TYPE_SOURCE,
	BALA_SOURCE_FILE_TYPE_PACKAGE,
	BALA_SOURCE_FILE_TYPE_FAST
} ValaSourceFileType;

#define BALA_TYPE_SOURCE_FILE_TYPE (bala_source_file_type_get_type ())
typedef struct _ValaSourceReferencePrivate ValaSourceReferencePrivate;

#define BALA_TYPE_STATEMENT_LIST (bala_statement_list_get_type ())
#define BALA_STATEMENT_LIST(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_STATEMENT_LIST, ValaStatementList))
#define BALA_STATEMENT_LIST_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_STATEMENT_LIST, ValaStatementListClass))
#define BALA_IS_STATEMENT_LIST(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_STATEMENT_LIST))
#define BALA_IS_STATEMENT_LIST_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_STATEMENT_LIST))
#define BALA_STATEMENT_LIST_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_STATEMENT_LIST, ValaStatementListClass))

typedef struct _ValaStatementList ValaStatementList;
typedef struct _ValaStatementListClass ValaStatementListClass;
typedef struct _ValaStatementListPrivate ValaStatementListPrivate;
typedef struct _ValaStringLiteralPrivate ValaStringLiteralPrivate;
typedef struct _ValaStructPrivate ValaStructPrivate;
typedef struct _ValaStructValueTypePrivate ValaStructValueTypePrivate;
typedef struct _ValaSwitchLabelPrivate ValaSwitchLabelPrivate;
typedef struct _ValaSwitchSectionPrivate ValaSwitchSectionPrivate;
typedef struct _ValaSwitchStatementPrivate ValaSwitchStatementPrivate;
typedef enum  {
	BALA_SYMBOL_ACCESSIBILITY_PRIVATE,
	BALA_SYMBOL_ACCESSIBILITY_INTERNAL,
	BALA_SYMBOL_ACCESSIBILITY_PROTECTED,
	BALA_SYMBOL_ACCESSIBILITY_PUBLIC
} ValaSymbolAccessibility;

#define BALA_TYPE_SYMBOL_ACCESSIBILITY (bala_symbol_accessibility_get_type ())

#define BALA_TYPE_VERSION_ATTRIBUTE (bala_version_attribute_get_type ())
#define BALA_VERSION_ATTRIBUTE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_VERSION_ATTRIBUTE, ValaVersionAttribute))
#define BALA_VERSION_ATTRIBUTE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_VERSION_ATTRIBUTE, ValaVersionAttributeClass))
#define BALA_IS_VERSION_ATTRIBUTE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_VERSION_ATTRIBUTE))
#define BALA_IS_VERSION_ATTRIBUTE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_VERSION_ATTRIBUTE))
#define BALA_VERSION_ATTRIBUTE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_VERSION_ATTRIBUTE, ValaVersionAttributeClass))

typedef struct _ValaVersionAttribute ValaVersionAttribute;
typedef struct _ValaVersionAttributeClass ValaVersionAttributeClass;
typedef struct _ValaSymbolResolverPrivate ValaSymbolResolverPrivate;
typedef struct _ValaTargetValuePrivate ValaTargetValuePrivate;
typedef struct _ValaTemplatePrivate ValaTemplatePrivate;
typedef struct _ValaThrowStatementPrivate ValaThrowStatementPrivate;

#define BALA_TYPE_TRAVERSE_VISITOR (bala_traverse_visitor_get_type ())
#define BALA_TRAVERSE_VISITOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_TRAVERSE_VISITOR, ValaTraverseVisitor))
#define BALA_TRAVERSE_VISITOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_TRAVERSE_VISITOR, ValaTraverseVisitorClass))
#define BALA_IS_TRAVERSE_VISITOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_TRAVERSE_VISITOR))
#define BALA_IS_TRAVERSE_VISITOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_TRAVERSE_VISITOR))
#define BALA_TRAVERSE_VISITOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_TRAVERSE_VISITOR, ValaTraverseVisitorClass))

typedef struct _ValaTraverseVisitor ValaTraverseVisitor;
typedef struct _ValaTraverseVisitorClass ValaTraverseVisitorClass;
typedef struct _ValaTraverseVisitorPrivate ValaTraverseVisitorPrivate;
typedef enum  {
	BALA_TRAVERSE_STATUS_STOP,
	BALA_TRAVERSE_STATUS_CONTINUE
} ValaTraverseStatus;

#define BALA_TYPE_TRAVERSE_STATUS (bala_traverse_status_get_type ())
typedef ValaTraverseStatus (*ValaTraverseFunc) (ValaCodeNode* node, gpointer user_data);
typedef struct _ValaTryStatementPrivate ValaTryStatementPrivate;
typedef struct _ValaTuplePrivate ValaTuplePrivate;
typedef struct _ValaTypeCheckPrivate ValaTypeCheckPrivate;
typedef struct _ValaTypeofExpressionPrivate ValaTypeofExpressionPrivate;
typedef struct _ValaTypeParameterPrivate ValaTypeParameterPrivate;
typedef struct _ValaUnaryExpressionPrivate ValaUnaryExpressionPrivate;
typedef enum  {
	BALA_UNARY_OPERATOR_NONE,
	BALA_UNARY_OPERATOR_PLUS,
	BALA_UNARY_OPERATOR_MINUS,
	BALA_UNARY_OPERATOR_LOGICAL_NEGATION,
	BALA_UNARY_OPERATOR_BITWISE_COMPLEMENT,
	BALA_UNARY_OPERATOR_INCREMENT,
	BALA_UNARY_OPERATOR_DECREMENT,
	BALA_UNARY_OPERATOR_REF,
	BALA_UNARY_OPERATOR_OUT
} ValaUnaryOperator;

#define BALA_TYPE_UNARY_OPERATOR (bala_unary_operator_get_type ())
typedef struct _ValaUnlockStatementPrivate ValaUnlockStatementPrivate;

#define BALA_TYPE_UNRESOLVED_SYMBOL (bala_unresolved_symbol_get_type ())
#define BALA_UNRESOLVED_SYMBOL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_UNRESOLVED_SYMBOL, ValaUnresolvedSymbol))
#define BALA_UNRESOLVED_SYMBOL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_UNRESOLVED_SYMBOL, ValaUnresolvedSymbolClass))
#define BALA_IS_UNRESOLVED_SYMBOL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_UNRESOLVED_SYMBOL))
#define BALA_IS_UNRESOLVED_SYMBOL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_UNRESOLVED_SYMBOL))
#define BALA_UNRESOLVED_SYMBOL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_UNRESOLVED_SYMBOL, ValaUnresolvedSymbolClass))

typedef struct _ValaUnresolvedSymbol ValaUnresolvedSymbol;
typedef struct _ValaUnresolvedSymbolClass ValaUnresolvedSymbolClass;
typedef struct _ValaUnresolvedSymbolPrivate ValaUnresolvedSymbolPrivate;

#define BALA_TYPE_UNRESOLVED_TYPE (bala_unresolved_type_get_type ())
#define BALA_UNRESOLVED_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_UNRESOLVED_TYPE, ValaUnresolvedType))
#define BALA_UNRESOLVED_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_UNRESOLVED_TYPE, ValaUnresolvedTypeClass))
#define BALA_IS_UNRESOLVED_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_UNRESOLVED_TYPE))
#define BALA_IS_UNRESOLVED_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_UNRESOLVED_TYPE))
#define BALA_UNRESOLVED_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_UNRESOLVED_TYPE, ValaUnresolvedTypeClass))

typedef struct _ValaUnresolvedType ValaUnresolvedType;
typedef struct _ValaUnresolvedTypeClass ValaUnresolvedTypeClass;
typedef struct _ValaUnresolvedTypePrivate ValaUnresolvedTypePrivate;
typedef struct _ValaUsedAttrPrivate ValaUsedAttrPrivate;
typedef struct _ValaUsingDirectivePrivate ValaUsingDirectivePrivate;

#define BALA_TYPE_VAR_TYPE (bala_var_type_get_type ())
#define BALA_VAR_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_VAR_TYPE, ValaVarType))
#define BALA_VAR_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_VAR_TYPE, ValaVarTypeClass))
#define BALA_IS_VAR_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_VAR_TYPE))
#define BALA_IS_VAR_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_VAR_TYPE))
#define BALA_VAR_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_VAR_TYPE, ValaVarTypeClass))

typedef struct _ValaVarType ValaVarType;
typedef struct _ValaVarTypeClass ValaVarTypeClass;
typedef struct _ValaVarTypePrivate ValaVarTypePrivate;
typedef struct _ValaVersionAttributePrivate ValaVersionAttributePrivate;

#define BALA_TYPE_VOID_TYPE (bala_void_type_get_type ())
#define BALA_VOID_TYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_VOID_TYPE, ValaVoidType))
#define BALA_VOID_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_VOID_TYPE, ValaVoidTypeClass))
#define BALA_IS_VOID_TYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_VOID_TYPE))
#define BALA_IS_VOID_TYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_VOID_TYPE))
#define BALA_VOID_TYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_VOID_TYPE, ValaVoidTypeClass))

typedef struct _ValaVoidType ValaVoidType;
typedef struct _ValaVoidTypeClass ValaVoidTypeClass;
typedef struct _ValaVoidTypePrivate ValaVoidTypePrivate;
typedef struct _ValaWhileStatementPrivate ValaWhileStatementPrivate;
typedef struct _ValaYieldStatementPrivate ValaYieldStatementPrivate;

struct _ValaCodeNode {
	GTypeInstance parent_instance;
	volatile int ref_count;
	GList* attributes;
	ValaCodeNodePrivate * priv;
};

struct _ValaCodeNodeClass {
	GTypeClass parent_class;
	void (*finalize) (ValaCodeNode *self);
	void (*accept) (ValaCodeNode* self, ValaCodeVisitor* visitor);
	void (*accept_children) (ValaCodeNode* self, ValaCodeVisitor* visitor);
	gboolean (*check) (ValaCodeNode* self, ValaCodeContext* context);
	void (*emit) (ValaCodeNode* self, ValaCodeGenerator* codegen);
	void (*replace_type) (ValaCodeNode* self, ValaDataType* old_type, ValaDataType* new_type);
	void (*replace_expression) (ValaCodeNode* self, ValaExpression* old_node, ValaExpression* new_node);
	gchar* (*to_string) (ValaCodeNode* self);
	void (*get_defined_variables) (ValaCodeNode* self, ValaCollection* collection);
	void (*get_used_variables) (ValaCodeNode* self, ValaCollection* collection);
	void (*get_error_types) (ValaCodeNode* self, ValaCollection* collection, ValaSourceReference* source_reference);
};

struct _ValaExpression {
	ValaCodeNode parent_instance;
	ValaExpressionPrivate * priv;
};

struct _ValaExpressionClass {
	ValaCodeNodeClass parent_class;
	gboolean (*is_constant) (ValaExpression* self);
	gboolean (*is_pure) (ValaExpression* self);
	gboolean (*is_non_null) (ValaExpression* self);
	gboolean (*is_accessible) (ValaExpression* self, ValaSymbol* sym);
};

struct _ValaAddressofExpression {
	ValaExpression parent_instance;
	ValaAddressofExpressionPrivate * priv;
};

struct _ValaAddressofExpressionClass {
	ValaExpressionClass parent_class;
};

struct _ValaSymbol {
	ValaCodeNode parent_instance;
	ValaSymbolPrivate * priv;
};

struct _ValaSymbolClass {
	ValaCodeNodeClass parent_class;
	gboolean (*is_instance_member) (ValaSymbol* self);
	gboolean (*is_class_member) (ValaSymbol* self);
	void (*add_namespace) (ValaSymbol* self, ValaNamespace* ns);
	void (*add_class) (ValaSymbol* self, ValaClass* cl);
	void (*add_interface) (ValaSymbol* self, ValaInterface* iface);
	void (*add_struct) (ValaSymbol* self, ValaStruct* st);
	void (*add_enum) (ValaSymbol* self, ValaEnum* en);
	void (*add_error_domain) (ValaSymbol* self, ValaErrorDomain* edomain);
	void (*add_delegate) (ValaSymbol* self, ValaDelegate* d);
	void (*add_constant) (ValaSymbol* self, ValaConstant* constant);
	void (*add_field) (ValaSymbol* self, ValaField* f);
	void (*add_method) (ValaSymbol* self, ValaMethod* m);
	void (*add_property) (ValaSymbol* self, ValaProperty* prop);
	void (*add_signal) (ValaSymbol* self, ValaSignal* sig);
	void (*add_constructor) (ValaSymbol* self, ValaConstructor* c);
	void (*add_destructor) (ValaSymbol* self, ValaDestructor* d);
};

struct _ValaSubroutine {
	ValaSymbol parent_instance;
	ValaSubroutinePrivate * priv;
};

struct _ValaSubroutineClass {
	ValaSymbolClass parent_class;
	gboolean (*get_has_result) (ValaSubroutine* self);
};

struct _ValaCallableIface {
	GTypeInterface parent_iface;
	ValaDataType* (*get_return_type) (ValaCallable* self);
	void (*set_return_type) (ValaCallable* self, ValaDataType* value);
	void (*add_parameter) (ValaCallable* self, ValaParameter* param);
	ValaList* (*get_parameters) (ValaCallable* self);
};

struct _ValaMethod {
	ValaSubroutine parent_instance;
	ValaList* error_types;
	ValaMethodPrivate * priv;
};

struct _ValaMethodClass {
	ValaSubroutineClass parent_class;
};

struct _ValaArrayCopyMethod {
	ValaMethod parent_instance;
	ValaArrayCopyMethodPrivate * priv;
};

struct _ValaArrayCopyMethodClass {
	ValaMethodClass parent_class;
};

struct _ValaArrayCreationExpression {
	ValaExpression parent_instance;
	ValaArrayCreationExpressionPrivate * priv;
};

struct _ValaArrayCreationExpressionClass {
	ValaExpressionClass parent_class;
};

struct _ValaVariable {
	ValaSymbol parent_instance;
	ValaVariablePrivate * priv;
};

struct _ValaVariableClass {
	ValaSymbolClass parent_class;
};

struct _ValaLockableIface {
	GTypeInterface parent_iface;
	gboolean (*get_lock_used) (ValaLockable* self);
	void (*set_lock_used) (ValaLockable* self, gboolean value);
};

struct _ValaField {
	ValaVariable parent_instance;
	ValaFieldPrivate * priv;
};

struct _ValaFieldClass {
	ValaVariableClass parent_class;
};

struct _ValaArrayLengthField {
	ValaField parent_instance;
	ValaArrayLengthFieldPrivate * priv;
};

struct _ValaArrayLengthFieldClass {
	ValaFieldClass parent_class;
};

struct _ValaArrayMoveMethod {
	ValaMethod parent_instance;
	ValaArrayMoveMethodPrivate * priv;
};

struct _ValaArrayMoveMethodClass {
	ValaMethodClass parent_class;
};

struct _ValaArrayResizeMethod {
	ValaMethod parent_instance;
	ValaArrayResizeMethodPrivate * priv;
};

struct _ValaArrayResizeMethodClass {
	ValaMethodClass parent_class;
};

struct _ValaDataType {
	ValaCodeNode parent_instance;
	ValaDataTypePrivate * priv;
};

struct _ValaDataTypeClass {
	ValaCodeNodeClass parent_class;
	gchar* (*to_qualified_string) (ValaDataType* self, ValaScope* scope);
	ValaDataType* (*copy) (ValaDataType* self);
	gboolean (*equals) (ValaDataType* self, ValaDataType* type2);
	gboolean (*stricter) (ValaDataType* self, ValaDataType* type2);
	gboolean (*compatible) (ValaDataType* self, ValaDataType* target_type);
	gboolean (*is_invokable) (ValaDataType* self);
	ValaDataType* (*get_return_type) (ValaDataType* self);
	ValaList* (*get_parameters) (ValaDataType* self);
	gboolean (*is_reference_type_or_type_parameter) (ValaDataType* self);
	gboolean (*is_accessible) (ValaDataType* self, ValaSymbol* sym);
	ValaSymbol* (*get_member) (ValaDataType* self, const gchar* member_name);
	ValaSymbol* (*get_pointer_member) (ValaDataType* self, const gchar* member_name);
	gboolean (*is_real_struct_type) (ValaDataType* self);
	gboolean (*is_disposable) (ValaDataType* self);
	ValaDataType* (*get_actual_type) (ValaDataType* self, ValaDataType* derived_instance_type, ValaList* method_type_arguments, ValaCodeNode* node_reference);
	ValaDataType* (*infer_type_argument) (ValaDataType* self, ValaTypeParameter* type_param, ValaDataType* value_type);
	gchar* (*to_prototype_string) (ValaDataType* self, const gchar* override_name);
};

struct _ValaReferenceType {
	ValaDataType parent_instance;
	ValaReferenceTypePrivate * priv;
};

struct _ValaReferenceTypeClass {
	ValaDataTypeClass parent_class;
};

struct _ValaArrayType {
	ValaReferenceType parent_instance;
	ValaArrayTypePrivate * priv;
};

struct _ValaArrayTypeClass {
	ValaReferenceTypeClass parent_class;
};

struct _ValaAssignment {
	ValaExpression parent_instance;
	ValaAssignmentPrivate * priv;
};

struct _ValaAssignmentClass {
	ValaExpressionClass parent_class;
};

struct _ValaAttribute {
	ValaCodeNode parent_instance;
	ValaAttributePrivate * priv;
};

struct _ValaAttributeClass {
	ValaCodeNodeClass parent_class;
};

struct _ValaBaseAccess {
	ValaExpression parent_instance;
	ValaBaseAccessPrivate * priv;
};

struct _ValaBaseAccessClass {
	ValaExpressionClass parent_class;
};

struct _ValaBasicBlock {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ValaBasicBlockPrivate * priv;
};

struct _ValaBasicBlockClass {
	GTypeClass parent_class;
	void (*finalize) (ValaBasicBlock *self);
};

struct _ValaBinaryExpression {
	ValaExpression parent_instance;
	ValaBinaryExpressionPrivate * priv;
};

struct _ValaBinaryExpressionClass {
	ValaExpressionClass parent_class;
};

struct _ValaStatementIface {
	GTypeInterface parent_iface;
};

struct _ValaBlock {
	ValaSymbol parent_instance;
	ValaBlockPrivate * priv;
};

struct _ValaBlockClass {
	ValaSymbolClass parent_class;
};

struct _ValaLiteral {
	ValaExpression parent_instance;
	ValaLiteralPrivate * priv;
};

struct _ValaLiteralClass {
	ValaExpressionClass parent_class;
};

struct _ValaBooleanLiteral {
	ValaLiteral parent_instance;
	ValaBooleanLiteralPrivate * priv;
};

struct _ValaBooleanLiteralClass {
	ValaLiteralClass parent_class;
};

struct _ValaValueType {
	ValaDataType parent_instance;
	ValaValueTypePrivate * priv;
};

struct _ValaValueTypeClass {
	ValaDataTypeClass parent_class;
};

struct _ValaBooleanType {
	ValaValueType parent_instance;
	ValaBooleanTypePrivate * priv;
};

struct _ValaBooleanTypeClass {
	ValaValueTypeClass parent_class;
};

struct _ValaBreakStatement {
	ValaCodeNode parent_instance;
	ValaBreakStatementPrivate * priv;
};

struct _ValaBreakStatementClass {
	ValaCodeNodeClass parent_class;
};

struct _ValaCallableType {
	ValaDataType parent_instance;
	ValaCallableTypePrivate * priv;
};

struct _ValaCallableTypeClass {
	ValaDataTypeClass parent_class;
};

struct _ValaCastExpression {
	ValaExpression parent_instance;
	ValaCastExpressionPrivate * priv;
};

struct _ValaCastExpressionClass {
	ValaExpressionClass parent_class;
};

struct _ValaCatchClause {
	ValaCodeNode parent_instance;
	ValaCatchClausePrivate * priv;
};

struct _ValaCatchClauseClass {
	ValaCodeNodeClass parent_class;
};

struct _ValaCharacterLiteral {
	ValaLiteral parent_instance;
	ValaCharacterLiteralPrivate * priv;
};

struct _ValaCharacterLiteralClass {
	ValaLiteralClass parent_class;
};

struct _ValaTypeSymbol {
	ValaSymbol parent_instance;
	ValaTypeSymbolPrivate * priv;
};

struct _ValaTypeSymbolClass {
	ValaSymbolClass parent_class;
	gboolean (*is_reference_type) (ValaTypeSymbol* self);
	gboolean (*is_subtype_of) (ValaTypeSymbol* self, ValaTypeSymbol* t);
	gint (*get_type_parameter_index) (ValaTypeSymbol* self, const gchar* name);
};

struct _ValaObjectTypeSymbol {
	ValaTypeSymbol parent_instance;
	ValaObjectTypeSymbolPrivate * priv;
};

struct _ValaObjectTypeSymbolClass {
	ValaTypeSymbolClass parent_class;
};

struct _ValaClass {
	ValaObjectTypeSymbol parent_instance;
	ValaClassPrivate * priv;
};

struct _ValaClassClass {
	ValaObjectTypeSymbolClass parent_class;
};

struct _ValaClassType {
	ValaReferenceType parent_instance;
	ValaClassTypePrivate * priv;
};

struct _ValaClassTypeClass {
	ValaReferenceTypeClass parent_class;
};

struct _ValaCodeContext {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ValaCodeContextPrivate * priv;
};

struct _ValaCodeContextClass {
	GTypeClass parent_class;
	void (*finalize) (ValaCodeContext *self);
};

struct _ValaCodeVisitor {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ValaCodeVisitorPrivate * priv;
};

struct _ValaCodeVisitorClass {
	GTypeClass parent_class;
	void (*finalize) (ValaCodeVisitor *self);
	void (*visit_source_file) (ValaCodeVisitor* self, ValaSourceFile* source_file);
	void (*visit_namespace) (ValaCodeVisitor* self, ValaNamespace* ns);
	void (*visit_class) (ValaCodeVisitor* self, ValaClass* cl);
	void (*visit_struct) (ValaCodeVisitor* self, ValaStruct* st);
	void (*visit_interface) (ValaCodeVisitor* self, ValaInterface* iface);
	void (*visit_enum) (ValaCodeVisitor* self, ValaEnum* en);
	void (*visit_enum_value) (ValaCodeVisitor* self, ValaEnumValue* ev);
	void (*visit_error_domain) (ValaCodeVisitor* self, ValaErrorDomain* edomain);
	void (*visit_error_code) (ValaCodeVisitor* self, ValaErrorCode* ecode);
	void (*visit_delegate) (ValaCodeVisitor* self, ValaDelegate* d);
	void (*visit_constant) (ValaCodeVisitor* self, ValaConstant* c);
	void (*visit_field) (ValaCodeVisitor* self, ValaField* f);
	void (*visit_method) (ValaCodeVisitor* self, ValaMethod* m);
	void (*visit_creation_method) (ValaCodeVisitor* self, ValaCreationMethod* m);
	void (*visit_formal_parameter) (ValaCodeVisitor* self, ValaParameter* p);
	void (*visit_property) (ValaCodeVisitor* self, ValaProperty* prop);
	void (*visit_property_accessor) (ValaCodeVisitor* self, ValaPropertyAccessor* acc);
	void (*visit_signal) (ValaCodeVisitor* self, ValaSignal* sig);
	void (*visit_constructor) (ValaCodeVisitor* self, ValaConstructor* c);
	void (*visit_destructor) (ValaCodeVisitor* self, ValaDestructor* d);
	void (*visit_type_parameter) (ValaCodeVisitor* self, ValaTypeParameter* p);
	void (*visit_using_directive) (ValaCodeVisitor* self, ValaUsingDirective* ns);
	void (*visit_data_type) (ValaCodeVisitor* self, ValaDataType* type);
	void (*visit_block) (ValaCodeVisitor* self, ValaBlock* b);
	void (*visit_empty_statement) (ValaCodeVisitor* self, ValaEmptyStatement* stmt);
	void (*visit_declaration_statement) (ValaCodeVisitor* self, ValaDeclarationStatement* stmt);
	void (*visit_local_variable) (ValaCodeVisitor* self, ValaLocalVariable* local);
	void (*visit_initializer_list) (ValaCodeVisitor* self, ValaInitializerList* list);
	void (*visit_expression_statement) (ValaCodeVisitor* self, ValaExpressionStatement* stmt);
	void (*visit_if_statement) (ValaCodeVisitor* self, ValaIfStatement* stmt);
	void (*visit_switch_statement) (ValaCodeVisitor* self, ValaSwitchStatement* stmt);
	void (*visit_switch_section) (ValaCodeVisitor* self, ValaSwitchSection* section);
	void (*visit_switch_label) (ValaCodeVisitor* self, ValaSwitchLabel* label);
	void (*visit_loop) (ValaCodeVisitor* self, ValaLoop* stmt);
	void (*visit_while_statement) (ValaCodeVisitor* self, ValaWhileStatement* stmt);
	void (*visit_do_statement) (ValaCodeVisitor* self, ValaDoStatement* stmt);
	void (*visit_for_statement) (ValaCodeVisitor* self, ValaForStatement* stmt);
	void (*visit_foreach_statement) (ValaCodeVisitor* self, ValaForeachStatement* stmt);
	void (*visit_break_statement) (ValaCodeVisitor* self, ValaBreakStatement* stmt);
	void (*visit_continue_statement) (ValaCodeVisitor* self, ValaContinueStatement* stmt);
	void (*visit_return_statement) (ValaCodeVisitor* self, ValaReturnStatement* stmt);
	void (*visit_yield_statement) (ValaCodeVisitor* self, ValaYieldStatement* y);
	void (*visit_throw_statement) (ValaCodeVisitor* self, ValaThrowStatement* stmt);
	void (*visit_try_statement) (ValaCodeVisitor* self, ValaTryStatement* stmt);
	void (*visit_catch_clause) (ValaCodeVisitor* self, ValaCatchClause* clause);
	void (*visit_lock_statement) (ValaCodeVisitor* self, ValaLockStatement* stmt);
	void (*visit_unlock_statement) (ValaCodeVisitor* self, ValaUnlockStatement* stmt);
	void (*visit_delete_statement) (ValaCodeVisitor* self, ValaDeleteStatement* stmt);
	void (*visit_expression) (ValaCodeVisitor* self, ValaExpression* expr);
	void (*visit_array_creation_expression) (ValaCodeVisitor* self, ValaArrayCreationExpression* expr);
	void (*visit_boolean_literal) (ValaCodeVisitor* self, ValaBooleanLiteral* lit);
	void (*visit_character_literal) (ValaCodeVisitor* self, ValaCharacterLiteral* lit);
	void (*visit_integer_literal) (ValaCodeVisitor* self, ValaIntegerLiteral* lit);
	void (*visit_real_literal) (ValaCodeVisitor* self, ValaRealLiteral* lit);
	void (*visit_regex_literal) (ValaCodeVisitor* self, ValaRegexLiteral* lit);
	void (*visit_string_literal) (ValaCodeVisitor* self, ValaStringLiteral* lit);
	void (*visit_template) (ValaCodeVisitor* self, ValaTemplate* tmpl);
	void (*visit_tuple) (ValaCodeVisitor* self, ValaTuple* tuple);
	void (*visit_null_literal) (ValaCodeVisitor* self, ValaNullLiteral* lit);
	void (*visit_member_access) (ValaCodeVisitor* self, ValaMemberAccess* expr);
	void (*visit_method_call) (ValaCodeVisitor* self, ValaMethodCall* expr);
	void (*visit_element_access) (ValaCodeVisitor* self, ValaElementAccess* expr);
	void (*visit_slice_expression) (ValaCodeVisitor* self, ValaSliceExpression* expr);
	void (*visit_base_access) (ValaCodeVisitor* self, ValaBaseAccess* expr);
	void (*visit_postfix_expression) (ValaCodeVisitor* self, ValaPostfixExpression* expr);
	void (*visit_object_creation_expression) (ValaCodeVisitor* self, ValaObjectCreationExpression* expr);
	void (*visit_sizeof_expression) (ValaCodeVisitor* self, ValaSizeofExpression* expr);
	void (*visit_typeof_expression) (ValaCodeVisitor* self, ValaTypeofExpression* expr);
	void (*visit_unary_expression) (ValaCodeVisitor* self, ValaUnaryExpression* expr);
	void (*visit_cast_expression) (ValaCodeVisitor* self, ValaCastExpression* expr);
	void (*visit_named_argument) (ValaCodeVisitor* self, ValaNamedArgument* expr);
	void (*visit_pointer_indirection) (ValaCodeVisitor* self, ValaPointerIndirection* expr);
	void (*visit_addressof_expression) (ValaCodeVisitor* self, ValaAddressofExpression* expr);
	void (*visit_reference_transfer_expression) (ValaCodeVisitor* self, ValaReferenceTransferExpression* expr);
	void (*visit_binary_expression) (ValaCodeVisitor* self, ValaBinaryExpression* expr);
	void (*visit_type_check) (ValaCodeVisitor* self, ValaTypeCheck* expr);
	void (*visit_conditional_expression) (ValaCodeVisitor* self, ValaConditionalExpression* expr);
	void (*visit_lambda_expression) (ValaCodeVisitor* self, ValaLambdaExpression* expr);
	void (*visit_assignment) (ValaCodeVisitor* self, ValaAssignment* a);
	void (*visit_end_full_expression) (ValaCodeVisitor* self, ValaExpression* expr);
};

struct _ValaCodeGenerator {
	ValaCodeVisitor parent_instance;
	ValaCodeGeneratorPrivate * priv;
};

struct _ValaCodeGeneratorClass {
	ValaCodeVisitorClass parent_class;
	void (*emit) (ValaCodeGenerator* self, ValaCodeContext* context);
	ValaTargetValue* (*load_local) (ValaCodeGenerator* self, ValaLocalVariable* local, ValaExpression* expr);
	void (*store_local) (ValaCodeGenerator* self, ValaLocalVariable* local, ValaTargetValue* value, gboolean initializer, ValaSourceReference* source_reference);
	ValaTargetValue* (*load_parameter) (ValaCodeGenerator* self, ValaParameter* param, ValaExpression* expr);
	void (*store_parameter) (ValaCodeGenerator* self, ValaParameter* param, ValaTargetValue* value, gboolean capturing_parameter, ValaSourceReference* source_reference);
	ValaTargetValue* (*load_field) (ValaCodeGenerator* self, ValaField* field, ValaTargetValue* instance, ValaExpression* expr);
	void (*store_field) (ValaCodeGenerator* self, ValaField* field, ValaTargetValue* instance, ValaTargetValue* value, ValaSourceReference* source_reference);
};

struct _ValaAttributeCache {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ValaAttributeCachePrivate * priv;
};

struct _ValaAttributeCacheClass {
	GTypeClass parent_class;
	void (*finalize) (ValaAttributeCache *self);
};

struct _ValaCodeWriter {
	ValaCodeVisitor parent_instance;
	ValaCodeWriterPrivate * priv;
};

struct _ValaCodeWriterClass {
	ValaCodeVisitorClass parent_class;
};

struct _ValaComment {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ValaCommentPrivate * priv;
};

struct _ValaCommentClass {
	GTypeClass parent_class;
	void (*finalize) (ValaComment *self);
};

struct _ValaGirComment {
	ValaComment parent_instance;
	ValaGirCommentPrivate * priv;
};

struct _ValaGirCommentClass {
	ValaCommentClass parent_class;
};

struct _ValaConditionalExpression {
	ValaExpression parent_instance;
	ValaConditionalExpressionPrivate * priv;
};

struct _ValaConditionalExpressionClass {
	ValaExpressionClass parent_class;
};

struct _ValaConstant {
	ValaSymbol parent_instance;
	ValaConstantPrivate * priv;
};

struct _ValaConstantClass {
	ValaSymbolClass parent_class;
};

struct _ValaConstructor {
	ValaSubroutine parent_instance;
	ValaConstructorPrivate * priv;
};

struct _ValaConstructorClass {
	ValaSubroutineClass parent_class;
};

struct _ValaContinueStatement {
	ValaCodeNode parent_instance;
	ValaContinueStatementPrivate * priv;
};

struct _ValaContinueStatementClass {
	ValaCodeNodeClass parent_class;
};

struct _ValaCreationMethod {
	ValaMethod parent_instance;
	ValaCreationMethodPrivate * priv;
};

struct _ValaCreationMethodClass {
	ValaMethodClass parent_class;
};

struct _ValaDeclarationStatement {
	ValaCodeNode parent_instance;
	ValaDeclarationStatementPrivate * priv;
};

struct _ValaDeclarationStatementClass {
	ValaCodeNodeClass parent_class;
};

struct _ValaDelegate {
	ValaTypeSymbol parent_instance;
	ValaDelegatePrivate * priv;
};

struct _ValaDelegateClass {
	ValaTypeSymbolClass parent_class;
};

struct _ValaDelegateDestroyField {
	ValaField parent_instance;
	ValaDelegateDestroyFieldPrivate * priv;
};

struct _ValaDelegateDestroyFieldClass {
	ValaFieldClass parent_class;
};

struct _ValaDelegateTargetField {
	ValaField parent_instance;
	ValaDelegateTargetFieldPrivate * priv;
};

struct _ValaDelegateTargetFieldClass {
	ValaFieldClass parent_class;
};

struct _ValaDelegateType {
	ValaCallableType parent_instance;
	ValaDelegateTypePrivate * priv;
};

struct _ValaDelegateTypeClass {
	ValaCallableTypeClass parent_class;
};

struct _ValaDeleteStatement {
	ValaCodeNode parent_instance;
	ValaDeleteStatementPrivate * priv;
};

struct _ValaDeleteStatementClass {
	ValaCodeNodeClass parent_class;
};

struct _ValaDestructor {
	ValaSubroutine parent_instance;
	ValaDestructorPrivate * priv;
};

struct _ValaDestructorClass {
	ValaSubroutineClass parent_class;
};

struct _ValaDoStatement {
	ValaCodeNode parent_instance;
	ValaDoStatementPrivate * priv;
};

struct _ValaDoStatementClass {
	ValaCodeNodeClass parent_class;
};

struct _ValaDynamicMethod {
	ValaMethod parent_instance;
	ValaDynamicMethodPrivate * priv;
};

struct _ValaDynamicMethodClass {
	ValaMethodClass parent_class;
};

struct _ValaProperty {
	ValaSymbol parent_instance;
	ValaPropertyPrivate * priv;
};

struct _ValaPropertyClass {
	ValaSymbolClass parent_class;
};

struct _ValaDynamicProperty {
	ValaProperty parent_instance;
	ValaDynamicPropertyPrivate * priv;
};

struct _ValaDynamicPropertyClass {
	ValaPropertyClass parent_class;
};

struct _ValaSignal {
	ValaSymbol parent_instance;
	ValaSignalPrivate * priv;
};

struct _ValaSignalClass {
	ValaSymbolClass parent_class;
};

struct _ValaDynamicSignal {
	ValaSignal parent_instance;
	ValaDynamicSignalPrivate * priv;
};

struct _ValaDynamicSignalClass {
	ValaSignalClass parent_class;
};

struct _ValaElementAccess {
	ValaExpression parent_instance;
	ValaElementAccessPrivate * priv;
};

struct _ValaElementAccessClass {
	ValaExpressionClass parent_class;
};

struct _ValaEmptyStatement {
	ValaCodeNode parent_instance;
	ValaEmptyStatementPrivate * priv;
};

struct _ValaEmptyStatementClass {
	ValaCodeNodeClass parent_class;
};

struct _ValaEnum {
	ValaTypeSymbol parent_instance;
	ValaEnumPrivate * priv;
};

struct _ValaEnumClass {
	ValaTypeSymbolClass parent_class;
};

struct _ValaEnumValue {
	ValaConstant parent_instance;
	ValaEnumValuePrivate * priv;
};

struct _ValaEnumValueClass {
	ValaConstantClass parent_class;
};

struct _ValaEnumValueType {
	ValaValueType parent_instance;
	ValaEnumValueTypePrivate * priv;
};

struct _ValaEnumValueTypeClass {
	ValaValueTypeClass parent_class;
};

struct _ValaErrorCode {
	ValaTypeSymbol parent_instance;
	ValaErrorCodePrivate * priv;
};

struct _ValaErrorCodeClass {
	ValaTypeSymbolClass parent_class;
};

struct _ValaErrorDomain {
	ValaTypeSymbol parent_instance;
	ValaErrorDomainPrivate * priv;
};

struct _ValaErrorDomainClass {
	ValaTypeSymbolClass parent_class;
};

struct _ValaErrorType {
	ValaReferenceType parent_instance;
	ValaErrorTypePrivate * priv;
};

struct _ValaErrorTypeClass {
	ValaReferenceTypeClass parent_class;
};

struct _ValaExpressionStatement {
	ValaCodeNode parent_instance;
	ValaExpressionStatementPrivate * priv;
};

struct _ValaExpressionStatementClass {
	ValaCodeNodeClass parent_class;
};

struct _ValaFieldPrototype {
	ValaDataType parent_instance;
	ValaFieldPrototypePrivate * priv;
};

struct _ValaFieldPrototypeClass {
	ValaDataTypeClass parent_class;
};

struct _ValaFloatingType {
	ValaValueType parent_instance;
	ValaFloatingTypePrivate * priv;
};

struct _ValaFloatingTypeClass {
	ValaValueTypeClass parent_class;
};

struct _ValaFlowAnalyzer {
	ValaCodeVisitor parent_instance;
	ValaFlowAnalyzerPrivate * priv;
};

struct _ValaFlowAnalyzerClass {
	ValaCodeVisitorClass parent_class;
};

struct _ValaForeachStatement {
	ValaBlock parent_instance;
	ValaForeachStatementPrivate * priv;
};

struct _ValaForeachStatementClass {
	ValaBlockClass parent_class;
};

struct _ValaForStatement {
	ValaCodeNode parent_instance;
	ValaForStatementPrivate * priv;
};

struct _ValaForStatementClass {
	ValaCodeNodeClass parent_class;
};

struct _ValaGirParser {
	ValaCodeVisitor parent_instance;
	ValaGirParserPrivate * priv;
};

struct _ValaGirParserClass {
	ValaCodeVisitorClass parent_class;
};

struct _ValaGenericDestroyField {
	ValaField parent_instance;
	ValaGenericDestroyFieldPrivate * priv;
};

struct _ValaGenericDestroyFieldClass {
	ValaFieldClass parent_class;
};

struct _ValaGenericDupField {
	ValaField parent_instance;
	ValaGenericDupFieldPrivate * priv;
};

struct _ValaGenericDupFieldClass {
	ValaFieldClass parent_class;
};

struct _ValaGenericType {
	ValaDataType parent_instance;
	ValaGenericTypePrivate * priv;
};

struct _ValaGenericTypeClass {
	ValaDataTypeClass parent_class;
};

struct _ValaGenieParser {
	ValaCodeVisitor parent_instance;
	ValaGenieParserPrivate * priv;
};

struct _ValaGenieParserClass {
	ValaCodeVisitorClass parent_class;
};

struct _ValaGenieScanner {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ValaGenieScannerPrivate * priv;
};

struct _ValaGenieScannerClass {
	GTypeClass parent_class;
	void (*finalize) (ValaGenieScanner *self);
};

struct _ValaSourceLocation {
	gchar* pos;
	gint line;
	gint column;
};

struct _ValaIfStatement {
	ValaCodeNode parent_instance;
	ValaIfStatementPrivate * priv;
};

struct _ValaIfStatementClass {
	ValaCodeNodeClass parent_class;
};

struct _ValaInitializerList {
	ValaExpression parent_instance;
	ValaInitializerListPrivate * priv;
};

struct _ValaInitializerListClass {
	ValaExpressionClass parent_class;
};

struct _ValaIntegerLiteral {
	ValaLiteral parent_instance;
	ValaIntegerLiteralPrivate * priv;
};

struct _ValaIntegerLiteralClass {
	ValaLiteralClass parent_class;
};

struct _ValaIntegerType {
	ValaValueType parent_instance;
	ValaIntegerTypePrivate * priv;
};

struct _ValaIntegerTypeClass {
	ValaValueTypeClass parent_class;
};

struct _ValaInterface {
	ValaObjectTypeSymbol parent_instance;
	ValaInterfacePrivate * priv;
};

struct _ValaInterfaceClass {
	ValaObjectTypeSymbolClass parent_class;
	ValaList* (*get_virtuals) (ValaInterface* self);
};

struct _ValaInterfaceType {
	ValaReferenceType parent_instance;
	ValaInterfaceTypePrivate * priv;
};

struct _ValaInterfaceTypeClass {
	ValaReferenceTypeClass parent_class;
};

struct _ValaInvalidType {
	ValaDataType parent_instance;
	ValaInvalidTypePrivate * priv;
};

struct _ValaInvalidTypeClass {
	ValaDataTypeClass parent_class;
};

struct _ValaLambdaExpression {
	ValaExpression parent_instance;
	ValaLambdaExpressionPrivate * priv;
};

struct _ValaLambdaExpressionClass {
	ValaExpressionClass parent_class;
};

struct _ValaLocalVariable {
	ValaVariable parent_instance;
	ValaLocalVariablePrivate * priv;
};

struct _ValaLocalVariableClass {
	ValaVariableClass parent_class;
};

struct _ValaLockStatement {
	ValaCodeNode parent_instance;
	ValaLockStatementPrivate * priv;
};

struct _ValaLockStatementClass {
	ValaCodeNodeClass parent_class;
};

struct _ValaLoop {
	ValaCodeNode parent_instance;
	ValaLoopPrivate * priv;
};

struct _ValaLoopClass {
	ValaCodeNodeClass parent_class;
};

struct _ValaMarkupReader {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ValaMarkupReaderPrivate * priv;
};

struct _ValaMarkupReaderClass {
	GTypeClass parent_class;
	void (*finalize) (ValaMarkupReader *self);
};

struct _ValaMemberAccess {
	ValaExpression parent_instance;
	ValaMemberAccessPrivate * priv;
};

struct _ValaMemberAccessClass {
	ValaExpressionClass parent_class;
};

struct _ValaMemberInitializer {
	ValaCodeNode parent_instance;
	ValaMemberInitializerPrivate * priv;
};

struct _ValaMemberInitializerClass {
	ValaCodeNodeClass parent_class;
};

struct _ValaMethodCall {
	ValaExpression parent_instance;
	ValaMethodCallPrivate * priv;
};

struct _ValaMethodCallClass {
	ValaExpressionClass parent_class;
};

struct _ValaMethodType {
	ValaCallableType parent_instance;
	ValaMethodTypePrivate * priv;
};

struct _ValaMethodTypeClass {
	ValaCallableTypeClass parent_class;
};

struct _ValaNamedArgument {
	ValaExpression parent_instance;
	ValaNamedArgumentPrivate * priv;
};

struct _ValaNamedArgumentClass {
	ValaExpressionClass parent_class;
};

struct _ValaNamespace {
	ValaSymbol parent_instance;
	ValaNamespacePrivate * priv;
};

struct _ValaNamespaceClass {
	ValaSymbolClass parent_class;
};

struct _ValaNullLiteral {
	ValaLiteral parent_instance;
	ValaNullLiteralPrivate * priv;
};

struct _ValaNullLiteralClass {
	ValaLiteralClass parent_class;
};

struct _ValaNullType {
	ValaReferenceType parent_instance;
	ValaNullTypePrivate * priv;
};

struct _ValaNullTypeClass {
	ValaReferenceTypeClass parent_class;
};

struct _ValaObjectCreationExpression {
	ValaExpression parent_instance;
	ValaObjectCreationExpressionPrivate * priv;
};

struct _ValaObjectCreationExpressionClass {
	ValaExpressionClass parent_class;
};

struct _ValaObjectType {
	ValaReferenceType parent_instance;
	ValaObjectTypePrivate * priv;
};

struct _ValaObjectTypeClass {
	ValaReferenceTypeClass parent_class;
};

struct _ValaParameter {
	ValaVariable parent_instance;
	ValaParameterPrivate * priv;
};

struct _ValaParameterClass {
	ValaVariableClass parent_class;
};

struct _ValaParser {
	ValaCodeVisitor parent_instance;
	ValaParserPrivate * priv;
};

struct _ValaParserClass {
	ValaCodeVisitorClass parent_class;
};

typedef enum  {
	BALA_PARSE_ERROR_FAILED,
	BALA_PARSE_ERROR_SYNTAX
} ValaParseError;
#define BALA_PARSE_ERROR bala_parse_error_quark ()
struct _ValaPhiFunction {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ValaPhiFunctionPrivate * priv;
};

struct _ValaPhiFunctionClass {
	GTypeClass parent_class;
	void (*finalize) (ValaPhiFunction *self);
};

struct _ValaPointerIndirection {
	ValaExpression parent_instance;
	ValaPointerIndirectionPrivate * priv;
};

struct _ValaPointerIndirectionClass {
	ValaExpressionClass parent_class;
};

struct _ValaPointerType {
	ValaDataType parent_instance;
	ValaPointerTypePrivate * priv;
};

struct _ValaPointerTypeClass {
	ValaDataTypeClass parent_class;
};

struct _ValaPostfixExpression {
	ValaExpression parent_instance;
	ValaPostfixExpressionPrivate * priv;
};

struct _ValaPostfixExpressionClass {
	ValaExpressionClass parent_class;
};

struct _ValaPropertyAccessor {
	ValaSubroutine parent_instance;
	ValaPropertyAccessorPrivate * priv;
};

struct _ValaPropertyAccessorClass {
	ValaSubroutineClass parent_class;
};

struct _ValaPropertyPrototype {
	ValaDataType parent_instance;
	ValaPropertyPrototypePrivate * priv;
};

struct _ValaPropertyPrototypeClass {
	ValaDataTypeClass parent_class;
};

struct _ValaRealLiteral {
	ValaLiteral parent_instance;
	ValaRealLiteralPrivate * priv;
};

struct _ValaRealLiteralClass {
	ValaLiteralClass parent_class;
};

struct _ValaReferenceTransferExpression {
	ValaExpression parent_instance;
	ValaReferenceTransferExpressionPrivate * priv;
};

struct _ValaReferenceTransferExpressionClass {
	ValaExpressionClass parent_class;
};

struct _ValaRegexLiteral {
	ValaLiteral parent_instance;
	ValaRegexLiteralPrivate * priv;
};

struct _ValaRegexLiteralClass {
	ValaLiteralClass parent_class;
};

struct _ValaReport {
	GTypeInstance parent_instance;
	volatile int ref_count;
	gint warnings;
	gint errors;
	ValaReportPrivate * priv;
};

struct _ValaReportClass {
	GTypeClass parent_class;
	void (*finalize) (ValaReport *self);
	void (*note) (ValaReport* self, ValaSourceReference* source, const gchar* message);
	void (*depr) (ValaReport* self, ValaSourceReference* source, const gchar* message);
	void (*warn) (ValaReport* self, ValaSourceReference* source, const gchar* message);
	void (*err) (ValaReport* self, ValaSourceReference* source, const gchar* message);
};

struct _ValaReturnStatement {
	ValaCodeNode parent_instance;
	ValaReturnStatementPrivate * priv;
};

struct _ValaReturnStatementClass {
	ValaCodeNodeClass parent_class;
};

struct _ValaScanner {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ValaScannerPrivate * priv;
};

struct _ValaScannerClass {
	GTypeClass parent_class;
	void (*finalize) (ValaScanner *self);
};

struct _ValaScope {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ValaScopePrivate * priv;
};

struct _ValaScopeClass {
	GTypeClass parent_class;
	void (*finalize) (ValaScope *self);
};

struct _ValaSemanticAnalyzer {
	ValaCodeVisitor parent_instance;
	ValaBlock* insert_block;
	ValaDataType* void_type;
	ValaDataType* bool_type;
	ValaDataType* char_type;
	ValaDataType* uchar_type;
	ValaDataType* short_type;
	ValaDataType* ushort_type;
	ValaDataType* int_type;
	ValaDataType* uint_type;
	ValaDataType* long_type;
	ValaDataType* ulong_type;
	ValaDataType* int8_type;
	ValaDataType* uint8_type;
	ValaDataType* int16_type;
	ValaDataType* uint16_type;
	ValaDataType* int32_type;
	ValaDataType* uint32_type;
	ValaDataType* size_t_type;
	ValaDataType* ssize_t_type;
	ValaDataType* unichar_type;
	ValaDataType* double_type;
	ValaDataType* string_type;
	ValaDataType* regex_type;
	ValaDataType* type_type;
	ValaDataType* va_list_type;
	ValaClass* object_type;
	ValaStructValueType* gvalue_type;
	ValaObjectType* gvariant_type;
	ValaDataType* glist_type;
	ValaDataType* gslist_type;
	ValaDataType* garray_type;
	ValaDataType* gvaluearray_type;
	ValaClass* gerror_type;
	ValaDataType* list_type;
	ValaDataType* tuple_type;
	ValaClass* gsource_type;
	ValaDataType* delegate_target_type;
	ValaDelegateType* delegate_target_destroy_type;
	ValaDelegateType* generics_dup_func_type;
	ValaList* replaced_nodes;
	ValaSemanticAnalyzerPrivate * priv;
};

struct _ValaSemanticAnalyzerClass {
	ValaCodeVisitorClass parent_class;
};

struct _ValaSignalType {
	ValaCallableType parent_instance;
	ValaSignalTypePrivate * priv;
};

struct _ValaSignalTypeClass {
	ValaCallableTypeClass parent_class;
};

struct _ValaSizeofExpression {
	ValaExpression parent_instance;
	ValaSizeofExpressionPrivate * priv;
};

struct _ValaSizeofExpressionClass {
	ValaExpressionClass parent_class;
};

struct _ValaSliceExpression {
	ValaExpression parent_instance;
	ValaSliceExpressionPrivate * priv;
};

struct _ValaSliceExpressionClass {
	ValaExpressionClass parent_class;
};

struct _ValaSourceFile {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ValaSourceFilePrivate * priv;
};

struct _ValaSourceFileClass {
	GTypeClass parent_class;
	void (*finalize) (ValaSourceFile *self);
};

struct _ValaSourceReference {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ValaSourceReferencePrivate * priv;
};

struct _ValaSourceReferenceClass {
	GTypeClass parent_class;
	void (*finalize) (ValaSourceReference *self);
};

struct _ValaStatementList {
	ValaCodeNode parent_instance;
	ValaStatementListPrivate * priv;
};

struct _ValaStatementListClass {
	ValaCodeNodeClass parent_class;
};

struct _ValaStringLiteral {
	ValaLiteral parent_instance;
	ValaStringLiteralPrivate * priv;
};

struct _ValaStringLiteralClass {
	ValaLiteralClass parent_class;
};

struct _ValaStruct {
	ValaTypeSymbol parent_instance;
	ValaStructPrivate * priv;
};

struct _ValaStructClass {
	ValaTypeSymbolClass parent_class;
};

struct _ValaStructValueType {
	ValaValueType parent_instance;
	ValaStructValueTypePrivate * priv;
};

struct _ValaStructValueTypeClass {
	ValaValueTypeClass parent_class;
};

struct _ValaSwitchLabel {
	ValaCodeNode parent_instance;
	ValaSwitchLabelPrivate * priv;
};

struct _ValaSwitchLabelClass {
	ValaCodeNodeClass parent_class;
};

struct _ValaSwitchSection {
	ValaBlock parent_instance;
	ValaSwitchSectionPrivate * priv;
};

struct _ValaSwitchSectionClass {
	ValaBlockClass parent_class;
};

struct _ValaSwitchStatement {
	ValaCodeNode parent_instance;
	ValaSwitchStatementPrivate * priv;
};

struct _ValaSwitchStatementClass {
	ValaCodeNodeClass parent_class;
};

struct _ValaSymbolResolver {
	ValaCodeVisitor parent_instance;
	ValaSymbolResolverPrivate * priv;
};

struct _ValaSymbolResolverClass {
	ValaCodeVisitorClass parent_class;
};

struct _ValaTargetValue {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ValaTargetValuePrivate * priv;
};

struct _ValaTargetValueClass {
	GTypeClass parent_class;
	void (*finalize) (ValaTargetValue *self);
};

struct _ValaTemplate {
	ValaExpression parent_instance;
	ValaTemplatePrivate * priv;
};

struct _ValaTemplateClass {
	ValaExpressionClass parent_class;
};

struct _ValaThrowStatement {
	ValaCodeNode parent_instance;
	ValaThrowStatementPrivate * priv;
};

struct _ValaThrowStatementClass {
	ValaCodeNodeClass parent_class;
};

struct _ValaTraverseVisitor {
	ValaCodeVisitor parent_instance;
	ValaTraverseVisitorPrivate * priv;
};

struct _ValaTraverseVisitorClass {
	ValaCodeVisitorClass parent_class;
};

struct _ValaTryStatement {
	ValaCodeNode parent_instance;
	ValaTryStatementPrivate * priv;
};

struct _ValaTryStatementClass {
	ValaCodeNodeClass parent_class;
};

struct _ValaTuple {
	ValaExpression parent_instance;
	ValaTuplePrivate * priv;
};

struct _ValaTupleClass {
	ValaExpressionClass parent_class;
};

struct _ValaTypeCheck {
	ValaExpression parent_instance;
	ValaTypeCheckPrivate * priv;
};

struct _ValaTypeCheckClass {
	ValaExpressionClass parent_class;
};

struct _ValaTypeofExpression {
	ValaExpression parent_instance;
	ValaTypeofExpressionPrivate * priv;
};

struct _ValaTypeofExpressionClass {
	ValaExpressionClass parent_class;
};

struct _ValaTypeParameter {
	ValaSymbol parent_instance;
	ValaTypeParameterPrivate * priv;
};

struct _ValaTypeParameterClass {
	ValaSymbolClass parent_class;
};

struct _ValaUnaryExpression {
	ValaExpression parent_instance;
	ValaUnaryExpressionPrivate * priv;
};

struct _ValaUnaryExpressionClass {
	ValaExpressionClass parent_class;
};

struct _ValaUnlockStatement {
	ValaCodeNode parent_instance;
	ValaUnlockStatementPrivate * priv;
};

struct _ValaUnlockStatementClass {
	ValaCodeNodeClass parent_class;
};

struct _ValaUnresolvedSymbol {
	ValaSymbol parent_instance;
	ValaUnresolvedSymbolPrivate * priv;
};

struct _ValaUnresolvedSymbolClass {
	ValaSymbolClass parent_class;
};

struct _ValaUnresolvedType {
	ValaDataType parent_instance;
	ValaUnresolvedTypePrivate * priv;
};

struct _ValaUnresolvedTypeClass {
	ValaDataTypeClass parent_class;
};

struct _ValaUsedAttr {
	ValaCodeVisitor parent_instance;
	ValaMap* marked;
	ValaUsedAttrPrivate * priv;
};

struct _ValaUsedAttrClass {
	ValaCodeVisitorClass parent_class;
};

struct _ValaUsingDirective {
	ValaCodeNode parent_instance;
	ValaUsingDirectivePrivate * priv;
};

struct _ValaUsingDirectiveClass {
	ValaCodeNodeClass parent_class;
};

struct _ValaVarType {
	ValaDataType parent_instance;
	ValaVarTypePrivate * priv;
};

struct _ValaVarTypeClass {
	ValaDataTypeClass parent_class;
};

struct _ValaVersionAttribute {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ValaVersionAttributePrivate * priv;
};

struct _ValaVersionAttributeClass {
	GTypeClass parent_class;
	void (*finalize) (ValaVersionAttribute *self);
};

struct _ValaVoidType {
	ValaDataType parent_instance;
	ValaVoidTypePrivate * priv;
};

struct _ValaVoidTypeClass {
	ValaDataTypeClass parent_class;
};

struct _ValaWhileStatement {
	ValaCodeNode parent_instance;
	ValaWhileStatementPrivate * priv;
};

struct _ValaWhileStatementClass {
	ValaCodeNodeClass parent_class;
};

struct _ValaYieldStatement {
	ValaCodeNode parent_instance;
	ValaYieldStatementPrivate * priv;
};

struct _ValaYieldStatementClass {
	ValaCodeNodeClass parent_class;
};

gpointer bala_code_node_ref (gpointer instance);
void bala_code_node_unref (gpointer instance);
GParamSpec* bala_param_spec_code_node (const gchar* name,
                                       const gchar* nick,
                                       const gchar* blurb,
                                       GType object_type,
                                       GParamFlags flags);
void bala_value_set_code_node (GValue* value,
                               gpointer v_object);
void bala_value_take_code_node (GValue* value,
                                gpointer v_object);
gpointer bala_value_get_code_node (const GValue* value);
GType bala_code_node_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaCodeNode, bala_code_node_unref)
GType bala_attribute_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaAttribute, bala_code_node_unref)
gpointer bala_code_visitor_ref (gpointer instance);
void bala_code_visitor_unref (gpointer instance);
GParamSpec* bala_param_spec_code_visitor (const gchar* name,
                                          const gchar* nick,
                                          const gchar* blurb,
                                          GType object_type,
                                          GParamFlags flags);
void bala_value_set_code_visitor (GValue* value,
                                  gpointer v_object);
void bala_value_take_code_visitor (GValue* value,
                                   gpointer v_object);
gpointer bala_value_get_code_visitor (const GValue* value);
GType bala_code_visitor_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaCodeVisitor, bala_code_visitor_unref)
gpointer bala_code_context_ref (gpointer instance);
void bala_code_context_unref (gpointer instance);
GParamSpec* bala_param_spec_code_context (const gchar* name,
                                          const gchar* nick,
                                          const gchar* blurb,
                                          GType object_type,
                                          GParamFlags flags);
void bala_value_set_code_context (GValue* value,
                                  gpointer v_object);
void bala_value_take_code_context (GValue* value,
                                   gpointer v_object);
gpointer bala_value_get_code_context (const GValue* value);
GType bala_code_context_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaCodeContext, bala_code_context_unref)
GType bala_code_generator_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaCodeGenerator, bala_code_visitor_unref)
GType bala_data_type_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaDataType, bala_code_node_unref)
GType bala_expression_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaExpression, bala_code_node_unref)
GType bala_symbol_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaSymbol, bala_code_node_unref)
GType bala_variable_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaVariable, bala_code_node_unref)
gpointer bala_source_reference_ref (gpointer instance);
void bala_source_reference_unref (gpointer instance);
GParamSpec* bala_param_spec_source_reference (const gchar* name,
                                              const gchar* nick,
                                              const gchar* blurb,
                                              GType object_type,
                                              GParamFlags flags);
void bala_value_set_source_reference (GValue* value,
                                      gpointer v_object);
void bala_value_take_source_reference (GValue* value,
                                       gpointer v_object);
gpointer bala_value_get_source_reference (const GValue* value);
GType bala_source_reference_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaSourceReference, bala_source_reference_unref)
GType bala_addressof_expression_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaAddressofExpression, bala_code_node_unref)
ValaExpression* bala_addressof_expression_get_inner (ValaAddressofExpression* self);
void bala_addressof_expression_set_inner (ValaAddressofExpression* self,
                                          ValaExpression* value);
ValaAddressofExpression* bala_addressof_expression_new (ValaExpression* inner,
                                                        ValaSourceReference* source_reference);
ValaAddressofExpression* bala_addressof_expression_construct (GType object_type,
                                                              ValaExpression* inner,
                                                              ValaSourceReference* source_reference);
GType bala_namespace_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaNamespace, bala_code_node_unref)
GType bala_typesymbol_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaTypeSymbol, bala_code_node_unref)
GType bala_object_type_symbol_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaObjectTypeSymbol, bala_code_node_unref)
GType bala_class_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaClass, bala_code_node_unref)
GType bala_interface_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaInterface, bala_code_node_unref)
GType bala_struct_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaStruct, bala_code_node_unref)
GType bala_enum_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaEnum, bala_code_node_unref)
GType bala_error_domain_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaErrorDomain, bala_code_node_unref)
GType bala_delegate_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaDelegate, bala_code_node_unref)
GType bala_constant_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaConstant, bala_code_node_unref)
GType bala_field_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaField, bala_code_node_unref)
GType bala_subroutine_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaSubroutine, bala_code_node_unref)
GType bala_method_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaMethod, bala_code_node_unref)
GType bala_property_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaProperty, bala_code_node_unref)
GType bala_signal_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaSignal, bala_code_node_unref)
GType bala_constructor_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaConstructor, bala_code_node_unref)
GType bala_destructor_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaDestructor, bala_code_node_unref)
GType bala_parameter_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaParameter, bala_code_node_unref)
GType bala_callable_get_type (void) G_GNUC_CONST;
GType bala_array_copy_method_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaArrayCopyMethod, bala_code_node_unref)
ValaArrayCopyMethod* bala_array_copy_method_new (ValaSourceReference* source_reference);
ValaArrayCopyMethod* bala_array_copy_method_construct (GType object_type,
                                                       ValaSourceReference* source_reference);
GType bala_array_creation_expression_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaArrayCreationExpression, bala_code_node_unref)
ValaDataType* bala_array_creation_expression_get_element_type (ValaArrayCreationExpression* self);
void bala_array_creation_expression_set_element_type (ValaArrayCreationExpression* self,
                                                      ValaDataType* value);
ValaDataType* bala_array_creation_expression_get_length_type (ValaArrayCreationExpression* self);
void bala_array_creation_expression_set_length_type (ValaArrayCreationExpression* self,
                                                     ValaDataType* value);
gint bala_array_creation_expression_get_rank (ValaArrayCreationExpression* self);
void bala_array_creation_expression_set_rank (ValaArrayCreationExpression* self,
                                              gint value);
GType bala_initializer_list_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaInitializerList, bala_code_node_unref)
ValaInitializerList* bala_array_creation_expression_get_initializer_list (ValaArrayCreationExpression* self);
void bala_array_creation_expression_set_initializer_list (ValaArrayCreationExpression* self,
                                                          ValaInitializerList* value);
void bala_array_creation_expression_append_size (ValaArrayCreationExpression* self,
                                                 ValaExpression* size);
ValaList* bala_array_creation_expression_get_sizes (ValaArrayCreationExpression* self);
ValaArrayCreationExpression* bala_array_creation_expression_new (ValaDataType* element_type,
                                                                 gint rank,
                                                                 ValaInitializerList* initializer_list,
                                                                 ValaSourceReference* source_reference);
ValaArrayCreationExpression* bala_array_creation_expression_construct (GType object_type,
                                                                       ValaDataType* element_type,
                                                                       gint rank,
                                                                       ValaInitializerList* initializer_list,
                                                                       ValaSourceReference* source_reference);
GType bala_lockable_get_type (void) G_GNUC_CONST;
GType bala_array_length_field_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaArrayLengthField, bala_code_node_unref)
ValaArrayLengthField* bala_array_length_field_new (ValaSourceReference* source_reference);
ValaArrayLengthField* bala_array_length_field_construct (GType object_type,
                                                         ValaSourceReference* source_reference);
GType bala_array_move_method_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaArrayMoveMethod, bala_code_node_unref)
ValaArrayMoveMethod* bala_array_move_method_new (ValaSourceReference* source_reference);
ValaArrayMoveMethod* bala_array_move_method_construct (GType object_type,
                                                       ValaSourceReference* source_reference);
GType bala_array_resize_method_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaArrayResizeMethod, bala_code_node_unref)
ValaArrayResizeMethod* bala_array_resize_method_new (ValaSourceReference* source_reference);
ValaArrayResizeMethod* bala_array_resize_method_construct (GType object_type,
                                                           ValaSourceReference* source_reference);
gpointer bala_scope_ref (gpointer instance);
void bala_scope_unref (gpointer instance);
GParamSpec* bala_param_spec_scope (const gchar* name,
                                   const gchar* nick,
                                   const gchar* blurb,
                                   GType object_type,
                                   GParamFlags flags);
void bala_value_set_scope (GValue* value,
                           gpointer v_object);
void bala_value_take_scope (GValue* value,
                            gpointer v_object);
gpointer bala_value_get_scope (const GValue* value);
GType bala_scope_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaScope, bala_scope_unref)
GType bala_typeparameter_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaTypeParameter, bala_code_node_unref)
GType bala_reference_type_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaReferenceType, bala_code_node_unref)
GType bala_array_type_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaArrayType, bala_code_node_unref)
ValaDataType* bala_array_type_get_element_type (ValaArrayType* self);
void bala_array_type_set_element_type (ValaArrayType* self,
                                       ValaDataType* value);
ValaDataType* bala_array_type_get_length_type (ValaArrayType* self);
void bala_array_type_set_length_type (ValaArrayType* self,
                                      ValaDataType* value);
gboolean bala_array_type_get_invalid_syntax (ValaArrayType* self);
void bala_array_type_set_invalid_syntax (ValaArrayType* self,
                                         gboolean value);
gboolean bala_array_type_get_inline_allocated (ValaArrayType* self);
void bala_array_type_set_inline_allocated (ValaArrayType* self,
                                           gboolean value);
gboolean bala_array_type_get_fixed_length (ValaArrayType* self);
void bala_array_type_set_fixed_length (ValaArrayType* self,
                                       gboolean value);
ValaExpression* bala_array_type_get_length (ValaArrayType* self);
void bala_array_type_set_length (ValaArrayType* self,
                                 ValaExpression* value);
gint bala_array_type_get_rank (ValaArrayType* self);
void bala_array_type_set_rank (ValaArrayType* self,
                               gint value);
ValaArrayType* bala_array_type_new (ValaDataType* element_type,
                                    gint rank,
                                    ValaSourceReference* source_reference);
ValaArrayType* bala_array_type_construct (GType object_type,
                                          ValaDataType* element_type,
                                          gint rank,
                                          ValaSourceReference* source_reference);
GType bala_assignment_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaAssignment, bala_code_node_unref)
ValaExpression* bala_assignment_get_left (ValaAssignment* self);
void bala_assignment_set_left (ValaAssignment* self,
                               ValaExpression* value);
GType bala_assignment_operator_get_type (void) G_GNUC_CONST;
ValaAssignmentOperator bala_assignment_get_operator (ValaAssignment* self);
void bala_assignment_set_operator (ValaAssignment* self,
                                   ValaAssignmentOperator value);
ValaExpression* bala_assignment_get_right (ValaAssignment* self);
void bala_assignment_set_right (ValaAssignment* self,
                                ValaExpression* value);
ValaAssignment* bala_assignment_new (ValaExpression* left,
                                     ValaExpression* right,
                                     ValaAssignmentOperator operator,
                                     ValaSourceReference* source_reference);
ValaAssignment* bala_assignment_construct (GType object_type,
                                           ValaExpression* left,
                                           ValaExpression* right,
                                           ValaAssignmentOperator operator,
                                           ValaSourceReference* source_reference);
const gchar* bala_assignment_operator_to_string (ValaAssignmentOperator self);
const gchar* bala_attribute_get_name (ValaAttribute* self);
void bala_attribute_set_name (ValaAttribute* self,
                              const gchar* value);
ValaMap* bala_attribute_get_args (ValaAttribute* self);
ValaAttribute* bala_attribute_new (const gchar* name,
                                   ValaSourceReference* source_reference);
ValaAttribute* bala_attribute_construct (GType object_type,
                                         const gchar* name,
                                         ValaSourceReference* source_reference);
void bala_attribute_add_argument (ValaAttribute* self,
                                  const gchar* key,
                                  const gchar* value);
gboolean bala_attribute_has_argument (ValaAttribute* self,
                                      const gchar* name);
gchar* bala_attribute_get_string (ValaAttribute* self,
                                  const gchar* name,
                                  const gchar* default_value);
gint bala_attribute_get_integer (ValaAttribute* self,
                                 const gchar* name,
                                 gint default_value);
gdouble bala_attribute_get_double (ValaAttribute* self,
                                   const gchar* name,
                                   gdouble default_value);
gboolean bala_attribute_get_bool (ValaAttribute* self,
                                  const gchar* name,
                                  gboolean default_value);
GType bala_base_access_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaBaseAccess, bala_code_node_unref)
ValaBaseAccess* bala_base_access_new (ValaSourceReference* source);
ValaBaseAccess* bala_base_access_construct (GType object_type,
                                            ValaSourceReference* source);
gpointer bala_basic_block_ref (gpointer instance);
void bala_basic_block_unref (gpointer instance);
GParamSpec* bala_param_spec_basic_block (const gchar* name,
                                         const gchar* nick,
                                         const gchar* blurb,
                                         GType object_type,
                                         GParamFlags flags);
void bala_value_set_basic_block (GValue* value,
                                 gpointer v_object);
void bala_value_take_basic_block (GValue* value,
                                  gpointer v_object);
gpointer bala_value_get_basic_block (const GValue* value);
GType bala_basic_block_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaBasicBlock, bala_basic_block_unref)
ValaBasicBlock* bala_basic_block_get_parent (ValaBasicBlock* self);
gboolean bala_basic_block_get_postorder_visited (ValaBasicBlock* self);
void bala_basic_block_set_postorder_visited (ValaBasicBlock* self,
                                             gboolean value);
gint bala_basic_block_get_postorder_number (ValaBasicBlock* self);
void bala_basic_block_set_postorder_number (ValaBasicBlock* self,
                                            gint value);
ValaBasicBlock* bala_basic_block_new (void);
ValaBasicBlock* bala_basic_block_construct (GType object_type);
ValaBasicBlock* bala_basic_block_new_entry (void);
ValaBasicBlock* bala_basic_block_construct_entry (GType object_type);
ValaBasicBlock* bala_basic_block_new_exit (void);
ValaBasicBlock* bala_basic_block_construct_exit (GType object_type);
void bala_basic_block_add_node (ValaBasicBlock* self,
                                ValaCodeNode* node);
ValaList* bala_basic_block_get_nodes (ValaBasicBlock* self);
void bala_basic_block_connect (ValaBasicBlock* self,
                               ValaBasicBlock* target);
ValaList* bala_basic_block_get_predecessors (ValaBasicBlock* self);
ValaList* bala_basic_block_get_successors (ValaBasicBlock* self);
void bala_basic_block_add_child (ValaBasicBlock* self,
                                 ValaBasicBlock* block);
ValaList* bala_basic_block_get_children (ValaBasicBlock* self);
void bala_basic_block_add_dominator_frontier (ValaBasicBlock* self,
                                              ValaBasicBlock* block);
ValaSet* bala_basic_block_get_dominator_frontier (ValaBasicBlock* self);
gpointer bala_phi_function_ref (gpointer instance);
void bala_phi_function_unref (gpointer instance);
GParamSpec* bala_param_spec_phi_function (const gchar* name,
                                          const gchar* nick,
                                          const gchar* blurb,
                                          GType object_type,
                                          GParamFlags flags);
void bala_value_set_phi_function (GValue* value,
                                  gpointer v_object);
void bala_value_take_phi_function (GValue* value,
                                   gpointer v_object);
gpointer bala_value_get_phi_function (const GValue* value);
GType bala_phi_function_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaPhiFunction, bala_phi_function_unref)
void bala_basic_block_add_phi_function (ValaBasicBlock* self,
                                        ValaPhiFunction* phi);
ValaSet* bala_basic_block_get_phi_functions (ValaBasicBlock* self);
GType bala_binary_expression_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaBinaryExpression, bala_code_node_unref)
GType bala_binary_operator_get_type (void) G_GNUC_CONST;
ValaBinaryOperator bala_binary_expression_get_operator (ValaBinaryExpression* self);
void bala_binary_expression_set_operator (ValaBinaryExpression* self,
                                          ValaBinaryOperator value);
ValaExpression* bala_binary_expression_get_left (ValaBinaryExpression* self);
void bala_binary_expression_set_left (ValaBinaryExpression* self,
                                      ValaExpression* value);
ValaExpression* bala_binary_expression_get_right (ValaBinaryExpression* self);
void bala_binary_expression_set_right (ValaBinaryExpression* self,
                                       ValaExpression* value);
gboolean bala_binary_expression_get_is_chained (ValaBinaryExpression* self);
ValaBinaryExpression* bala_binary_expression_new (ValaBinaryOperator op,
                                                  ValaExpression* _left,
                                                  ValaExpression* _right,
                                                  ValaSourceReference* source);
ValaBinaryExpression* bala_binary_expression_construct (GType object_type,
                                                        ValaBinaryOperator op,
                                                        ValaExpression* _left,
                                                        ValaExpression* _right,
                                                        ValaSourceReference* source);
ValaBinaryExpression* bala_binary_expression_new_chained (ValaBinaryOperator op,
                                                          ValaExpression* _left,
                                                          ValaExpression* _right,
                                                          ValaSourceReference* source);
ValaBinaryExpression* bala_binary_expression_construct_chained (GType object_type,
                                                                ValaBinaryOperator op,
                                                                ValaExpression* _left,
                                                                ValaExpression* _right,
                                                                ValaSourceReference* source);
const gchar* bala_binary_operator_to_string (ValaBinaryOperator self);
GType bala_statement_get_type (void) G_GNUC_CONST;
GType bala_block_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaBlock, bala_code_node_unref)
gboolean bala_block_get_contains_jump_statement (ValaBlock* self);
void bala_block_set_contains_jump_statement (ValaBlock* self,
                                             gboolean value);
gboolean bala_block_get_captured (ValaBlock* self);
void bala_block_set_captured (ValaBlock* self,
                              gboolean value);
ValaBlock* bala_block_new (ValaSourceReference* source_reference);
ValaBlock* bala_block_construct (GType object_type,
                                 ValaSourceReference* source_reference);
void bala_block_add_statement (ValaBlock* self,
                               ValaStatement* stmt);
void bala_block_insert_statement (ValaBlock* self,
                                  gint index,
                                  ValaStatement* stmt);
ValaList* bala_block_get_statements (ValaBlock* self);
GType bala_local_variable_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaLocalVariable, bala_code_node_unref)
void bala_block_add_local_variable (ValaBlock* self,
                                    ValaLocalVariable* local);
void bala_block_remove_local_variable (ValaBlock* self,
                                       ValaLocalVariable* local);
ValaList* bala_block_get_local_variables (ValaBlock* self);
void bala_block_add_local_constant (ValaBlock* self,
                                    ValaConstant* constant);
ValaList* bala_block_get_local_constants (ValaBlock* self);
void bala_block_insert_before (ValaBlock* self,
                               ValaStatement* stmt,
                               ValaStatement* new_stmt);
void bala_block_replace_statement (ValaBlock* self,
                                   ValaStatement* old_stmt,
                                   ValaStatement* new_stmt);
GType bala_literal_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaLiteral, bala_code_node_unref)
GType bala_boolean_literal_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaBooleanLiteral, bala_code_node_unref)
gboolean bala_boolean_literal_get_value (ValaBooleanLiteral* self);
void bala_boolean_literal_set_value (ValaBooleanLiteral* self,
                                     gboolean value);
ValaBooleanLiteral* bala_boolean_literal_new (gboolean b,
                                              ValaSourceReference* source);
ValaBooleanLiteral* bala_boolean_literal_construct (GType object_type,
                                                    gboolean b,
                                                    ValaSourceReference* source);
GType bala_value_type_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaValueType, bala_code_node_unref)
GType bala_boolean_type_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaBooleanType, bala_code_node_unref)
ValaBooleanType* bala_boolean_type_new (ValaStruct* type_symbol);
ValaBooleanType* bala_boolean_type_construct (GType object_type,
                                              ValaStruct* type_symbol);
GType bala_break_statement_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaBreakStatement, bala_code_node_unref)
ValaBreakStatement* bala_break_statement_new (ValaSourceReference* source);
ValaBreakStatement* bala_break_statement_construct (GType object_type,
                                                    ValaSourceReference* source);
ValaDataType* bala_callable_get_return_type (ValaCallable* self);
void bala_callable_set_return_type (ValaCallable* self,
                                    ValaDataType* value);
void bala_callable_add_parameter (ValaCallable* self,
                                  ValaParameter* param);
ValaList* bala_callable_get_parameters (ValaCallable* self);
GType bala_callable_type_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaCallableType, bala_code_node_unref)
ValaCallable* bala_callable_type_get_callable_symbol (ValaCallableType* self);
ValaCallableType* bala_callable_type_construct (GType object_type,
                                                ValaSymbol* symbol);
GType bala_cast_expression_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaCastExpression, bala_code_node_unref)
ValaExpression* bala_cast_expression_get_inner (ValaCastExpression* self);
void bala_cast_expression_set_inner (ValaCastExpression* self,
                                     ValaExpression* value);
ValaDataType* bala_cast_expression_get_type_reference (ValaCastExpression* self);
void bala_cast_expression_set_type_reference (ValaCastExpression* self,
                                              ValaDataType* value);
gboolean bala_cast_expression_get_is_silent_cast (ValaCastExpression* self);
gboolean bala_cast_expression_get_is_non_null_cast (ValaCastExpression* self);
ValaCastExpression* bala_cast_expression_new (ValaExpression* inner,
                                              ValaDataType* type_reference,
                                              ValaSourceReference* source_reference);
ValaCastExpression* bala_cast_expression_construct (GType object_type,
                                                    ValaExpression* inner,
                                                    ValaDataType* type_reference,
                                                    ValaSourceReference* source_reference);
ValaCastExpression* bala_cast_expression_new_silent (ValaExpression* inner,
                                                     ValaDataType* type_reference,
                                                     ValaSourceReference* source_reference);
ValaCastExpression* bala_cast_expression_construct_silent (GType object_type,
                                                           ValaExpression* inner,
                                                           ValaDataType* type_reference,
                                                           ValaSourceReference* source_reference);
ValaCastExpression* bala_cast_expression_new_non_null (ValaExpression* inner,
                                                       ValaSourceReference* source_reference);
ValaCastExpression* bala_cast_expression_construct_non_null (GType object_type,
                                                             ValaExpression* inner,
                                                             ValaSourceReference* source_reference);
GType bala_catch_clause_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaCatchClause, bala_code_node_unref)
ValaDataType* bala_catch_clause_get_error_type (ValaCatchClause* self);
void bala_catch_clause_set_error_type (ValaCatchClause* self,
                                       ValaDataType* value);
const gchar* bala_catch_clause_get_variable_name (ValaCatchClause* self);
void bala_catch_clause_set_variable_name (ValaCatchClause* self,
                                          const gchar* value);
ValaBlock* bala_catch_clause_get_body (ValaCatchClause* self);
void bala_catch_clause_set_body (ValaCatchClause* self,
                                 ValaBlock* value);
ValaLocalVariable* bala_catch_clause_get_error_variable (ValaCatchClause* self);
void bala_catch_clause_set_error_variable (ValaCatchClause* self,
                                           ValaLocalVariable* value);
const gchar* bala_catch_clause_get_clabel_name (ValaCatchClause* self);
void bala_catch_clause_set_clabel_name (ValaCatchClause* self,
                                        const gchar* value);
ValaCatchClause* bala_catch_clause_new (ValaDataType* error_type,
                                        const gchar* variable_name,
                                        ValaBlock* body,
                                        ValaSourceReference* source_reference);
ValaCatchClause* bala_catch_clause_construct (GType object_type,
                                              ValaDataType* error_type,
                                              const gchar* variable_name,
                                              ValaBlock* body,
                                              ValaSourceReference* source_reference);
GType bala_character_literal_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaCharacterLiteral, bala_code_node_unref)
const gchar* bala_character_literal_get_value (ValaCharacterLiteral* self);
void bala_character_literal_set_value (ValaCharacterLiteral* self,
                                       const gchar* value);
ValaCharacterLiteral* bala_character_literal_new (const gchar* c,
                                                  ValaSourceReference* source);
ValaCharacterLiteral* bala_character_literal_construct (GType object_type,
                                                        const gchar* c,
                                                        ValaSourceReference* source);
gunichar bala_character_literal_get_char (ValaCharacterLiteral* self);
ValaClass* bala_class_get_base_class (ValaClass* self);
void bala_class_set_base_class (ValaClass* self,
                                ValaClass* value);
gboolean bala_class_get_is_abstract (ValaClass* self);
void bala_class_set_is_abstract (ValaClass* self,
                                 gboolean value);
gboolean bala_class_get_is_sealed (ValaClass* self);
void bala_class_set_is_sealed (ValaClass* self,
                               gboolean value);
gboolean bala_class_get_is_compact (ValaClass* self);
void bala_class_set_is_compact (ValaClass* self,
                                gboolean value);
gboolean bala_class_get_is_immutable (ValaClass* self);
void bala_class_set_is_immutable (ValaClass* self,
                                  gboolean value);
gboolean bala_class_get_is_singleton (ValaClass* self);
void bala_class_set_is_singleton (ValaClass* self,
                                  gboolean value);
gboolean bala_class_get_has_private_fields (ValaClass* self);
void bala_class_set_has_private_fields (ValaClass* self,
                                        gboolean value);
gboolean bala_class_get_has_class_private_fields (ValaClass* self);
GType bala_creation_method_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaCreationMethod, bala_code_node_unref)
ValaCreationMethod* bala_class_get_default_construction_method (ValaClass* self);
ValaConstructor* bala_class_get_constructor (ValaClass* self);
ValaConstructor* bala_class_get_class_constructor (ValaClass* self);
ValaConstructor* bala_class_get_static_constructor (ValaClass* self);
ValaDestructor* bala_class_get_destructor (ValaClass* self);
ValaDestructor* bala_class_get_static_destructor (ValaClass* self);
ValaDestructor* bala_class_get_class_destructor (ValaClass* self);
gboolean bala_class_get_is_error_base (ValaClass* self);
gpointer bala_comment_ref (gpointer instance);
void bala_comment_unref (gpointer instance);
GParamSpec* bala_param_spec_comment (const gchar* name,
                                     const gchar* nick,
                                     const gchar* blurb,
                                     GType object_type,
                                     GParamFlags flags);
void bala_value_set_comment (GValue* value,
                             gpointer v_object);
void bala_value_take_comment (GValue* value,
                              gpointer v_object);
gpointer bala_value_get_comment (const GValue* value);
GType bala_comment_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaComment, bala_comment_unref)
ValaClass* bala_class_new (const gchar* name,
                           ValaSourceReference* source_reference,
                           ValaComment* comment);
ValaClass* bala_class_construct (GType object_type,
                                 const gchar* name,
                                 ValaSourceReference* source_reference,
                                 ValaComment* comment);
void bala_class_add_base_type (ValaClass* self,
                               ValaDataType* type);
ValaList* bala_class_get_base_types (ValaClass* self);
ValaHashMap* bala_class_get_implicit_implementations (ValaClass* self);
gboolean bala_class_is_fundamental (ValaClass* self);
gboolean bala_class_is_a (ValaClass* self,
                          ValaObjectTypeSymbol* t);
gboolean bala_class_implements (ValaClass* self,
                                ValaInterface* i);
GType bala_class_type_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaClassType, bala_code_node_unref)
ValaClass* bala_class_type_get_class_symbol (ValaClassType* self);
ValaClassType* bala_class_type_new (ValaClass* class_symbol);
ValaClassType* bala_class_type_construct (GType object_type,
                                          ValaClass* class_symbol);
gboolean bala_code_context_get_assert (ValaCodeContext* self);
void bala_code_context_set_assert (ValaCodeContext* self,
                                   gboolean value);
gboolean bala_code_context_get_checking (ValaCodeContext* self);
void bala_code_context_set_checking (ValaCodeContext* self,
                                     gboolean value);
gboolean bala_code_context_get_deprecated (ValaCodeContext* self);
void bala_code_context_set_deprecated (ValaCodeContext* self,
                                       gboolean value);
gboolean bala_code_context_get_hide_internal (ValaCodeContext* self);
void bala_code_context_set_hide_internal (ValaCodeContext* self,
                                          gboolean value);
gboolean bala_code_context_get_since_check (ValaCodeContext* self);
void bala_code_context_set_since_check (ValaCodeContext* self,
                                        gboolean value);
gboolean bala_code_context_get_experimental (ValaCodeContext* self);
void bala_code_context_set_experimental (ValaCodeContext* self,
                                         gboolean value);
gboolean bala_code_context_get_experimental_non_null (ValaCodeContext* self);
void bala_code_context_set_experimental_non_null (ValaCodeContext* self,
                                                  gboolean value);
gboolean bala_code_context_get_gobject_tracing (ValaCodeContext* self);
void bala_code_context_set_gobject_tracing (ValaCodeContext* self,
                                            gboolean value);
gboolean bala_code_context_get_ccode_only (ValaCodeContext* self);
void bala_code_context_set_ccode_only (ValaCodeContext* self,
                                       gboolean value);
const gchar* bala_code_context_get_pkg_config_command (ValaCodeContext* self);
void bala_code_context_set_pkg_config_command (ValaCodeContext* self,
                                               const gchar* value);
gboolean bala_code_context_get_abi_stability (ValaCodeContext* self);
void bala_code_context_set_abi_stability (ValaCodeContext* self,
                                          gboolean value);
const gchar* bala_code_context_get_header_filename (ValaCodeContext* self);
void bala_code_context_set_header_filename (ValaCodeContext* self,
                                            const gchar* value);
const gchar* bala_code_context_get_internal_header_filename (ValaCodeContext* self);
void bala_code_context_set_internal_header_filename (ValaCodeContext* self,
                                                     const gchar* value);
gboolean bala_code_context_get_use_header (ValaCodeContext* self);
void bala_code_context_set_use_header (ValaCodeContext* self,
                                       gboolean value);
const gchar* bala_code_context_get_includedir (ValaCodeContext* self);
void bala_code_context_set_includedir (ValaCodeContext* self,
                                       const gchar* value);
const gchar* bala_code_context_get_symbols_filename (ValaCodeContext* self);
void bala_code_context_set_symbols_filename (ValaCodeContext* self,
                                             const gchar* value);
gboolean bala_code_context_get_compile_only (ValaCodeContext* self);
void bala_code_context_set_compile_only (ValaCodeContext* self,
                                         gboolean value);
const gchar* bala_code_context_get_output (ValaCodeContext* self);
void bala_code_context_set_output (ValaCodeContext* self,
                                   const gchar* value);
const gchar* bala_code_context_get_basedir (ValaCodeContext* self);
void bala_code_context_set_basedir (ValaCodeContext* self,
                                    const gchar* value);
const gchar* bala_code_context_get_directory (ValaCodeContext* self);
void bala_code_context_set_directory (ValaCodeContext* self,
                                      const gchar* value);
gchar** bala_code_context_get_vapi_directories (ValaCodeContext* self,
                                                gint* result_length1);
void bala_code_context_set_vapi_directories (ValaCodeContext* self,
                                             gchar** value,
                                             gint value_length1);
gchar** bala_code_context_get_gir_directories (ValaCodeContext* self,
                                               gint* result_length1);
void bala_code_context_set_gir_directories (ValaCodeContext* self,
                                            gchar** value,
                                            gint value_length1);
gchar** bala_code_context_get_metadata_directories (ValaCodeContext* self,
                                                    gint* result_length1);
void bala_code_context_set_metadata_directories (ValaCodeContext* self,
                                                 gchar** value,
                                                 gint value_length1);
gboolean bala_code_context_get_debug (ValaCodeContext* self);
void bala_code_context_set_debug (ValaCodeContext* self,
                                  gboolean value);
gint bala_code_context_get_optlevel (ValaCodeContext* self);
void bala_code_context_set_optlevel (ValaCodeContext* self,
                                     gint value);
gboolean bala_code_context_get_mem_profiler (ValaCodeContext* self);
void bala_code_context_set_mem_profiler (ValaCodeContext* self,
                                         gboolean value);
ValaMethod* bala_code_context_get_module_init_method (ValaCodeContext* self);
void bala_code_context_set_module_init_method (ValaCodeContext* self,
                                               ValaMethod* value);
gboolean bala_code_context_get_save_temps (ValaCodeContext* self);
void bala_code_context_set_save_temps (ValaCodeContext* self,
                                       gboolean value);
GType bala_profile_get_type (void) G_GNUC_CONST;
ValaProfile bala_code_context_get_profile (ValaCodeContext* self);
void bala_code_context_set_profile (ValaCodeContext* self,
                                    ValaProfile value);
gboolean bala_code_context_get_verbose_mode (ValaCodeContext* self);
void bala_code_context_set_verbose_mode (ValaCodeContext* self,
                                         gboolean value);
gboolean bala_code_context_get_version_header (ValaCodeContext* self);
void bala_code_context_set_version_header (ValaCodeContext* self,
                                           gboolean value);
gboolean bala_code_context_get_nostdpkg (ValaCodeContext* self);
void bala_code_context_set_nostdpkg (ValaCodeContext* self,
                                     gboolean value);
gboolean bala_code_context_get_use_fast_vapi (ValaCodeContext* self);
void bala_code_context_set_use_fast_vapi (ValaCodeContext* self,
                                          gboolean value);
gboolean bala_code_context_get_keep_going (ValaCodeContext* self);
void bala_code_context_set_keep_going (ValaCodeContext* self,
                                       gboolean value);
gboolean bala_code_context_get_vapi_comments (ValaCodeContext* self);
void bala_code_context_set_vapi_comments (ValaCodeContext* self,
                                          gboolean value);
gboolean bala_code_context_require_glib_version (ValaCodeContext* self,
                                                 gint major,
                                                 gint minor);
gboolean bala_code_context_get_save_csources (ValaCodeContext* self);
gpointer bala_report_ref (gpointer instance);
void bala_report_unref (gpointer instance);
GParamSpec* bala_param_spec_report (const gchar* name,
                                    const gchar* nick,
                                    const gchar* blurb,
                                    GType object_type,
                                    GParamFlags flags);
void bala_value_set_report (GValue* value,
                            gpointer v_object);
void bala_value_take_report (GValue* value,
                             gpointer v_object);
gpointer bala_value_get_report (const GValue* value);
GType bala_report_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaReport, bala_report_unref)
ValaReport* bala_code_context_get_report (ValaCodeContext* self);
void bala_code_context_set_report (ValaCodeContext* self,
                                   ValaReport* value);
ValaMethod* bala_code_context_get_entry_point (ValaCodeContext* self);
void bala_code_context_set_entry_point (ValaCodeContext* self,
                                        ValaMethod* value);
const gchar* bala_code_context_get_entry_point_name (ValaCodeContext* self);
void bala_code_context_set_entry_point_name (ValaCodeContext* self,
                                             const gchar* value);
gboolean bala_code_context_get_run_output (ValaCodeContext* self);
void bala_code_context_set_run_output (ValaCodeContext* self,
                                       gboolean value);
gchar** bala_code_context_get_gresources (ValaCodeContext* self,
                                          gint* result_length1);
void bala_code_context_set_gresources (ValaCodeContext* self,
                                       gchar** value,
                                       gint value_length1);
gchar** bala_code_context_get_gresources_directories (ValaCodeContext* self,
                                                      gint* result_length1);
void bala_code_context_set_gresources_directories (ValaCodeContext* self,
                                                   gchar** value,
                                                   gint value_length1);
ValaNamespace* bala_code_context_get_root (ValaCodeContext* self);
GType bala_symbol_resolver_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaSymbolResolver, bala_code_visitor_unref)
ValaSymbolResolver* bala_code_context_get_resolver (ValaCodeContext* self);
GType bala_semantic_analyzer_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaSemanticAnalyzer, bala_code_visitor_unref)
ValaSemanticAnalyzer* bala_code_context_get_analyzer (ValaCodeContext* self);
GType bala_flow_analyzer_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaFlowAnalyzer, bala_code_visitor_unref)
ValaFlowAnalyzer* bala_code_context_get_flow_analyzer (ValaCodeContext* self);
ValaCodeGenerator* bala_code_context_get_codegen (ValaCodeContext* self);
void bala_code_context_set_codegen (ValaCodeContext* self,
                                    ValaCodeGenerator* value);
GType bala_used_attr_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaUsedAttr, bala_code_visitor_unref)
ValaUsedAttr* bala_code_context_get_used_attr (ValaCodeContext* self);
void bala_code_context_set_used_attr (ValaCodeContext* self,
                                      ValaUsedAttr* value);
ValaCodeContext* bala_code_context_new (void);
ValaCodeContext* bala_code_context_construct (GType object_type);
ValaCodeContext* bala_code_context_get (void);
void bala_code_context_push (ValaCodeContext* context);
void bala_code_context_pop (void);
gpointer bala_source_file_ref (gpointer instance);
void bala_source_file_unref (gpointer instance);
GParamSpec* bala_param_spec_source_file (const gchar* name,
                                         const gchar* nick,
                                         const gchar* blurb,
                                         GType object_type,
                                         GParamFlags flags);
void bala_value_set_source_file (GValue* value,
                                 gpointer v_object);
void bala_value_take_source_file (GValue* value,
                                  gpointer v_object);
gpointer bala_value_get_source_file (const GValue* value);
GType bala_source_file_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaSourceFile, bala_source_file_unref)
ValaList* bala_code_context_get_source_files (ValaCodeContext* self);
ValaList* bala_code_context_get_c_source_files (ValaCodeContext* self);
void bala_code_context_add_source_file (ValaCodeContext* self,
                                        ValaSourceFile* file);
ValaSourceFile* bala_code_context_get_source_file (ValaCodeContext* self,
                                                   const gchar* filename);
void bala_code_context_add_c_source_file (ValaCodeContext* self,
                                          const gchar* file);
ValaList* bala_code_context_get_packages (ValaCodeContext* self);
gboolean bala_code_context_has_package (ValaCodeContext* self,
                                        const gchar* pkg);
void bala_code_context_add_package (ValaCodeContext* self,
                                    const gchar* pkg);
gboolean bala_code_context_add_external_package (ValaCodeContext* self,
                                                 const gchar* pkg);
gboolean bala_code_context_add_packages_from_file (ValaCodeContext* self,
                                                   const gchar* filename);
gboolean bala_code_context_add_source_filename (ValaCodeContext* self,
                                                const gchar* filename,
                                                gboolean is_source,
                                                gboolean cmdline);
void bala_code_context_accept (ValaCodeContext* self,
                               ValaCodeVisitor* visitor);
void bala_code_context_check (ValaCodeContext* self);
void bala_code_context_add_define (ValaCodeContext* self,
                                   const gchar* define);
gboolean bala_code_context_is_defined (ValaCodeContext* self,
                                       const gchar* define);
void bala_code_context_set_target_glib_version (ValaCodeContext* self,
                                                const gchar* target_glib);
gchar* bala_code_context_get_vapi_path (ValaCodeContext* self,
                                        const gchar* pkg);
gchar* bala_code_context_get_gir_path (ValaCodeContext* self,
                                       const gchar* gir);
gchar* bala_code_context_get_gresource_path (ValaCodeContext* self,
                                             const gchar* gresource,
                                             const gchar* resource);
gchar* bala_code_context_get_metadata_path (ValaCodeContext* self,
                                            const gchar* gir_filename);
void bala_code_context_write_dependencies (ValaCodeContext* self,
                                           const gchar* filename);
void bala_code_context_write_external_dependencies (ValaCodeContext* self,
                                                    const gchar* filename);
gchar* bala_code_context_realpath (const gchar* name);
gboolean bala_code_context_pkg_config_exists (ValaCodeContext* self,
                                              const gchar* package_name);
gchar* bala_code_context_pkg_config_modversion (ValaCodeContext* self,
                                                const gchar* package_name);
gchar* bala_code_context_pkg_config_compile_flags (ValaCodeContext* self,
                                                   const gchar* package_name);
GType bala_enum_value_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaEnumValue, bala_code_node_unref)
GType bala_error_code_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaErrorCode, bala_code_node_unref)
GType bala_property_accessor_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaPropertyAccessor, bala_code_node_unref)
GType bala_using_directive_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaUsingDirective, bala_code_node_unref)
GType bala_empty_statement_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaEmptyStatement, bala_code_node_unref)
GType bala_declaration_statement_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaDeclarationStatement, bala_code_node_unref)
GType bala_expression_statement_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaExpressionStatement, bala_code_node_unref)
GType bala_if_statement_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaIfStatement, bala_code_node_unref)
GType bala_switch_statement_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaSwitchStatement, bala_code_node_unref)
GType bala_switch_section_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaSwitchSection, bala_code_node_unref)
GType bala_switch_label_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaSwitchLabel, bala_code_node_unref)
GType bala_loop_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaLoop, bala_code_node_unref)
GType bala_while_statement_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaWhileStatement, bala_code_node_unref)
GType bala_do_statement_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaDoStatement, bala_code_node_unref)
GType bala_for_statement_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaForStatement, bala_code_node_unref)
GType bala_foreach_statement_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaForeachStatement, bala_code_node_unref)
GType bala_continue_statement_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaContinueStatement, bala_code_node_unref)
GType bala_return_statement_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaReturnStatement, bala_code_node_unref)
GType bala_yield_statement_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaYieldStatement, bala_code_node_unref)
GType bala_throw_statement_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaThrowStatement, bala_code_node_unref)
GType bala_try_statement_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaTryStatement, bala_code_node_unref)
GType bala_lock_statement_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaLockStatement, bala_code_node_unref)
GType bala_unlock_statement_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaUnlockStatement, bala_code_node_unref)
GType bala_delete_statement_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaDeleteStatement, bala_code_node_unref)
GType bala_integer_literal_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaIntegerLiteral, bala_code_node_unref)
GType bala_real_literal_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaRealLiteral, bala_code_node_unref)
GType bala_regex_literal_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaRegexLiteral, bala_code_node_unref)
GType bala_string_literal_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaStringLiteral, bala_code_node_unref)
GType bala_template_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaTemplate, bala_code_node_unref)
GType bala_tuple_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaTuple, bala_code_node_unref)
GType bala_null_literal_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaNullLiteral, bala_code_node_unref)
GType bala_member_access_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaMemberAccess, bala_code_node_unref)
GType bala_method_call_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaMethodCall, bala_code_node_unref)
GType bala_element_access_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaElementAccess, bala_code_node_unref)
GType bala_slice_expression_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaSliceExpression, bala_code_node_unref)
GType bala_postfix_expression_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaPostfixExpression, bala_code_node_unref)
GType bala_object_creation_expression_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaObjectCreationExpression, bala_code_node_unref)
GType bala_sizeof_expression_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaSizeofExpression, bala_code_node_unref)
GType bala_typeof_expression_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaTypeofExpression, bala_code_node_unref)
GType bala_unary_expression_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaUnaryExpression, bala_code_node_unref)
GType bala_named_argument_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaNamedArgument, bala_code_node_unref)
GType bala_pointer_indirection_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaPointerIndirection, bala_code_node_unref)
GType bala_reference_transfer_expression_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaReferenceTransferExpression, bala_code_node_unref)
GType bala_typecheck_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaTypeCheck, bala_code_node_unref)
GType bala_conditional_expression_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaConditionalExpression, bala_code_node_unref)
GType bala_lambda_expression_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaLambdaExpression, bala_code_node_unref)
gpointer bala_target_value_ref (gpointer instance);
void bala_target_value_unref (gpointer instance);
GParamSpec* bala_param_spec_target_value (const gchar* name,
                                          const gchar* nick,
                                          const gchar* blurb,
                                          GType object_type,
                                          GParamFlags flags);
void bala_value_set_target_value (GValue* value,
                                  gpointer v_object);
void bala_value_take_target_value (GValue* value,
                                   gpointer v_object);
gpointer bala_value_get_target_value (const GValue* value);
GType bala_target_value_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaTargetValue, bala_target_value_unref)
void bala_code_generator_emit (ValaCodeGenerator* self,
                               ValaCodeContext* context);
ValaTargetValue* bala_code_generator_load_local (ValaCodeGenerator* self,
                                                 ValaLocalVariable* local,
                                                 ValaExpression* expr);
void bala_code_generator_store_local (ValaCodeGenerator* self,
                                      ValaLocalVariable* local,
                                      ValaTargetValue* value,
                                      gboolean initializer,
                                      ValaSourceReference* source_reference);
ValaTargetValue* bala_code_generator_load_parameter (ValaCodeGenerator* self,
                                                     ValaParameter* param,
                                                     ValaExpression* expr);
void bala_code_generator_store_parameter (ValaCodeGenerator* self,
                                          ValaParameter* param,
                                          ValaTargetValue* value,
                                          gboolean capturing_parameter,
                                          ValaSourceReference* source_reference);
ValaTargetValue* bala_code_generator_load_field (ValaCodeGenerator* self,
                                                 ValaField* field,
                                                 ValaTargetValue* instance,
                                                 ValaExpression* expr);
void bala_code_generator_store_field (ValaCodeGenerator* self,
                                      ValaField* field,
                                      ValaTargetValue* instance,
                                      ValaTargetValue* value,
                                      ValaSourceReference* source_reference);
ValaCodeGenerator* bala_code_generator_construct (GType object_type);
ValaCodeNode* bala_code_node_get_parent_node (ValaCodeNode* self);
void bala_code_node_set_parent_node (ValaCodeNode* self,
                                     ValaCodeNode* value);
ValaSourceReference* bala_code_node_get_source_reference (ValaCodeNode* self);
void bala_code_node_set_source_reference (ValaCodeNode* self,
                                          ValaSourceReference* value);
gboolean bala_code_node_get_unreachable (ValaCodeNode* self);
void bala_code_node_set_unreachable (ValaCodeNode* self,
                                     gboolean value);
const gchar* bala_code_node_get_type_name (ValaCodeNode* self);
gboolean bala_code_node_get_checked (ValaCodeNode* self);
void bala_code_node_set_checked (ValaCodeNode* self,
                                 gboolean value);
gboolean bala_code_node_get_error (ValaCodeNode* self);
void bala_code_node_set_error (ValaCodeNode* self,
                               gboolean value);
gboolean bala_code_node_get_tree_can_fail (ValaCodeNode* self);
void bala_code_node_accept (ValaCodeNode* self,
                            ValaCodeVisitor* visitor);
void bala_code_node_accept_children (ValaCodeNode* self,
                                     ValaCodeVisitor* visitor);
gboolean bala_code_node_check (ValaCodeNode* self,
                               ValaCodeContext* context);
void bala_code_node_emit (ValaCodeNode* self,
                          ValaCodeGenerator* codegen);
void bala_code_node_replace_type (ValaCodeNode* self,
                                  ValaDataType* old_type,
                                  ValaDataType* new_type);
void bala_code_node_replace_expression (ValaCodeNode* self,
                                        ValaExpression* old_node,
                                        ValaExpression* new_node);
ValaAttribute* bala_code_node_get_attribute (ValaCodeNode* self,
                                             const gchar* name);
gboolean bala_code_node_has_attribute_argument (ValaCodeNode* self,
                                                const gchar* attribute,
                                                const gchar* argument);
void bala_code_node_set_attribute (ValaCodeNode* self,
                                   const gchar* name,
                                   gboolean value,
                                   ValaSourceReference* source_reference);
void bala_code_node_remove_attribute_argument (ValaCodeNode* self,
                                               const gchar* attribute,
                                               const gchar* argument);
gchar* bala_code_node_get_attribute_string (ValaCodeNode* self,
                                            const gchar* attribute,
                                            const gchar* argument,
                                            const gchar* default_value);
gint bala_code_node_get_attribute_integer (ValaCodeNode* self,
                                           const gchar* attribute,
                                           const gchar* argument,
                                           gint default_value);
gdouble bala_code_node_get_attribute_double (ValaCodeNode* self,
                                             const gchar* attribute,
                                             const gchar* argument,
                                             gdouble default_value);
gboolean bala_code_node_get_attribute_bool (ValaCodeNode* self,
                                            const gchar* attribute,
                                            const gchar* argument,
                                            gboolean default_value);
void bala_code_node_set_attribute_string (ValaCodeNode* self,
                                          const gchar* attribute,
                                          const gchar* argument,
                                          const gchar* value,
                                          ValaSourceReference* source_reference);
void bala_code_node_set_attribute_integer (ValaCodeNode* self,
                                           const gchar* attribute,
                                           const gchar* argument,
                                           gint value,
                                           ValaSourceReference* source_reference);
void bala_code_node_set_attribute_double (ValaCodeNode* self,
                                          const gchar* attribute,
                                          const gchar* argument,
                                          gdouble value,
                                          ValaSourceReference* source_reference);
void bala_code_node_set_attribute_bool (ValaCodeNode* self,
                                        const gchar* attribute,
                                        const gchar* argument,
                                        gboolean value,
                                        ValaSourceReference* source_reference);
gboolean bala_code_node_copy_attribute_string (ValaCodeNode* self,
                                               ValaCodeNode* source,
                                               const gchar* attribute,
                                               const gchar* argument);
gboolean bala_code_node_copy_attribute_integer (ValaCodeNode* self,
                                                ValaCodeNode* source,
                                                const gchar* attribute,
                                                const gchar* argument);
gboolean bala_code_node_copy_attribute_double (ValaCodeNode* self,
                                               ValaCodeNode* source,
                                               const gchar* attribute,
                                               const gchar* argument);
gboolean bala_code_node_copy_attribute_bool (ValaCodeNode* self,
                                             ValaCodeNode* source,
                                             const gchar* attribute,
                                             const gchar* argument);
gpointer bala_attribute_cache_ref (gpointer instance);
void bala_attribute_cache_unref (gpointer instance);
GParamSpec* bala_param_spec_attribute_cache (const gchar* name,
                                             const gchar* nick,
                                             const gchar* blurb,
                                             GType object_type,
                                             GParamFlags flags);
void bala_value_set_attribute_cache (GValue* value,
                                     gpointer v_object);
void bala_value_take_attribute_cache (GValue* value,
                                      gpointer v_object);
gpointer bala_value_get_attribute_cache (const GValue* value);
GType bala_attribute_cache_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaAttributeCache, bala_attribute_cache_unref)
ValaAttributeCache* bala_code_node_get_attribute_cache (ValaCodeNode* self,
                                                        gint index);
void bala_code_node_set_attribute_cache (ValaCodeNode* self,
                                         gint index,
                                         ValaAttributeCache* cache);
gchar* bala_code_node_to_string (ValaCodeNode* self);
void bala_code_node_get_defined_variables (ValaCodeNode* self,
                                           ValaCollection* collection);
void bala_code_node_get_used_variables (ValaCodeNode* self,
                                        ValaCollection* collection);
void bala_code_node_get_error_types (ValaCodeNode* self,
                                     ValaCollection* collection,
                                     ValaSourceReference* source_reference);
gchar* bala_code_node_get_temp_name (void);
gint bala_code_node_get_attribute_cache_index (void);
ValaCodeNode* bala_code_node_construct (GType object_type);
ValaAttributeCache* bala_attribute_cache_new (void);
ValaAttributeCache* bala_attribute_cache_construct (GType object_type);
void bala_code_visitor_visit_source_file (ValaCodeVisitor* self,
                                          ValaSourceFile* source_file);
void bala_code_visitor_visit_namespace (ValaCodeVisitor* self,
                                        ValaNamespace* ns);
void bala_code_visitor_visit_class (ValaCodeVisitor* self,
                                    ValaClass* cl);
void bala_code_visitor_visit_struct (ValaCodeVisitor* self,
                                     ValaStruct* st);
void bala_code_visitor_visit_interface (ValaCodeVisitor* self,
                                        ValaInterface* iface);
void bala_code_visitor_visit_enum (ValaCodeVisitor* self,
                                   ValaEnum* en);
void bala_code_visitor_visit_enum_value (ValaCodeVisitor* self,
                                         ValaEnumValue* ev);
void bala_code_visitor_visit_error_domain (ValaCodeVisitor* self,
                                           ValaErrorDomain* edomain);
void bala_code_visitor_visit_error_code (ValaCodeVisitor* self,
                                         ValaErrorCode* ecode);
void bala_code_visitor_visit_delegate (ValaCodeVisitor* self,
                                       ValaDelegate* d);
void bala_code_visitor_visit_constant (ValaCodeVisitor* self,
                                       ValaConstant* c);
void bala_code_visitor_visit_field (ValaCodeVisitor* self,
                                    ValaField* f);
void bala_code_visitor_visit_method (ValaCodeVisitor* self,
                                     ValaMethod* m);
void bala_code_visitor_visit_creation_method (ValaCodeVisitor* self,
                                              ValaCreationMethod* m);
void bala_code_visitor_visit_formal_parameter (ValaCodeVisitor* self,
                                               ValaParameter* p);
void bala_code_visitor_visit_property (ValaCodeVisitor* self,
                                       ValaProperty* prop);
void bala_code_visitor_visit_property_accessor (ValaCodeVisitor* self,
                                                ValaPropertyAccessor* acc);
void bala_code_visitor_visit_signal (ValaCodeVisitor* self,
                                     ValaSignal* sig);
void bala_code_visitor_visit_constructor (ValaCodeVisitor* self,
                                          ValaConstructor* c);
void bala_code_visitor_visit_destructor (ValaCodeVisitor* self,
                                         ValaDestructor* d);
void bala_code_visitor_visit_type_parameter (ValaCodeVisitor* self,
                                             ValaTypeParameter* p);
void bala_code_visitor_visit_using_directive (ValaCodeVisitor* self,
                                              ValaUsingDirective* ns);
void bala_code_visitor_visit_data_type (ValaCodeVisitor* self,
                                        ValaDataType* type);
void bala_code_visitor_visit_block (ValaCodeVisitor* self,
                                    ValaBlock* b);
void bala_code_visitor_visit_empty_statement (ValaCodeVisitor* self,
                                              ValaEmptyStatement* stmt);
void bala_code_visitor_visit_declaration_statement (ValaCodeVisitor* self,
                                                    ValaDeclarationStatement* stmt);
void bala_code_visitor_visit_local_variable (ValaCodeVisitor* self,
                                             ValaLocalVariable* local);
void bala_code_visitor_visit_initializer_list (ValaCodeVisitor* self,
                                               ValaInitializerList* list);
void bala_code_visitor_visit_expression_statement (ValaCodeVisitor* self,
                                                   ValaExpressionStatement* stmt);
void bala_code_visitor_visit_if_statement (ValaCodeVisitor* self,
                                           ValaIfStatement* stmt);
void bala_code_visitor_visit_switch_statement (ValaCodeVisitor* self,
                                               ValaSwitchStatement* stmt);
void bala_code_visitor_visit_switch_section (ValaCodeVisitor* self,
                                             ValaSwitchSection* section);
void bala_code_visitor_visit_switch_label (ValaCodeVisitor* self,
                                           ValaSwitchLabel* label);
void bala_code_visitor_visit_loop (ValaCodeVisitor* self,
                                   ValaLoop* stmt);
void bala_code_visitor_visit_while_statement (ValaCodeVisitor* self,
                                              ValaWhileStatement* stmt);
void bala_code_visitor_visit_do_statement (ValaCodeVisitor* self,
                                           ValaDoStatement* stmt);
void bala_code_visitor_visit_for_statement (ValaCodeVisitor* self,
                                            ValaForStatement* stmt);
void bala_code_visitor_visit_foreach_statement (ValaCodeVisitor* self,
                                                ValaForeachStatement* stmt);
void bala_code_visitor_visit_break_statement (ValaCodeVisitor* self,
                                              ValaBreakStatement* stmt);
void bala_code_visitor_visit_continue_statement (ValaCodeVisitor* self,
                                                 ValaContinueStatement* stmt);
void bala_code_visitor_visit_return_statement (ValaCodeVisitor* self,
                                               ValaReturnStatement* stmt);
void bala_code_visitor_visit_yield_statement (ValaCodeVisitor* self,
                                              ValaYieldStatement* y);
void bala_code_visitor_visit_throw_statement (ValaCodeVisitor* self,
                                              ValaThrowStatement* stmt);
void bala_code_visitor_visit_try_statement (ValaCodeVisitor* self,
                                            ValaTryStatement* stmt);
void bala_code_visitor_visit_catch_clause (ValaCodeVisitor* self,
                                           ValaCatchClause* clause);
void bala_code_visitor_visit_lock_statement (ValaCodeVisitor* self,
                                             ValaLockStatement* stmt);
void bala_code_visitor_visit_unlock_statement (ValaCodeVisitor* self,
                                               ValaUnlockStatement* stmt);
void bala_code_visitor_visit_delete_statement (ValaCodeVisitor* self,
                                               ValaDeleteStatement* stmt);
void bala_code_visitor_visit_expression (ValaCodeVisitor* self,
                                         ValaExpression* expr);
void bala_code_visitor_visit_array_creation_expression (ValaCodeVisitor* self,
                                                        ValaArrayCreationExpression* expr);
void bala_code_visitor_visit_boolean_literal (ValaCodeVisitor* self,
                                              ValaBooleanLiteral* lit);
void bala_code_visitor_visit_character_literal (ValaCodeVisitor* self,
                                                ValaCharacterLiteral* lit);
void bala_code_visitor_visit_integer_literal (ValaCodeVisitor* self,
                                              ValaIntegerLiteral* lit);
void bala_code_visitor_visit_real_literal (ValaCodeVisitor* self,
                                           ValaRealLiteral* lit);
void bala_code_visitor_visit_regex_literal (ValaCodeVisitor* self,
                                            ValaRegexLiteral* lit);
void bala_code_visitor_visit_string_literal (ValaCodeVisitor* self,
                                             ValaStringLiteral* lit);
void bala_code_visitor_visit_template (ValaCodeVisitor* self,
                                       ValaTemplate* tmpl);
void bala_code_visitor_visit_tuple (ValaCodeVisitor* self,
                                    ValaTuple* tuple);
void bala_code_visitor_visit_null_literal (ValaCodeVisitor* self,
                                           ValaNullLiteral* lit);
void bala_code_visitor_visit_member_access (ValaCodeVisitor* self,
                                            ValaMemberAccess* expr);
void bala_code_visitor_visit_method_call (ValaCodeVisitor* self,
                                          ValaMethodCall* expr);
void bala_code_visitor_visit_element_access (ValaCodeVisitor* self,
                                             ValaElementAccess* expr);
void bala_code_visitor_visit_slice_expression (ValaCodeVisitor* self,
                                               ValaSliceExpression* expr);
void bala_code_visitor_visit_base_access (ValaCodeVisitor* self,
                                          ValaBaseAccess* expr);
void bala_code_visitor_visit_postfix_expression (ValaCodeVisitor* self,
                                                 ValaPostfixExpression* expr);
void bala_code_visitor_visit_object_creation_expression (ValaCodeVisitor* self,
                                                         ValaObjectCreationExpression* expr);
void bala_code_visitor_visit_sizeof_expression (ValaCodeVisitor* self,
                                                ValaSizeofExpression* expr);
void bala_code_visitor_visit_typeof_expression (ValaCodeVisitor* self,
                                                ValaTypeofExpression* expr);
void bala_code_visitor_visit_unary_expression (ValaCodeVisitor* self,
                                               ValaUnaryExpression* expr);
void bala_code_visitor_visit_cast_expression (ValaCodeVisitor* self,
                                              ValaCastExpression* expr);
void bala_code_visitor_visit_named_argument (ValaCodeVisitor* self,
                                             ValaNamedArgument* expr);
void bala_code_visitor_visit_pointer_indirection (ValaCodeVisitor* self,
                                                  ValaPointerIndirection* expr);
void bala_code_visitor_visit_addressof_expression (ValaCodeVisitor* self,
                                                   ValaAddressofExpression* expr);
void bala_code_visitor_visit_reference_transfer_expression (ValaCodeVisitor* self,
                                                            ValaReferenceTransferExpression* expr);
void bala_code_visitor_visit_binary_expression (ValaCodeVisitor* self,
                                                ValaBinaryExpression* expr);
void bala_code_visitor_visit_type_check (ValaCodeVisitor* self,
                                         ValaTypeCheck* expr);
void bala_code_visitor_visit_conditional_expression (ValaCodeVisitor* self,
                                                     ValaConditionalExpression* expr);
void bala_code_visitor_visit_lambda_expression (ValaCodeVisitor* self,
                                                ValaLambdaExpression* expr);
void bala_code_visitor_visit_assignment (ValaCodeVisitor* self,
                                         ValaAssignment* a);
void bala_code_visitor_visit_end_full_expression (ValaCodeVisitor* self,
                                                  ValaExpression* expr);
ValaCodeVisitor* bala_code_visitor_construct (GType object_type);
GType bala_code_writer_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaCodeWriter, bala_code_visitor_unref)
GType bala_code_writer_type_get_type (void) G_GNUC_CONST;
ValaCodeWriter* bala_code_writer_new (ValaCodeWriterType type);
ValaCodeWriter* bala_code_writer_construct (GType object_type,
                                            ValaCodeWriterType type);
void bala_code_writer_set_cheader_override (ValaCodeWriter* self,
                                            const gchar* original,
                                            const gchar* replacement);
void bala_code_writer_write_file (ValaCodeWriter* self,
                                  ValaCodeContext* context,
                                  const gchar* filename);
ValaComment* bala_comment_new (const gchar* comment,
                               ValaSourceReference* _source_reference);
ValaComment* bala_comment_construct (GType object_type,
                                     const gchar* comment,
                                     ValaSourceReference* _source_reference);
const gchar* bala_comment_get_content (ValaComment* self);
void bala_comment_set_content (ValaComment* self,
                               const gchar* value);
ValaSourceReference* bala_comment_get_source_reference (ValaComment* self);
void bala_comment_set_source_reference (ValaComment* self,
                                        ValaSourceReference* value);
GType bala_gir_comment_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaGirComment, bala_comment_unref)
ValaMapIterator* bala_gir_comment_parameter_iterator (ValaGirComment* self);
ValaComment* bala_gir_comment_get_return_content (ValaGirComment* self);
void bala_gir_comment_set_return_content (ValaGirComment* self,
                                          ValaComment* value);
ValaGirComment* bala_gir_comment_new (const gchar* comment,
                                      ValaSourceReference* _source_reference);
ValaGirComment* bala_gir_comment_construct (GType object_type,
                                            const gchar* comment,
                                            ValaSourceReference* _source_reference);
ValaComment* bala_gir_comment_get_content_for_parameter (ValaGirComment* self,
                                                         const gchar* name);
ValaExpression* bala_conditional_expression_get_condition (ValaConditionalExpression* self);
void bala_conditional_expression_set_condition (ValaConditionalExpression* self,
                                                ValaExpression* value);
ValaExpression* bala_conditional_expression_get_true_expression (ValaConditionalExpression* self);
void bala_conditional_expression_set_true_expression (ValaConditionalExpression* self,
                                                      ValaExpression* value);
ValaExpression* bala_conditional_expression_get_false_expression (ValaConditionalExpression* self);
void bala_conditional_expression_set_false_expression (ValaConditionalExpression* self,
                                                       ValaExpression* value);
ValaConditionalExpression* bala_conditional_expression_new (ValaExpression* cond,
                                                            ValaExpression* true_expr,
                                                            ValaExpression* false_expr,
                                                            ValaSourceReference* source);
ValaConditionalExpression* bala_conditional_expression_construct (GType object_type,
                                                                  ValaExpression* cond,
                                                                  ValaExpression* true_expr,
                                                                  ValaExpression* false_expr,
                                                                  ValaSourceReference* source);
ValaDataType* bala_constant_get_type_reference (ValaConstant* self);
void bala_constant_set_type_reference (ValaConstant* self,
                                       ValaDataType* value);
ValaExpression* bala_constant_get_value (ValaConstant* self);
void bala_constant_set_value (ValaConstant* self,
                              ValaExpression* value);
ValaConstant* bala_constant_new (const gchar* name,
                                 ValaDataType* type_reference,
                                 ValaExpression* value,
                                 ValaSourceReference* source_reference,
                                 ValaComment* comment);
ValaConstant* bala_constant_construct (GType object_type,
                                       const gchar* name,
                                       ValaDataType* type_reference,
                                       ValaExpression* value,
                                       ValaSourceReference* source_reference,
                                       ValaComment* comment);
ValaParameter* bala_constructor_get_this_parameter (ValaConstructor* self);
void bala_constructor_set_this_parameter (ValaConstructor* self,
                                          ValaParameter* value);
GType bala_member_binding_get_type (void) G_GNUC_CONST;
ValaMemberBinding bala_constructor_get_binding (ValaConstructor* self);
void bala_constructor_set_binding (ValaConstructor* self,
                                   ValaMemberBinding value);
ValaConstructor* bala_constructor_new (ValaSourceReference* source);
ValaConstructor* bala_constructor_construct (GType object_type,
                                             ValaSourceReference* source);
ValaContinueStatement* bala_continue_statement_new (ValaSourceReference* source);
ValaContinueStatement* bala_continue_statement_construct (GType object_type,
                                                          ValaSourceReference* source);
const gchar* bala_creation_method_get_class_name (ValaCreationMethod* self);
void bala_creation_method_set_class_name (ValaCreationMethod* self,
                                          const gchar* value);
gboolean bala_creation_method_get_chain_up (ValaCreationMethod* self);
void bala_creation_method_set_chain_up (ValaCreationMethod* self,
                                        gboolean value);
ValaCreationMethod* bala_creation_method_new (const gchar* class_name,
                                              const gchar* name,
                                              ValaSourceReference* source_reference,
                                              ValaComment* comment);
ValaCreationMethod* bala_creation_method_construct (GType object_type,
                                                    const gchar* class_name,
                                                    const gchar* name,
                                                    ValaSourceReference* source_reference,
                                                    ValaComment* comment);
gboolean bala_data_type_get_value_owned (ValaDataType* self);
void bala_data_type_set_value_owned (ValaDataType* self,
                                     gboolean value);
gboolean bala_data_type_get_nullable (ValaDataType* self);
void bala_data_type_set_nullable (ValaDataType* self,
                                  gboolean value);
ValaSymbol* bala_data_type_get_symbol (ValaDataType* self);
ValaTypeSymbol* bala_data_type_get_type_symbol (ValaDataType* self);
gboolean bala_data_type_get_floating_reference (ValaDataType* self);
void bala_data_type_set_floating_reference (ValaDataType* self,
                                            gboolean value);
gboolean bala_data_type_get_is_dynamic (ValaDataType* self);
void bala_data_type_set_is_dynamic (ValaDataType* self,
                                    gboolean value);
ValaDataType* bala_data_type_construct_with_symbol (GType object_type,
                                                    ValaSymbol* symbol);
void bala_data_type_add_type_argument (ValaDataType* self,
                                       ValaDataType* arg);
ValaList* bala_data_type_get_type_arguments (ValaDataType* self);
gboolean bala_data_type_has_type_arguments (ValaDataType* self);
void bala_data_type_remove_all_type_arguments (ValaDataType* self);
gchar* bala_data_type_to_qualified_string (ValaDataType* self,
                                           ValaScope* scope);
ValaDataType* bala_data_type_copy (ValaDataType* self);
gboolean bala_data_type_equals (ValaDataType* self,
                                ValaDataType* type2);
gboolean bala_data_type_stricter (ValaDataType* self,
                                  ValaDataType* type2);
gboolean bala_data_type_compatible (ValaDataType* self,
                                    ValaDataType* target_type);
gboolean bala_data_type_is_invokable (ValaDataType* self);
ValaDataType* bala_data_type_get_return_type (ValaDataType* self);
ValaList* bala_data_type_get_parameters (ValaDataType* self);
gboolean bala_data_type_is_reference_type_or_type_parameter (ValaDataType* self);
gboolean bala_data_type_is_accessible (ValaDataType* self,
                                       ValaSymbol* sym);
ValaSymbol* bala_data_type_get_member (ValaDataType* self,
                                       const gchar* member_name);
ValaSymbol* bala_data_type_get_pointer_member (ValaDataType* self,
                                               const gchar* member_name);
gboolean bala_data_type_is_real_struct_type (ValaDataType* self);
gboolean bala_data_type_is_real_non_null_struct_type (ValaDataType* self);
gboolean bala_data_type_is_non_null_simple_type (ValaDataType* self);
gboolean bala_data_type_is_disposable (ValaDataType* self);
ValaDataType* bala_data_type_get_actual_type (ValaDataType* self,
                                              ValaDataType* derived_instance_type,
                                              ValaList* method_type_arguments,
                                              ValaCodeNode* node_reference);
gboolean bala_data_type_is_generic (ValaDataType* self);
void bala_data_type_replace_type_parameter (ValaDataType* self,
                                            ValaTypeParameter* old_type_param,
                                            ValaTypeParameter* new_type_param);
ValaDataType* bala_data_type_infer_type_argument (ValaDataType* self,
                                                  ValaTypeParameter* type_param,
                                                  ValaDataType* value_type);
gchar* bala_data_type_to_prototype_string (ValaDataType* self,
                                           const gchar* override_name);
gboolean bala_data_type_is_weak (ValaDataType* self);
gchar* bala_data_type_get_type_signature (ValaDataType* self,
                                          ValaSymbol* symbol);
gboolean bala_data_type_check_type_arguments (ValaDataType* self,
                                              ValaCodeContext* context,
                                              gboolean allow_none);
ValaDataType* bala_data_type_construct (GType object_type);
ValaSymbol* bala_declaration_statement_get_declaration (ValaDeclarationStatement* self);
void bala_declaration_statement_set_declaration (ValaDeclarationStatement* self,
                                                 ValaSymbol* value);
ValaDeclarationStatement* bala_declaration_statement_new (ValaSymbol* declaration,
                                                          ValaSourceReference* source_reference);
ValaDeclarationStatement* bala_declaration_statement_construct (GType object_type,
                                                                ValaSymbol* declaration,
                                                                ValaSourceReference* source_reference);
gboolean bala_delegate_get_has_target (ValaDelegate* self);
void bala_delegate_set_has_target (ValaDelegate* self,
                                   gboolean value);
ValaDataType* bala_delegate_get_sender_type (ValaDelegate* self);
void bala_delegate_set_sender_type (ValaDelegate* self,
                                    ValaDataType* value);
ValaDelegate* bala_delegate_new (const gchar* name,
                                 ValaDataType* return_type,
                                 ValaSourceReference* source_reference,
                                 ValaComment* comment);
ValaDelegate* bala_delegate_construct (GType object_type,
                                       const gchar* name,
                                       ValaDataType* return_type,
                                       ValaSourceReference* source_reference,
                                       ValaComment* comment);
void bala_delegate_add_type_parameter (ValaDelegate* self,
                                       ValaTypeParameter* p);
ValaList* bala_delegate_get_type_parameters (ValaDelegate* self);
gboolean bala_delegate_has_type_parameters (ValaDelegate* self);
gboolean bala_delegate_matches_method (ValaDelegate* self,
                                       ValaMethod* m,
                                       ValaDataType* dt);
void bala_delegate_add_error_type (ValaDelegate* self,
                                   ValaDataType* error_type);
GType bala_delegate_destroy_field_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaDelegateDestroyField, bala_code_node_unref)
ValaDelegateDestroyField* bala_delegate_destroy_field_new (ValaSourceReference* source_reference);
ValaDelegateDestroyField* bala_delegate_destroy_field_construct (GType object_type,
                                                                 ValaSourceReference* source_reference);
GType bala_delegate_target_field_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaDelegateTargetField, bala_code_node_unref)
ValaDelegateTargetField* bala_delegate_target_field_new (ValaSourceReference* source_reference);
ValaDelegateTargetField* bala_delegate_target_field_construct (GType object_type,
                                                               ValaSourceReference* source_reference);
GType bala_delegate_type_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaDelegateType, bala_code_node_unref)
ValaDelegate* bala_delegate_type_get_delegate_symbol (ValaDelegateType* self);
gboolean bala_delegate_type_get_is_called_once (ValaDelegateType* self);
void bala_delegate_type_set_is_called_once (ValaDelegateType* self,
                                            gboolean value);
ValaDelegateType* bala_delegate_type_new (ValaDelegate* delegate_symbol);
ValaDelegateType* bala_delegate_type_construct (GType object_type,
                                                ValaDelegate* delegate_symbol);
ValaExpression* bala_delete_statement_get_expression (ValaDeleteStatement* self);
void bala_delete_statement_set_expression (ValaDeleteStatement* self,
                                           ValaExpression* value);
ValaDeleteStatement* bala_delete_statement_new (ValaExpression* expression,
                                                ValaSourceReference* source_reference);
ValaDeleteStatement* bala_delete_statement_construct (GType object_type,
                                                      ValaExpression* expression,
                                                      ValaSourceReference* source_reference);
ValaParameter* bala_destructor_get_this_parameter (ValaDestructor* self);
void bala_destructor_set_this_parameter (ValaDestructor* self,
                                         ValaParameter* value);
ValaMemberBinding bala_destructor_get_binding (ValaDestructor* self);
void bala_destructor_set_binding (ValaDestructor* self,
                                  ValaMemberBinding value);
ValaDestructor* bala_destructor_new (ValaSourceReference* source_reference);
ValaDestructor* bala_destructor_construct (GType object_type,
                                           ValaSourceReference* source_reference);
ValaBlock* bala_do_statement_get_body (ValaDoStatement* self);
void bala_do_statement_set_body (ValaDoStatement* self,
                                 ValaBlock* value);
ValaExpression* bala_do_statement_get_condition (ValaDoStatement* self);
void bala_do_statement_set_condition (ValaDoStatement* self,
                                      ValaExpression* value);
ValaDoStatement* bala_do_statement_new (ValaBlock* body,
                                        ValaExpression* condition,
                                        ValaSourceReference* source_reference);
ValaDoStatement* bala_do_statement_construct (GType object_type,
                                              ValaBlock* body,
                                              ValaExpression* condition,
                                              ValaSourceReference* source_reference);
GType bala_dynamic_method_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaDynamicMethod, bala_code_node_unref)
ValaDataType* bala_dynamic_method_get_dynamic_type (ValaDynamicMethod* self);
void bala_dynamic_method_set_dynamic_type (ValaDynamicMethod* self,
                                           ValaDataType* value);
ValaMethodCall* bala_dynamic_method_get_invocation (ValaDynamicMethod* self);
void bala_dynamic_method_set_invocation (ValaDynamicMethod* self,
                                         ValaMethodCall* value);
ValaDynamicMethod* bala_dynamic_method_new (ValaDataType* dynamic_type,
                                            const gchar* name,
                                            ValaDataType* return_type,
                                            ValaSourceReference* source_reference,
                                            ValaComment* comment);
ValaDynamicMethod* bala_dynamic_method_construct (GType object_type,
                                                  ValaDataType* dynamic_type,
                                                  const gchar* name,
                                                  ValaDataType* return_type,
                                                  ValaSourceReference* source_reference,
                                                  ValaComment* comment);
GType bala_dynamic_property_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaDynamicProperty, bala_code_node_unref)
ValaDataType* bala_dynamic_property_get_dynamic_type (ValaDynamicProperty* self);
void bala_dynamic_property_set_dynamic_type (ValaDynamicProperty* self,
                                             ValaDataType* value);
ValaDynamicProperty* bala_dynamic_property_new (ValaDataType* dynamic_type,
                                                const gchar* name,
                                                ValaSourceReference* source_reference,
                                                ValaComment* comment);
ValaDynamicProperty* bala_dynamic_property_construct (GType object_type,
                                                      ValaDataType* dynamic_type,
                                                      const gchar* name,
                                                      ValaSourceReference* source_reference,
                                                      ValaComment* comment);
GType bala_dynamic_signal_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaDynamicSignal, bala_code_node_unref)
ValaDataType* bala_dynamic_signal_get_dynamic_type (ValaDynamicSignal* self);
void bala_dynamic_signal_set_dynamic_type (ValaDynamicSignal* self,
                                           ValaDataType* value);
ValaExpression* bala_dynamic_signal_get_handler (ValaDynamicSignal* self);
void bala_dynamic_signal_set_handler (ValaDynamicSignal* self,
                                      ValaExpression* value);
ValaDynamicSignal* bala_dynamic_signal_new (ValaDataType* dynamic_type,
                                            const gchar* name,
                                            ValaDataType* return_type,
                                            ValaSourceReference* source_reference,
                                            ValaComment* comment);
ValaDynamicSignal* bala_dynamic_signal_construct (GType object_type,
                                                  ValaDataType* dynamic_type,
                                                  const gchar* name,
                                                  ValaDataType* return_type,
                                                  ValaSourceReference* source_reference,
                                                  ValaComment* comment);
ValaExpression* bala_element_access_get_container (ValaElementAccess* self);
void bala_element_access_set_container (ValaElementAccess* self,
                                        ValaExpression* value);
void bala_element_access_append_index (ValaElementAccess* self,
                                       ValaExpression* index);
ValaList* bala_element_access_get_indices (ValaElementAccess* self);
ValaElementAccess* bala_element_access_new (ValaExpression* container,
                                            ValaSourceReference* source_reference);
ValaElementAccess* bala_element_access_construct (GType object_type,
                                                  ValaExpression* container,
                                                  ValaSourceReference* source_reference);
ValaEmptyStatement* bala_empty_statement_new (ValaSourceReference* source);
ValaEmptyStatement* bala_empty_statement_construct (GType object_type,
                                                    ValaSourceReference* source);
gboolean bala_enum_get_is_flags (ValaEnum* self);
ValaEnum* bala_enum_new (const gchar* name,
                         ValaSourceReference* source_reference,
                         ValaComment* comment);
ValaEnum* bala_enum_construct (GType object_type,
                               const gchar* name,
                               ValaSourceReference* source_reference,
                               ValaComment* comment);
void bala_enum_add_value (ValaEnum* self,
                          ValaEnumValue* value);
ValaList* bala_enum_get_values (ValaEnum* self);
ValaList* bala_enum_get_methods (ValaEnum* self);
ValaList* bala_enum_get_constants (ValaEnum* self);
const gchar* bala_enum_value_get_nick (ValaEnumValue* self);
ValaEnumValue* bala_enum_value_new (const gchar* name,
                                    ValaExpression* value,
                                    ValaSourceReference* source_reference,
                                    ValaComment* comment);
ValaEnumValue* bala_enum_value_construct (GType object_type,
                                          const gchar* name,
                                          ValaExpression* value,
                                          ValaSourceReference* source_reference,
                                          ValaComment* comment);
GType bala_enum_value_type_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaEnumValueType, bala_code_node_unref)
ValaEnumValueType* bala_enum_value_type_new (ValaEnum* type_symbol);
ValaEnumValueType* bala_enum_value_type_construct (GType object_type,
                                                   ValaEnum* type_symbol);
ValaMethod* bala_enum_value_type_get_to_string_method (ValaEnumValueType* self);
ValaExpression* bala_error_code_get_value (ValaErrorCode* self);
void bala_error_code_set_value (ValaErrorCode* self,
                                ValaExpression* value);
ValaConstant* bala_error_code_get_code (ValaErrorCode* self);
ValaErrorCode* bala_error_code_new (const gchar* name,
                                    ValaSourceReference* source_reference,
                                    ValaComment* comment);
ValaErrorCode* bala_error_code_construct (GType object_type,
                                          const gchar* name,
                                          ValaSourceReference* source_reference,
                                          ValaComment* comment);
ValaErrorCode* bala_error_code_new_with_value (const gchar* name,
                                               ValaExpression* value,
                                               ValaSourceReference* source_reference);
ValaErrorCode* bala_error_code_construct_with_value (GType object_type,
                                                     const gchar* name,
                                                     ValaExpression* value,
                                                     ValaSourceReference* source_reference);
ValaErrorDomain* bala_error_domain_new (const gchar* name,
                                        ValaSourceReference* source_reference,
                                        ValaComment* comment);
ValaErrorDomain* bala_error_domain_construct (GType object_type,
                                              const gchar* name,
                                              ValaSourceReference* source_reference,
                                              ValaComment* comment);
void bala_error_domain_add_code (ValaErrorDomain* self,
                                 ValaErrorCode* ecode);
ValaList* bala_error_domain_get_codes (ValaErrorDomain* self);
ValaList* bala_error_domain_get_methods (ValaErrorDomain* self);
GType bala_error_type_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaErrorType, bala_code_node_unref)
ValaErrorDomain* bala_error_type_get_error_domain (ValaErrorType* self);
ValaErrorCode* bala_error_type_get_error_code (ValaErrorType* self);
void bala_error_type_set_error_code (ValaErrorType* self,
                                     ValaErrorCode* value);
gboolean bala_error_type_get_dynamic_error (ValaErrorType* self);
void bala_error_type_set_dynamic_error (ValaErrorType* self,
                                        gboolean value);
ValaErrorType* bala_error_type_new (ValaErrorDomain* error_domain,
                                    ValaErrorCode* error_code,
                                    ValaSourceReference* source_reference);
ValaErrorType* bala_error_type_construct (GType object_type,
                                          ValaErrorDomain* error_domain,
                                          ValaErrorCode* error_code,
                                          ValaSourceReference* source_reference);
ValaDataType* bala_expression_get_value_type (ValaExpression* self);
void bala_expression_set_value_type (ValaExpression* self,
                                     ValaDataType* value);
ValaDataType* bala_expression_get_formal_value_type (ValaExpression* self);
void bala_expression_set_formal_value_type (ValaExpression* self,
                                            ValaDataType* value);
ValaDataType* bala_expression_get_target_type (ValaExpression* self);
void bala_expression_set_target_type (ValaExpression* self,
                                      ValaDataType* value);
ValaDataType* bala_expression_get_formal_target_type (ValaExpression* self);
void bala_expression_set_formal_target_type (ValaExpression* self,
                                             ValaDataType* value);
ValaSymbol* bala_expression_get_symbol_reference (ValaExpression* self);
void bala_expression_set_symbol_reference (ValaExpression* self,
                                           ValaSymbol* value);
gboolean bala_expression_get_lvalue (ValaExpression* self);
void bala_expression_set_lvalue (ValaExpression* self,
                                 gboolean value);
ValaTargetValue* bala_expression_get_target_value (ValaExpression* self);
void bala_expression_set_target_value (ValaExpression* self,
                                       ValaTargetValue* value);
gboolean bala_expression_is_constant (ValaExpression* self);
gboolean bala_expression_is_pure (ValaExpression* self);
gboolean bala_expression_is_non_null (ValaExpression* self);
gboolean bala_expression_is_accessible (ValaExpression* self,
                                        ValaSymbol* sym);
ValaStatement* bala_expression_get_parent_statement (ValaExpression* self);
void bala_expression_insert_statement (ValaExpression* self,
                                       ValaBlock* block,
                                       ValaStatement* stmt);
ValaExpression* bala_expression_construct (GType object_type);
ValaExpression* bala_expression_statement_get_expression (ValaExpressionStatement* self);
void bala_expression_statement_set_expression (ValaExpressionStatement* self,
                                               ValaExpression* value);
ValaExpressionStatement* bala_expression_statement_new (ValaExpression* expression,
                                                        ValaSourceReference* source_reference);
ValaExpressionStatement* bala_expression_statement_construct (GType object_type,
                                                              ValaExpression* expression,
                                                              ValaSourceReference* source_reference);
ValaMemberBinding bala_field_get_binding (ValaField* self);
void bala_field_set_binding (ValaField* self,
                             ValaMemberBinding value);
gboolean bala_field_get_is_volatile (ValaField* self);
void bala_field_set_is_volatile (ValaField* self,
                                 gboolean value);
ValaField* bala_field_new (const gchar* name,
                           ValaDataType* variable_type,
                           ValaExpression* initializer,
                           ValaSourceReference* source_reference,
                           ValaComment* comment);
ValaField* bala_field_construct (GType object_type,
                                 const gchar* name,
                                 ValaDataType* variable_type,
                                 ValaExpression* initializer,
                                 ValaSourceReference* source_reference,
                                 ValaComment* comment);
GType bala_field_prototype_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaFieldPrototype, bala_code_node_unref)
ValaField* bala_field_prototype_get_field_symbol (ValaFieldPrototype* self);
ValaFieldPrototype* bala_field_prototype_new (ValaField* field_symbol);
ValaFieldPrototype* bala_field_prototype_construct (GType object_type,
                                                    ValaField* field_symbol);
GType bala_floating_type_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaFloatingType, bala_code_node_unref)
ValaFloatingType* bala_floating_type_new (ValaStruct* type_symbol);
ValaFloatingType* bala_floating_type_construct (GType object_type,
                                                ValaStruct* type_symbol);
ValaFlowAnalyzer* bala_flow_analyzer_new (void);
ValaFlowAnalyzer* bala_flow_analyzer_construct (GType object_type);
void bala_flow_analyzer_analyze (ValaFlowAnalyzer* self,
                                 ValaCodeContext* context);
ValaDataType* bala_foreach_statement_get_type_reference (ValaForeachStatement* self);
void bala_foreach_statement_set_type_reference (ValaForeachStatement* self,
                                                ValaDataType* value);
const gchar* bala_foreach_statement_get_variable_name (ValaForeachStatement* self);
void bala_foreach_statement_set_variable_name (ValaForeachStatement* self,
                                               const gchar* value);
ValaExpression* bala_foreach_statement_get_collection (ValaForeachStatement* self);
void bala_foreach_statement_set_collection (ValaForeachStatement* self,
                                            ValaExpression* value);
ValaBlock* bala_foreach_statement_get_body (ValaForeachStatement* self);
void bala_foreach_statement_set_body (ValaForeachStatement* self,
                                      ValaBlock* value);
gboolean bala_foreach_statement_get_use_iterator (ValaForeachStatement* self);
ValaLocalVariable* bala_foreach_statement_get_element_variable (ValaForeachStatement* self);
void bala_foreach_statement_set_element_variable (ValaForeachStatement* self,
                                                  ValaLocalVariable* value);
ValaLocalVariable* bala_foreach_statement_get_collection_variable (ValaForeachStatement* self);
void bala_foreach_statement_set_collection_variable (ValaForeachStatement* self,
                                                     ValaLocalVariable* value);
ValaLocalVariable* bala_foreach_statement_get_iterator_variable (ValaForeachStatement* self);
void bala_foreach_statement_set_iterator_variable (ValaForeachStatement* self,
                                                   ValaLocalVariable* value);
ValaForeachStatement* bala_foreach_statement_new (ValaDataType* type_reference,
                                                  const gchar* variable_name,
                                                  ValaExpression* collection,
                                                  ValaBlock* body,
                                                  ValaSourceReference* source_reference);
ValaForeachStatement* bala_foreach_statement_construct (GType object_type,
                                                        ValaDataType* type_reference,
                                                        const gchar* variable_name,
                                                        ValaExpression* collection,
                                                        ValaBlock* body,
                                                        ValaSourceReference* source_reference);
ValaExpression* bala_for_statement_get_condition (ValaForStatement* self);
void bala_for_statement_set_condition (ValaForStatement* self,
                                       ValaExpression* value);
ValaBlock* bala_for_statement_get_body (ValaForStatement* self);
void bala_for_statement_set_body (ValaForStatement* self,
                                  ValaBlock* value);
ValaForStatement* bala_for_statement_new (ValaExpression* condition,
                                          ValaBlock* body,
                                          ValaSourceReference* source_reference);
ValaForStatement* bala_for_statement_construct (GType object_type,
                                                ValaExpression* condition,
                                                ValaBlock* body,
                                                ValaSourceReference* source_reference);
void bala_for_statement_add_initializer (ValaForStatement* self,
                                         ValaExpression* init);
ValaList* bala_for_statement_get_initializer (ValaForStatement* self);
void bala_for_statement_add_iterator (ValaForStatement* self,
                                      ValaExpression* iter);
ValaList* bala_for_statement_get_iterator (ValaForStatement* self);
GType bala_gir_parser_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaGirParser, bala_code_visitor_unref)
void bala_gir_parser_parse (ValaGirParser* self,
                            ValaCodeContext* context);
void bala_gir_parser_parse_file (ValaGirParser* self,
                                 ValaSourceFile* source_file);
ValaGirParser* bala_gir_parser_new (void);
ValaGirParser* bala_gir_parser_construct (GType object_type);
GType bala_generic_destroy_field_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaGenericDestroyField, bala_code_node_unref)
ValaGenericDestroyField* bala_generic_destroy_field_new (ValaSourceReference* source_reference);
ValaGenericDestroyField* bala_generic_destroy_field_construct (GType object_type,
                                                               ValaSourceReference* source_reference);
GType bala_generic_dup_field_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaGenericDupField, bala_code_node_unref)
ValaGenericDupField* bala_generic_dup_field_new (ValaSourceReference* source_reference);
ValaGenericDupField* bala_generic_dup_field_construct (GType object_type,
                                                       ValaSourceReference* source_reference);
GType bala_generic_type_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaGenericType, bala_code_node_unref)
ValaTypeParameter* bala_generic_type_get_type_parameter (ValaGenericType* self);
void bala_generic_type_set_type_parameter (ValaGenericType* self,
                                           ValaTypeParameter* value);
ValaGenericType* bala_generic_type_new (ValaTypeParameter* type_parameter);
ValaGenericType* bala_generic_type_construct (GType object_type,
                                              ValaTypeParameter* type_parameter);
GType bala_genie_parser_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaGenieParser, bala_code_visitor_unref)
ValaGenieParser* bala_genie_parser_new (void);
ValaGenieParser* bala_genie_parser_construct (GType object_type);
void bala_genie_parser_parse (ValaGenieParser* self,
                              ValaCodeContext* context);
void bala_genie_parser_parse_file (ValaGenieParser* self,
                                   ValaSourceFile* source_file);
gpointer bala_genie_scanner_ref (gpointer instance);
void bala_genie_scanner_unref (gpointer instance);
GParamSpec* bala_genie_param_spec_scanner (const gchar* name,
                                           const gchar* nick,
                                           const gchar* blurb,
                                           GType object_type,
                                           GParamFlags flags);
void bala_genie_value_set_scanner (GValue* value,
                                   gpointer v_object);
void bala_genie_value_take_scanner (GValue* value,
                                    gpointer v_object);
gpointer bala_genie_value_get_scanner (const GValue* value);
GType bala_genie_scanner_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaGenieScanner, bala_genie_scanner_unref)
ValaSourceFile* bala_genie_scanner_get_source_file (ValaGenieScanner* self);
gint bala_genie_scanner_get_indent_spaces (ValaGenieScanner* self);
void bala_genie_scanner_set_indent_spaces (ValaGenieScanner* self,
                                           gint value);
ValaGenieScanner* bala_genie_scanner_new (ValaSourceFile* source_file);
ValaGenieScanner* bala_genie_scanner_construct (GType object_type,
                                                ValaSourceFile* source_file);
GType bala_source_location_get_type (void) G_GNUC_CONST;
ValaSourceLocation* bala_source_location_dup (const ValaSourceLocation* self);
void bala_source_location_free (ValaSourceLocation* self);
GType bala_genie_token_type_get_type (void) G_GNUC_CONST;
ValaGenieTokenType bala_genie_scanner_read_regex_token (ValaGenieScanner* self,
                                                        ValaSourceLocation* token_begin,
                                                        ValaSourceLocation* token_end);
void bala_genie_scanner_seek (ValaGenieScanner* self,
                              ValaSourceLocation* location);
ValaGenieTokenType bala_genie_scanner_get_identifier_or_keyword (gchar* begin,
                                                                 gint len);
ValaGenieTokenType bala_genie_scanner_read_template_token (ValaGenieScanner* self,
                                                           ValaSourceLocation* token_begin,
                                                           ValaSourceLocation* token_end);
ValaGenieTokenType bala_genie_scanner_read_token (ValaGenieScanner* self,
                                                  ValaSourceLocation* token_begin,
                                                  ValaSourceLocation* token_end);
void bala_genie_scanner_parse_file_comments (ValaGenieScanner* self);
ValaComment* bala_genie_scanner_pop_comment (ValaGenieScanner* self);
const gchar* bala_genie_token_type_to_string (ValaGenieTokenType self);
ValaExpression* bala_if_statement_get_condition (ValaIfStatement* self);
void bala_if_statement_set_condition (ValaIfStatement* self,
                                      ValaExpression* value);
ValaBlock* bala_if_statement_get_true_statement (ValaIfStatement* self);
void bala_if_statement_set_true_statement (ValaIfStatement* self,
                                           ValaBlock* value);
ValaBlock* bala_if_statement_get_false_statement (ValaIfStatement* self);
void bala_if_statement_set_false_statement (ValaIfStatement* self,
                                            ValaBlock* value);
ValaIfStatement* bala_if_statement_new (ValaExpression* cond,
                                        ValaBlock* true_stmt,
                                        ValaBlock* false_stmt,
                                        ValaSourceReference* source);
ValaIfStatement* bala_if_statement_construct (GType object_type,
                                              ValaExpression* cond,
                                              ValaBlock* true_stmt,
                                              ValaBlock* false_stmt,
                                              ValaSourceReference* source);
void bala_initializer_list_append (ValaInitializerList* self,
                                   ValaExpression* expr);
ValaList* bala_initializer_list_get_initializers (ValaInitializerList* self);
gint bala_initializer_list_get_size (ValaInitializerList* self);
ValaInitializerList* bala_initializer_list_new (ValaSourceReference* source_reference);
ValaInitializerList* bala_initializer_list_construct (GType object_type,
                                                      ValaSourceReference* source_reference);
const gchar* bala_integer_literal_get_value (ValaIntegerLiteral* self);
void bala_integer_literal_set_value (ValaIntegerLiteral* self,
                                     const gchar* value);
const gchar* bala_integer_literal_get_type_suffix (ValaIntegerLiteral* self);
void bala_integer_literal_set_type_suffix (ValaIntegerLiteral* self,
                                           const gchar* value);
ValaIntegerLiteral* bala_integer_literal_new (const gchar* i,
                                              ValaSourceReference* source);
ValaIntegerLiteral* bala_integer_literal_construct (GType object_type,
                                                    const gchar* i,
                                                    ValaSourceReference* source);
GType bala_integer_type_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaIntegerType, bala_code_node_unref)
ValaIntegerType* bala_integer_type_new (ValaStruct* type_symbol,
                                        const gchar* literal_value,
                                        const gchar* literal_type_name);
ValaIntegerType* bala_integer_type_construct (GType object_type,
                                              ValaStruct* type_symbol,
                                              const gchar* literal_value,
                                              const gchar* literal_type_name);
ValaInterface* bala_interface_new (const gchar* name,
                                   ValaSourceReference* source_reference,
                                   ValaComment* comment);
ValaInterface* bala_interface_construct (GType object_type,
                                         const gchar* name,
                                         ValaSourceReference* source_reference,
                                         ValaComment* comment);
void bala_interface_add_prerequisite (ValaInterface* self,
                                      ValaDataType* type);
ValaList* bala_interface_get_prerequisites (ValaInterface* self);
ValaList* bala_interface_get_virtuals (ValaInterface* self);
GType bala_interface_type_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaInterfaceType, bala_code_node_unref)
ValaInterface* bala_interface_type_get_interface_symbol (ValaInterfaceType* self);
ValaInterfaceType* bala_interface_type_new (ValaInterface* interface_symbol);
ValaInterfaceType* bala_interface_type_construct (GType object_type,
                                                  ValaInterface* interface_symbol);
GType bala_invalid_type_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaInvalidType, bala_code_node_unref)
ValaInvalidType* bala_invalid_type_new (void);
ValaInvalidType* bala_invalid_type_construct (GType object_type);
ValaExpression* bala_lambda_expression_get_expression_body (ValaLambdaExpression* self);
void bala_lambda_expression_set_expression_body (ValaLambdaExpression* self,
                                                 ValaExpression* value);
ValaBlock* bala_lambda_expression_get_statement_body (ValaLambdaExpression* self);
void bala_lambda_expression_set_statement_body (ValaLambdaExpression* self,
                                                ValaBlock* value);
ValaMethod* bala_lambda_expression_get_method (ValaLambdaExpression* self);
void bala_lambda_expression_set_method (ValaLambdaExpression* self,
                                        ValaMethod* value);
ValaLambdaExpression* bala_lambda_expression_new (ValaExpression* expression_body,
                                                  ValaSourceReference* source_reference);
ValaLambdaExpression* bala_lambda_expression_construct (GType object_type,
                                                        ValaExpression* expression_body,
                                                        ValaSourceReference* source_reference);
ValaLambdaExpression* bala_lambda_expression_new_with_statement_body (ValaBlock* statement_body,
                                                                      ValaSourceReference* source_reference);
ValaLambdaExpression* bala_lambda_expression_construct_with_statement_body (GType object_type,
                                                                            ValaBlock* statement_body,
                                                                            ValaSourceReference* source_reference);
void bala_lambda_expression_add_parameter (ValaLambdaExpression* self,
                                           ValaParameter* param);
ValaList* bala_lambda_expression_get_parameters (ValaLambdaExpression* self);
ValaLiteral* bala_literal_construct (GType object_type);
gboolean bala_local_variable_get_is_result (ValaLocalVariable* self);
void bala_local_variable_set_is_result (ValaLocalVariable* self,
                                        gboolean value);
gboolean bala_local_variable_get_captured (ValaLocalVariable* self);
void bala_local_variable_set_captured (ValaLocalVariable* self,
                                       gboolean value);
gboolean bala_local_variable_get_init (ValaLocalVariable* self);
void bala_local_variable_set_init (ValaLocalVariable* self,
                                   gboolean value);
ValaLocalVariable* bala_local_variable_new (ValaDataType* variable_type,
                                            const gchar* name,
                                            ValaExpression* initializer,
                                            ValaSourceReference* source_reference);
ValaLocalVariable* bala_local_variable_construct (GType object_type,
                                                  ValaDataType* variable_type,
                                                  const gchar* name,
                                                  ValaExpression* initializer,
                                                  ValaSourceReference* source_reference);
gboolean bala_lockable_get_lock_used (ValaLockable* self);
void bala_lockable_set_lock_used (ValaLockable* self,
                                  gboolean value);
ValaExpression* bala_lock_statement_get_resource (ValaLockStatement* self);
void bala_lock_statement_set_resource (ValaLockStatement* self,
                                       ValaExpression* value);
ValaBlock* bala_lock_statement_get_body (ValaLockStatement* self);
void bala_lock_statement_set_body (ValaLockStatement* self,
                                   ValaBlock* value);
ValaLockStatement* bala_lock_statement_new (ValaExpression* resource,
                                            ValaBlock* body,
                                            ValaSourceReference* source_reference);
ValaLockStatement* bala_lock_statement_construct (GType object_type,
                                                  ValaExpression* resource,
                                                  ValaBlock* body,
                                                  ValaSourceReference* source_reference);
ValaBlock* bala_loop_get_body (ValaLoop* self);
void bala_loop_set_body (ValaLoop* self,
                         ValaBlock* value);
ValaLoop* bala_loop_new (ValaBlock* body,
                         ValaSourceReference* source_reference);
ValaLoop* bala_loop_construct (GType object_type,
                               ValaBlock* body,
                               ValaSourceReference* source_reference);
gpointer bala_markup_reader_ref (gpointer instance);
void bala_markup_reader_unref (gpointer instance);
GParamSpec* bala_param_spec_markup_reader (const gchar* name,
                                           const gchar* nick,
                                           const gchar* blurb,
                                           GType object_type,
                                           GParamFlags flags);
void bala_value_set_markup_reader (GValue* value,
                                   gpointer v_object);
void bala_value_take_markup_reader (GValue* value,
                                    gpointer v_object);
gpointer bala_value_get_markup_reader (const GValue* value);
GType bala_markup_reader_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaMarkupReader, bala_markup_reader_unref)
const gchar* bala_markup_reader_get_filename (ValaMarkupReader* self);
const gchar* bala_markup_reader_get_name (ValaMarkupReader* self);
const gchar* bala_markup_reader_get_content (ValaMarkupReader* self);
ValaMarkupReader* bala_markup_reader_new (const gchar* filename);
ValaMarkupReader* bala_markup_reader_construct (GType object_type,
                                                const gchar* filename);
ValaMarkupReader* bala_markup_reader_new_from_string (const gchar* filename,
                                                      const gchar* content);
ValaMarkupReader* bala_markup_reader_construct_from_string (GType object_type,
                                                            const gchar* filename,
                                                            const gchar* content);
gchar* bala_markup_reader_get_attribute (ValaMarkupReader* self,
                                         const gchar* attr);
ValaMap* bala_markup_reader_get_attributes (ValaMarkupReader* self);
GType bala_markup_token_type_get_type (void) G_GNUC_CONST;
ValaMarkupTokenType bala_markup_reader_read_token (ValaMarkupReader* self,
                                                   ValaSourceLocation* token_begin,
                                                   ValaSourceLocation* token_end);
const gchar* bala_markup_token_type_to_string (ValaMarkupTokenType self);
ValaExpression* bala_member_access_get_inner (ValaMemberAccess* self);
void bala_member_access_set_inner (ValaMemberAccess* self,
                                   ValaExpression* value);
const gchar* bala_member_access_get_member_name (ValaMemberAccess* self);
void bala_member_access_set_member_name (ValaMemberAccess* self,
                                         const gchar* value);
gboolean bala_member_access_get_pointer_member_access (ValaMemberAccess* self);
void bala_member_access_set_pointer_member_access (ValaMemberAccess* self,
                                                   gboolean value);
gboolean bala_member_access_get_prototype_access (ValaMemberAccess* self);
void bala_member_access_set_prototype_access (ValaMemberAccess* self,
                                              gboolean value);
gboolean bala_member_access_get_tainted_access (ValaMemberAccess* self);
void bala_member_access_set_tainted_access (ValaMemberAccess* self,
                                            gboolean value);
gboolean bala_member_access_get_creation_member (ValaMemberAccess* self);
void bala_member_access_set_creation_member (ValaMemberAccess* self,
                                             gboolean value);
gboolean bala_member_access_get_qualified (ValaMemberAccess* self);
void bala_member_access_set_qualified (ValaMemberAccess* self,
                                       gboolean value);
ValaMemberAccess* bala_member_access_new (ValaExpression* inner,
                                          const gchar* member_name,
                                          ValaSourceReference* source_reference);
ValaMemberAccess* bala_member_access_construct (GType object_type,
                                                ValaExpression* inner,
                                                const gchar* member_name,
                                                ValaSourceReference* source_reference);
ValaMemberAccess* bala_member_access_new_simple (const gchar* member_name,
                                                 ValaSourceReference* source_reference);
ValaMemberAccess* bala_member_access_construct_simple (GType object_type,
                                                       const gchar* member_name,
                                                       ValaSourceReference* source_reference);
ValaMemberAccess* bala_member_access_new_pointer (ValaExpression* inner,
                                                  const gchar* member_name,
                                                  ValaSourceReference* source_reference);
ValaMemberAccess* bala_member_access_construct_pointer (GType object_type,
                                                        ValaExpression* inner,
                                                        const gchar* member_name,
                                                        ValaSourceReference* source_reference);
void bala_member_access_add_type_argument (ValaMemberAccess* self,
                                           ValaDataType* arg);
ValaList* bala_member_access_get_type_arguments (ValaMemberAccess* self);
void bala_member_access_check_lvalue_access (ValaMemberAccess* self);
GType bala_member_initializer_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaMemberInitializer, bala_code_node_unref)
const gchar* bala_member_initializer_get_name (ValaMemberInitializer* self);
void bala_member_initializer_set_name (ValaMemberInitializer* self,
                                       const gchar* value);
ValaExpression* bala_member_initializer_get_initializer (ValaMemberInitializer* self);
void bala_member_initializer_set_initializer (ValaMemberInitializer* self,
                                              ValaExpression* value);
ValaSymbol* bala_member_initializer_get_symbol_reference (ValaMemberInitializer* self);
void bala_member_initializer_set_symbol_reference (ValaMemberInitializer* self,
                                                   ValaSymbol* value);
ValaMemberInitializer* bala_member_initializer_new (const gchar* name,
                                                    ValaExpression* initializer,
                                                    ValaSourceReference* source_reference);
ValaMemberInitializer* bala_member_initializer_construct (GType object_type,
                                                          const gchar* name,
                                                          ValaExpression* initializer,
                                                          ValaSourceReference* source_reference);
ValaMemberBinding bala_method_get_binding (ValaMethod* self);
void bala_method_set_binding (ValaMethod* self,
                              ValaMemberBinding value);
gboolean bala_method_get_is_abstract (ValaMethod* self);
void bala_method_set_is_abstract (ValaMethod* self,
                                  gboolean value);
gboolean bala_method_get_is_virtual (ValaMethod* self);
void bala_method_set_is_virtual (ValaMethod* self,
                                 gboolean value);
gboolean bala_method_get_overrides (ValaMethod* self);
void bala_method_set_overrides (ValaMethod* self,
                                gboolean value);
gboolean bala_method_get_is_inline (ValaMethod* self);
void bala_method_set_is_inline (ValaMethod* self,
                                gboolean value);
gboolean bala_method_get_returns_floating_reference (ValaMethod* self);
void bala_method_set_returns_floating_reference (ValaMethod* self,
                                                 gboolean value);
gboolean bala_method_get_returns_modified_pointer (ValaMethod* self);
void bala_method_set_returns_modified_pointer (ValaMethod* self,
                                               gboolean value);
ValaMethod* bala_method_get_base_method (ValaMethod* self);
ValaMethod* bala_method_get_base_interface_method (ValaMethod* self);
ValaDataType* bala_method_get_base_interface_type (ValaMethod* self);
void bala_method_set_base_interface_type (ValaMethod* self,
                                          ValaDataType* value);
gboolean bala_method_get_entry_point (ValaMethod* self);
ValaParameter* bala_method_get_this_parameter (ValaMethod* self);
void bala_method_set_this_parameter (ValaMethod* self,
                                     ValaParameter* value);
gboolean bala_method_get_printf_format (ValaMethod* self);
void bala_method_set_printf_format (ValaMethod* self,
                                    gboolean value);
gboolean bala_method_get_scanf_format (ValaMethod* self);
void bala_method_set_scanf_format (ValaMethod* self,
                                   gboolean value);
gboolean bala_method_get_has_construct_function (ValaMethod* self);
void bala_method_set_has_construct_function (ValaMethod* self,
                                             gboolean value);
ValaLocalVariable* bala_method_get_params_array_var (ValaMethod* self);
void bala_method_set_params_array_var (ValaMethod* self,
                                       ValaLocalVariable* value);
ValaSignal* bala_method_get_signal_reference (ValaMethod* self);
void bala_method_set_signal_reference (ValaMethod* self,
                                       ValaSignal* value);
gboolean bala_method_get_closure (ValaMethod* self);
void bala_method_set_closure (ValaMethod* self,
                              gboolean value);
gboolean bala_method_get_coroutine (ValaMethod* self);
void bala_method_set_coroutine (ValaMethod* self,
                                gboolean value);
gboolean bala_method_get_is_async_callback (ValaMethod* self);
void bala_method_set_is_async_callback (ValaMethod* self,
                                        gboolean value);
ValaMethod* bala_method_new (const gchar* name,
                             ValaDataType* return_type,
                             ValaSourceReference* source_reference,
                             ValaComment* comment);
ValaMethod* bala_method_construct (GType object_type,
                                   const gchar* name,
                                   ValaDataType* return_type,
                                   ValaSourceReference* source_reference,
                                   ValaComment* comment);
void bala_method_clear_parameters (ValaMethod* self);
gboolean bala_method_is_variadic (ValaMethod* self);
gboolean bala_method_compatible (ValaMethod* self,
                                 ValaMethod* base_method,
                                 gchar* * invalid_match);
gboolean bala_method_compatible_no_error (ValaMethod* self,
                                          ValaMethod* base_method);
void bala_method_add_type_parameter (ValaMethod* self,
                                     ValaTypeParameter* p);
ValaList* bala_method_get_type_parameters (ValaMethod* self);
gint bala_method_get_type_parameter_index (ValaMethod* self,
                                           const gchar* name);
gboolean bala_method_has_type_parameters (ValaMethod* self);
void bala_method_add_precondition (ValaMethod* self,
                                   ValaExpression* precondition);
ValaList* bala_method_get_preconditions (ValaMethod* self);
void bala_method_add_postcondition (ValaMethod* self,
                                    ValaExpression* postcondition);
ValaList* bala_method_get_postconditions (ValaMethod* self);
void bala_method_add_error_type (ValaMethod* self,
                                 ValaDataType* error_type);
gint bala_method_get_required_arguments (ValaMethod* self);
ValaMethod* bala_method_get_end_method (ValaMethod* self);
ValaMethod* bala_method_get_callback_method (ValaMethod* self);
ValaList* bala_method_get_async_begin_parameters (ValaMethod* self);
ValaList* bala_method_get_async_end_parameters (ValaMethod* self);
void bala_method_add_captured_variable (ValaMethod* self,
                                        ValaLocalVariable* local);
void bala_method_get_captured_variables (ValaMethod* self,
                                         ValaCollection* variables);
gint bala_method_get_format_arg_index (ValaMethod* self);
gboolean bala_method_has_error_type_parameter (ValaMethod* self);
ValaExpression* bala_method_call_get_call (ValaMethodCall* self);
void bala_method_call_set_call (ValaMethodCall* self,
                                ValaExpression* value);
gboolean bala_method_call_get_is_yield_expression (ValaMethodCall* self);
void bala_method_call_set_is_yield_expression (ValaMethodCall* self,
                                               gboolean value);
gboolean bala_method_call_get_is_assert (ValaMethodCall* self);
gboolean bala_method_call_get_is_constructv_chainup (ValaMethodCall* self);
gboolean bala_method_call_get_is_chainup (ValaMethodCall* self);
ValaMethodCall* bala_method_call_new (ValaExpression* call,
                                      ValaSourceReference* source_reference);
ValaMethodCall* bala_method_call_construct (GType object_type,
                                            ValaExpression* call,
                                            ValaSourceReference* source_reference);
void bala_method_call_add_argument (ValaMethodCall* self,
                                    ValaExpression* arg);
ValaList* bala_method_call_get_argument_list (ValaMethodCall* self);
ValaStringLiteral* bala_method_call_get_format_literal (ValaMethodCall* self);
GType bala_method_type_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaMethodType, bala_code_node_unref)
ValaMethod* bala_method_type_get_method_symbol (ValaMethodType* self);
ValaMethodType* bala_method_type_new (ValaMethod* method_symbol);
ValaMethodType* bala_method_type_construct (GType object_type,
                                            ValaMethod* method_symbol);
const gchar* bala_named_argument_get_name (ValaNamedArgument* self);
void bala_named_argument_set_name (ValaNamedArgument* self,
                                   const gchar* value);
ValaExpression* bala_named_argument_get_inner (ValaNamedArgument* self);
void bala_named_argument_set_inner (ValaNamedArgument* self,
                                    ValaExpression* value);
ValaNamedArgument* bala_named_argument_new (const gchar* name,
                                            ValaExpression* inner,
                                            ValaSourceReference* source_reference);
ValaNamedArgument* bala_named_argument_construct (GType object_type,
                                                  const gchar* name,
                                                  ValaExpression* inner,
                                                  ValaSourceReference* source_reference);
ValaNamespace* bala_namespace_new (const gchar* name,
                                   ValaSourceReference* source_reference);
ValaNamespace* bala_namespace_construct (GType object_type,
                                         const gchar* name,
                                         ValaSourceReference* source_reference);
void bala_namespace_add_using_directive (ValaNamespace* self,
                                         ValaUsingDirective* ns);
void bala_namespace_add_comment (ValaNamespace* self,
                                 ValaComment* comment);
ValaList* bala_namespace_get_comments (ValaNamespace* self);
ValaList* bala_namespace_get_namespaces (ValaNamespace* self);
ValaList* bala_namespace_get_structs (ValaNamespace* self);
ValaList* bala_namespace_get_classes (ValaNamespace* self);
ValaList* bala_namespace_get_interfaces (ValaNamespace* self);
ValaList* bala_namespace_get_enums (ValaNamespace* self);
ValaList* bala_namespace_get_error_domains (ValaNamespace* self);
ValaList* bala_namespace_get_fields (ValaNamespace* self);
ValaList* bala_namespace_get_constants (ValaNamespace* self);
ValaList* bala_namespace_get_delegates (ValaNamespace* self);
ValaList* bala_namespace_get_methods (ValaNamespace* self);
ValaNullLiteral* bala_null_literal_new (ValaSourceReference* source);
ValaNullLiteral* bala_null_literal_construct (GType object_type,
                                              ValaSourceReference* source);
GType bala_null_type_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaNullType, bala_code_node_unref)
ValaNullType* bala_null_type_new (ValaSourceReference* source_reference);
ValaNullType* bala_null_type_construct (GType object_type,
                                        ValaSourceReference* source_reference);
ValaDataType* bala_object_creation_expression_get_type_reference (ValaObjectCreationExpression* self);
void bala_object_creation_expression_set_type_reference (ValaObjectCreationExpression* self,
                                                         ValaDataType* value);
ValaMemberAccess* bala_object_creation_expression_get_member_name (ValaObjectCreationExpression* self);
void bala_object_creation_expression_set_member_name (ValaObjectCreationExpression* self,
                                                      ValaMemberAccess* value);
gboolean bala_object_creation_expression_get_is_yield_expression (ValaObjectCreationExpression* self);
void bala_object_creation_expression_set_is_yield_expression (ValaObjectCreationExpression* self,
                                                              gboolean value);
gboolean bala_object_creation_expression_get_struct_creation (ValaObjectCreationExpression* self);
void bala_object_creation_expression_set_struct_creation (ValaObjectCreationExpression* self,
                                                          gboolean value);
ValaObjectCreationExpression* bala_object_creation_expression_new (ValaMemberAccess* member_name,
                                                                   ValaSourceReference* source_reference);
ValaObjectCreationExpression* bala_object_creation_expression_construct (GType object_type,
                                                                         ValaMemberAccess* member_name,
                                                                         ValaSourceReference* source_reference);
void bala_object_creation_expression_add_argument (ValaObjectCreationExpression* self,
                                                   ValaExpression* arg);
ValaList* bala_object_creation_expression_get_argument_list (ValaObjectCreationExpression* self);
void bala_object_creation_expression_add_member_initializer (ValaObjectCreationExpression* self,
                                                             ValaMemberInitializer* init);
ValaList* bala_object_creation_expression_get_object_initializer (ValaObjectCreationExpression* self);
GType bala_object_type_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaObjectType, bala_code_node_unref)
ValaObjectTypeSymbol* bala_object_type_get_object_type_symbol (ValaObjectType* self);
ValaObjectType* bala_object_type_new (ValaObjectTypeSymbol* type_symbol);
ValaObjectType* bala_object_type_construct (GType object_type,
                                            ValaObjectTypeSymbol* type_symbol);
ValaObjectTypeSymbol* bala_object_type_symbol_construct (GType object_type,
                                                         const gchar* name,
                                                         ValaSourceReference* source_reference,
                                                         ValaComment* comment);
ValaList* bala_object_type_symbol_get_members (ValaObjectTypeSymbol* self);
ValaList* bala_object_type_symbol_get_fields (ValaObjectTypeSymbol* self);
ValaList* bala_object_type_symbol_get_methods (ValaObjectTypeSymbol* self);
ValaList* bala_object_type_symbol_get_properties (ValaObjectTypeSymbol* self);
ValaList* bala_object_type_symbol_get_signals (ValaObjectTypeSymbol* self);
ValaList* bala_object_type_symbol_get_classes (ValaObjectTypeSymbol* self);
ValaList* bala_object_type_symbol_get_interfaces (ValaObjectTypeSymbol* self);
ValaList* bala_object_type_symbol_get_structs (ValaObjectTypeSymbol* self);
ValaList* bala_object_type_symbol_get_enums (ValaObjectTypeSymbol* self);
ValaList* bala_object_type_symbol_get_delegates (ValaObjectTypeSymbol* self);
ValaList* bala_object_type_symbol_get_constants (ValaObjectTypeSymbol* self);
void bala_object_type_symbol_add_type_parameter (ValaObjectTypeSymbol* self,
                                                 ValaTypeParameter* p);
ValaList* bala_object_type_symbol_get_type_parameters (ValaObjectTypeSymbol* self);
gboolean bala_object_type_symbol_has_type_parameters (ValaObjectTypeSymbol* self);
void bala_object_type_symbol_add_hidden_method (ValaObjectTypeSymbol* self,
                                                ValaMethod* m);
GType bala_parameter_direction_get_type (void) G_GNUC_CONST;
ValaParameterDirection bala_parameter_get_direction (ValaParameter* self);
void bala_parameter_set_direction (ValaParameter* self,
                                   ValaParameterDirection value);
gboolean bala_parameter_get_ellipsis (ValaParameter* self);
void bala_parameter_set_ellipsis (ValaParameter* self,
                                  gboolean value);
gboolean bala_parameter_get_params_array (ValaParameter* self);
void bala_parameter_set_params_array (ValaParameter* self,
                                      gboolean value);
gboolean bala_parameter_get_captured (ValaParameter* self);
void bala_parameter_set_captured (ValaParameter* self,
                                  gboolean value);
gboolean bala_parameter_get_format_arg (ValaParameter* self);
ValaParameter* bala_parameter_get_base_parameter (ValaParameter* self);
void bala_parameter_set_base_parameter (ValaParameter* self,
                                        ValaParameter* value);
ValaParameter* bala_parameter_new (const gchar* name,
                                   ValaDataType* variable_type,
                                   ValaSourceReference* source_reference);
ValaParameter* bala_parameter_construct (GType object_type,
                                         const gchar* name,
                                         ValaDataType* variable_type,
                                         ValaSourceReference* source_reference);
ValaParameter* bala_parameter_new_with_ellipsis (ValaSourceReference* source_reference);
ValaParameter* bala_parameter_construct_with_ellipsis (GType object_type,
                                                       ValaSourceReference* source_reference);
ValaParameter* bala_parameter_copy (ValaParameter* self);
GType bala_parser_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaParser, bala_code_visitor_unref)
ValaParser* bala_parser_new (void);
ValaParser* bala_parser_construct (GType object_type);
void bala_parser_parse (ValaParser* self,
                        ValaCodeContext* context);
void bala_parser_parse_file (ValaParser* self,
                             ValaSourceFile* source_file);
GQuark bala_parse_error_quark (void);
ValaVariable* bala_phi_function_get_original_variable (ValaPhiFunction* self);
ValaList* bala_phi_function_get_operands (ValaPhiFunction* self);
ValaPhiFunction* bala_phi_function_new (ValaVariable* variable,
                                        gint num_of_ops);
ValaPhiFunction* bala_phi_function_construct (GType object_type,
                                              ValaVariable* variable,
                                              gint num_of_ops);
ValaExpression* bala_pointer_indirection_get_inner (ValaPointerIndirection* self);
void bala_pointer_indirection_set_inner (ValaPointerIndirection* self,
                                         ValaExpression* value);
ValaPointerIndirection* bala_pointer_indirection_new (ValaExpression* inner,
                                                      ValaSourceReference* source_reference);
ValaPointerIndirection* bala_pointer_indirection_construct (GType object_type,
                                                            ValaExpression* inner,
                                                            ValaSourceReference* source_reference);
GType bala_pointer_type_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaPointerType, bala_code_node_unref)
ValaDataType* bala_pointer_type_get_base_type (ValaPointerType* self);
void bala_pointer_type_set_base_type (ValaPointerType* self,
                                      ValaDataType* value);
ValaPointerType* bala_pointer_type_new (ValaDataType* base_type,
                                        ValaSourceReference* source_reference);
ValaPointerType* bala_pointer_type_construct (GType object_type,
                                              ValaDataType* base_type,
                                              ValaSourceReference* source_reference);
ValaExpression* bala_postfix_expression_get_inner (ValaPostfixExpression* self);
void bala_postfix_expression_set_inner (ValaPostfixExpression* self,
                                        ValaExpression* value);
gboolean bala_postfix_expression_get_increment (ValaPostfixExpression* self);
void bala_postfix_expression_set_increment (ValaPostfixExpression* self,
                                            gboolean value);
ValaPostfixExpression* bala_postfix_expression_new (ValaExpression* _inner,
                                                    gboolean inc,
                                                    ValaSourceReference* source);
ValaPostfixExpression* bala_postfix_expression_construct (GType object_type,
                                                          ValaExpression* _inner,
                                                          gboolean inc,
                                                          ValaSourceReference* source);
ValaProperty* bala_property_accessor_get_prop (ValaPropertyAccessor* self);
ValaDataType* bala_property_accessor_get_value_type (ValaPropertyAccessor* self);
gboolean bala_property_accessor_get_readable (ValaPropertyAccessor* self);
gboolean bala_property_accessor_get_writable (ValaPropertyAccessor* self);
gboolean bala_property_accessor_get_construction (ValaPropertyAccessor* self);
gboolean bala_property_accessor_get_automatic_body (ValaPropertyAccessor* self);
ValaParameter* bala_property_accessor_get_value_parameter (ValaPropertyAccessor* self);
ValaPropertyAccessor* bala_property_accessor_new (gboolean readable,
                                                  gboolean writable,
                                                  gboolean construction,
                                                  ValaDataType* value_type,
                                                  ValaBlock* body,
                                                  ValaSourceReference* source_reference,
                                                  ValaComment* comment);
ValaPropertyAccessor* bala_property_accessor_construct (GType object_type,
                                                        gboolean readable,
                                                        gboolean writable,
                                                        gboolean construction,
                                                        ValaDataType* value_type,
                                                        ValaBlock* body,
                                                        ValaSourceReference* source_reference,
                                                        ValaComment* comment);
ValaMethod* bala_property_accessor_get_method (ValaPropertyAccessor* self);
ValaDataType* bala_property_get_property_type (ValaProperty* self);
void bala_property_set_property_type (ValaProperty* self,
                                      ValaDataType* value);
ValaPropertyAccessor* bala_property_get_get_accessor (ValaProperty* self);
void bala_property_set_get_accessor (ValaProperty* self,
                                     ValaPropertyAccessor* value);
ValaPropertyAccessor* bala_property_get_set_accessor (ValaProperty* self);
void bala_property_set_set_accessor (ValaProperty* self,
                                     ValaPropertyAccessor* value);
ValaParameter* bala_property_get_this_parameter (ValaProperty* self);
void bala_property_set_this_parameter (ValaProperty* self,
                                       ValaParameter* value);
gboolean bala_property_get_interface_only (ValaProperty* self);
void bala_property_set_interface_only (ValaProperty* self,
                                       gboolean value);
gboolean bala_property_get_is_abstract (ValaProperty* self);
void bala_property_set_is_abstract (ValaProperty* self,
                                    gboolean value);
gboolean bala_property_get_is_virtual (ValaProperty* self);
void bala_property_set_is_virtual (ValaProperty* self,
                                   gboolean value);
gboolean bala_property_get_overrides (ValaProperty* self);
void bala_property_set_overrides (ValaProperty* self,
                                  gboolean value);
ValaField* bala_property_get_field (ValaProperty* self);
ValaMemberBinding bala_property_get_binding (ValaProperty* self);
void bala_property_set_binding (ValaProperty* self,
                                ValaMemberBinding value);
const gchar* bala_property_get_nick (ValaProperty* self);
const gchar* bala_property_get_blurb (ValaProperty* self);
gboolean bala_property_get_notify (ValaProperty* self);
ValaProperty* bala_property_get_base_property (ValaProperty* self);
ValaProperty* bala_property_get_base_interface_property (ValaProperty* self);
ValaExpression* bala_property_get_initializer (ValaProperty* self);
void bala_property_set_initializer (ValaProperty* self,
                                    ValaExpression* value);
ValaProperty* bala_property_new (const gchar* name,
                                 ValaDataType* property_type,
                                 ValaPropertyAccessor* get_accessor,
                                 ValaPropertyAccessor* set_accessor,
                                 ValaSourceReference* source_reference,
                                 ValaComment* comment);
ValaProperty* bala_property_construct (GType object_type,
                                       const gchar* name,
                                       ValaDataType* property_type,
                                       ValaPropertyAccessor* get_accessor,
                                       ValaPropertyAccessor* set_accessor,
                                       ValaSourceReference* source_reference,
                                       ValaComment* comment);
gboolean bala_property_compatible (ValaProperty* self,
                                   ValaProperty* base_property,
                                   gchar* * invalid_match);
GType bala_property_prototype_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaPropertyPrototype, bala_code_node_unref)
ValaProperty* bala_property_prototype_get_property_symbol (ValaPropertyPrototype* self);
ValaPropertyPrototype* bala_property_prototype_new (ValaProperty* property_symbol);
ValaPropertyPrototype* bala_property_prototype_construct (GType object_type,
                                                          ValaProperty* property_symbol);
const gchar* bala_real_literal_get_value (ValaRealLiteral* self);
void bala_real_literal_set_value (ValaRealLiteral* self,
                                  const gchar* value);
ValaRealLiteral* bala_real_literal_new (const gchar* r,
                                        ValaSourceReference* source);
ValaRealLiteral* bala_real_literal_construct (GType object_type,
                                              const gchar* r,
                                              ValaSourceReference* source);
gchar* bala_real_literal_get_type_name (ValaRealLiteral* self);
ValaExpression* bala_reference_transfer_expression_get_inner (ValaReferenceTransferExpression* self);
void bala_reference_transfer_expression_set_inner (ValaReferenceTransferExpression* self,
                                                   ValaExpression* value);
ValaReferenceTransferExpression* bala_reference_transfer_expression_new (ValaExpression* inner,
                                                                         ValaSourceReference* source_reference);
ValaReferenceTransferExpression* bala_reference_transfer_expression_construct (GType object_type,
                                                                               ValaExpression* inner,
                                                                               ValaSourceReference* source_reference);
ValaReferenceType* bala_reference_type_construct (GType object_type,
                                                  ValaSymbol* symbol);
const gchar* bala_regex_literal_get_value (ValaRegexLiteral* self);
void bala_regex_literal_set_value (ValaRegexLiteral* self,
                                   const gchar* value);
ValaRegexLiteral* bala_regex_literal_new (const gchar* value,
                                          ValaSourceReference* source_reference);
ValaRegexLiteral* bala_regex_literal_construct (GType object_type,
                                                const gchar* value,
                                                ValaSourceReference* source_reference);
GType bala_report_colored_get_type (void) G_GNUC_CONST;
gboolean bala_report_get_enable_warnings (ValaReport* self);
void bala_report_set_enable_warnings (ValaReport* self,
                                      gboolean value);
gboolean bala_report_set_colors (ValaReport* self,
                                 const gchar* str,
                                 ValaReportColored colored_output);
void bala_report_set_verbose_errors (ValaReport* self,
                                     gboolean verbose);
gint bala_report_get_warnings (ValaReport* self);
gint bala_report_get_errors (ValaReport* self);
void bala_report_note (ValaReport* self,
                       ValaSourceReference* source,
                       const gchar* message);
void bala_report_depr (ValaReport* self,
                       ValaSourceReference* source,
                       const gchar* message);
void bala_report_warn (ValaReport* self,
                       ValaSourceReference* source,
                       const gchar* message);
void bala_report_err (ValaReport* self,
                      ValaSourceReference* source,
                      const gchar* message);
void bala_report_notice (ValaSourceReference* source,
                         const gchar* message);
void bala_report_deprecated (ValaSourceReference* source,
                             const gchar* message);
void bala_report_experimental (ValaSourceReference* source,
                               const gchar* message);
void bala_report_warning (ValaSourceReference* source,
                          const gchar* message);
void bala_report_error (ValaSourceReference* source,
                        const gchar* message);
ValaReport* bala_report_new (void);
ValaReport* bala_report_construct (GType object_type);
ValaExpression* bala_return_statement_get_return_expression (ValaReturnStatement* self);
void bala_return_statement_set_return_expression (ValaReturnStatement* self,
                                                  ValaExpression* value);
ValaReturnStatement* bala_return_statement_new (ValaExpression* return_expression,
                                                ValaSourceReference* source_reference);
ValaReturnStatement* bala_return_statement_construct (GType object_type,
                                                      ValaExpression* return_expression,
                                                      ValaSourceReference* source_reference);
gpointer bala_scanner_ref (gpointer instance);
void bala_scanner_unref (gpointer instance);
GParamSpec* bala_param_spec_scanner (const gchar* name,
                                     const gchar* nick,
                                     const gchar* blurb,
                                     GType object_type,
                                     GParamFlags flags);
void bala_value_set_scanner (GValue* value,
                             gpointer v_object);
void bala_value_take_scanner (GValue* value,
                              gpointer v_object);
gpointer bala_value_get_scanner (const GValue* value);
GType bala_scanner_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaScanner, bala_scanner_unref)
ValaSourceFile* bala_scanner_get_source_file (ValaScanner* self);
ValaScanner* bala_scanner_new (ValaSourceFile* source_file);
ValaScanner* bala_scanner_construct (GType object_type,
                                     ValaSourceFile* source_file);
void bala_scanner_seek (ValaScanner* self,
                        ValaSourceLocation* location);
GType bala_token_type_get_type (void) G_GNUC_CONST;
ValaTokenType bala_scanner_read_regex_token (ValaScanner* self,
                                             ValaSourceLocation* token_begin,
                                             ValaSourceLocation* token_end);
ValaTokenType bala_scanner_get_identifier_or_keyword (gchar* begin,
                                                      gint len);
ValaTokenType bala_scanner_read_template_token (ValaScanner* self,
                                                ValaSourceLocation* token_begin,
                                                ValaSourceLocation* token_end);
ValaTokenType bala_scanner_read_token (ValaScanner* self,
                                       ValaSourceLocation* token_begin,
                                       ValaSourceLocation* token_end);
void bala_scanner_parse_file_comments (ValaScanner* self);
ValaComment* bala_scanner_pop_comment (ValaScanner* self);
ValaSymbol* bala_scope_get_owner (ValaScope* self);
void bala_scope_set_owner (ValaScope* self,
                           ValaSymbol* value);
ValaScope* bala_scope_get_parent_scope (ValaScope* self);
void bala_scope_set_parent_scope (ValaScope* self,
                                  ValaScope* value);
ValaScope* bala_scope_new (ValaSymbol* owner);
ValaScope* bala_scope_construct (GType object_type,
                                 ValaSymbol* owner);
void bala_scope_add (ValaScope* self,
                     const gchar* name,
                     ValaSymbol* sym);
void bala_scope_remove (ValaScope* self,
                        const gchar* name);
ValaSymbol* bala_scope_lookup (ValaScope* self,
                               const gchar* name);
gboolean bala_scope_is_subscope_of (ValaScope* self,
                                    ValaScope* scope);
ValaMap* bala_scope_get_symbol_table (ValaScope* self);
GType bala_struct_value_type_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaStructValueType, bala_code_node_unref)
ValaSymbol* bala_semantic_analyzer_get_current_symbol (ValaSemanticAnalyzer* self);
void bala_semantic_analyzer_set_current_symbol (ValaSemanticAnalyzer* self,
                                                ValaSymbol* value);
ValaSourceFile* bala_semantic_analyzer_get_current_source_file (ValaSemanticAnalyzer* self);
void bala_semantic_analyzer_set_current_source_file (ValaSemanticAnalyzer* self,
                                                     ValaSourceFile* value);
ValaTypeSymbol* bala_semantic_analyzer_get_current_type_symbol (ValaSemanticAnalyzer* self);
ValaClass* bala_semantic_analyzer_get_current_class (ValaSemanticAnalyzer* self);
ValaStruct* bala_semantic_analyzer_get_current_struct (ValaSemanticAnalyzer* self);
ValaMethod* bala_semantic_analyzer_get_current_method (ValaSemanticAnalyzer* self);
ValaMethod* bala_semantic_analyzer_get_current_async_method (ValaSemanticAnalyzer* self);
ValaPropertyAccessor* bala_semantic_analyzer_get_current_property_accessor (ValaSemanticAnalyzer* self);
ValaSymbol* bala_semantic_analyzer_get_current_method_or_property_accessor (ValaSemanticAnalyzer* self);
ValaDataType* bala_semantic_analyzer_get_current_return_type (ValaSemanticAnalyzer* self);
ValaSemanticAnalyzer* bala_semantic_analyzer_new (void);
ValaSemanticAnalyzer* bala_semantic_analyzer_construct (GType object_type);
void bala_semantic_analyzer_analyze (ValaSemanticAnalyzer* self,
                                     ValaCodeContext* context);
gboolean bala_semantic_analyzer_is_type_accessible (ValaSemanticAnalyzer* self,
                                                    ValaSymbol* sym,
                                                    ValaDataType* type);
ValaDataType* bala_semantic_analyzer_get_value_type_for_symbol (ValaSemanticAnalyzer* self,
                                                                ValaSymbol* sym,
                                                                gboolean lvalue);
ValaSymbol* bala_semantic_analyzer_symbol_lookup_inherited (ValaSymbol* sym,
                                                            const gchar* name);
ValaDataType* bala_semantic_analyzer_get_data_type_for_symbol (ValaSymbol* sym);
ValaSymbol* bala_semantic_analyzer_get_symbol_for_data_type (ValaDataType* type);
gboolean bala_semantic_analyzer_is_gobject_property (ValaSemanticAnalyzer* self,
                                                     ValaProperty* prop);
gboolean bala_semantic_analyzer_is_gobject_property_type (ValaSemanticAnalyzer* self,
                                                          ValaDataType* property_type);
gboolean bala_semantic_analyzer_check_arguments (ValaSemanticAnalyzer* self,
                                                 ValaExpression* expr,
                                                 ValaDataType* mtype,
                                                 ValaList* params,
                                                 ValaList* args);
gboolean bala_semantic_analyzer_check_variadic_arguments (ValaSemanticAnalyzer* self,
                                                          ValaIterator* arg_it,
                                                          gint i,
                                                          ValaSourceReference* source_reference);
gboolean bala_semantic_analyzer_check_print_format (ValaSemanticAnalyzer* self,
                                                    const gchar* format,
                                                    ValaIterator* arg_it,
                                                    ValaSourceReference* source_reference);
ValaDataType* bala_semantic_analyzer_get_actual_type (ValaDataType* derived_instance_type,
                                                      ValaList* method_type_arguments,
                                                      ValaGenericType* generic_type,
                                                      ValaCodeNode* node_reference);
gboolean bala_semantic_analyzer_is_in_instance_method (ValaSemanticAnalyzer* self);
ValaExpression* bala_semantic_analyzer_create_temp_access (ValaLocalVariable* local,
                                                           ValaDataType* target_type);
void bala_semantic_analyzer_visit_member_initializer (ValaSemanticAnalyzer* self,
                                                      ValaMemberInitializer* init,
                                                      ValaDataType* type);
ValaDataType* bala_semantic_analyzer_get_arithmetic_result_type (ValaSemanticAnalyzer* self,
                                                                 ValaDataType* left_type,
                                                                 ValaDataType* right_type);
ValaMethod* bala_semantic_analyzer_find_current_method (ValaSemanticAnalyzer* self);
ValaMethod* bala_semantic_analyzer_find_parent_method (ValaSymbol* sym);
ValaSymbol* bala_semantic_analyzer_find_parent_method_or_property_accessor (ValaSymbol* sym);
ValaTypeSymbol* bala_semantic_analyzer_find_parent_type_symbol (ValaSymbol* sym);
ValaDataType* bala_semantic_analyzer_get_this_type (ValaSymbol* s,
                                                    ValaTypeSymbol* parent);
gboolean bala_semantic_analyzer_is_in_constructor (ValaSemanticAnalyzer* self);
gboolean bala_semantic_analyzer_is_in_destructor (ValaSemanticAnalyzer* self);
gboolean bala_semantic_analyzer_is_reference_type_argument (ValaSemanticAnalyzer* self,
                                                            ValaDataType* type_arg);
gboolean bala_semantic_analyzer_is_nullable_value_type_argument (ValaSemanticAnalyzer* self,
                                                                 ValaDataType* type_arg);
gboolean bala_semantic_analyzer_is_signed_integer_type_argument (ValaSemanticAnalyzer* self,
                                                                 ValaDataType* type_arg);
gboolean bala_semantic_analyzer_is_unsigned_integer_type_argument (ValaSemanticAnalyzer* self,
                                                                   ValaDataType* type_arg);
void bala_semantic_analyzer_check_type (ValaSemanticAnalyzer* self,
                                        ValaDataType* type);
void bala_semantic_analyzer_check_type_arguments (ValaSemanticAnalyzer* self,
                                                  ValaMemberAccess* access);
ValaBlock* bala_signal_get_body (ValaSignal* self);
void bala_signal_set_body (ValaSignal* self,
                           ValaBlock* value);
gboolean bala_signal_get_is_virtual (ValaSignal* self);
void bala_signal_set_is_virtual (ValaSignal* self,
                                 gboolean value);
ValaMethod* bala_signal_get_default_handler (ValaSignal* self);
ValaMethod* bala_signal_get_emitter (ValaSignal* self);
ValaSignal* bala_signal_new (const gchar* name,
                             ValaDataType* return_type,
                             ValaSourceReference* source_reference,
                             ValaComment* comment);
ValaSignal* bala_signal_construct (GType object_type,
                                   const gchar* name,
                                   ValaDataType* return_type,
                                   ValaSourceReference* source_reference,
                                   ValaComment* comment);
ValaDelegate* bala_signal_get_delegate (ValaSignal* self,
                                        ValaDataType* sender_type,
                                        ValaCodeNode* node_reference);
GType bala_signal_type_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaSignalType, bala_code_node_unref)
ValaSignal* bala_signal_type_get_signal_symbol (ValaSignalType* self);
ValaSignalType* bala_signal_type_new (ValaSignal* signal_symbol);
ValaSignalType* bala_signal_type_construct (GType object_type,
                                            ValaSignal* signal_symbol);
ValaDelegateType* bala_signal_type_get_handler_type (ValaSignalType* self);
ValaDataType* bala_sizeof_expression_get_type_reference (ValaSizeofExpression* self);
void bala_sizeof_expression_set_type_reference (ValaSizeofExpression* self,
                                                ValaDataType* value);
ValaSizeofExpression* bala_sizeof_expression_new (ValaDataType* type,
                                                  ValaSourceReference* source);
ValaSizeofExpression* bala_sizeof_expression_construct (GType object_type,
                                                        ValaDataType* type,
                                                        ValaSourceReference* source);
ValaExpression* bala_slice_expression_get_container (ValaSliceExpression* self);
void bala_slice_expression_set_container (ValaSliceExpression* self,
                                          ValaExpression* value);
ValaExpression* bala_slice_expression_get_start (ValaSliceExpression* self);
ValaExpression* bala_slice_expression_get_stop (ValaSliceExpression* self);
ValaSliceExpression* bala_slice_expression_new (ValaExpression* container,
                                                ValaExpression* start,
                                                ValaExpression* stop,
                                                ValaSourceReference* source_reference);
ValaSliceExpression* bala_slice_expression_construct (GType object_type,
                                                      ValaExpression* container,
                                                      ValaExpression* start,
                                                      ValaExpression* stop,
                                                      ValaSourceReference* source_reference);
const gchar* bala_source_file_get_filename (ValaSourceFile* self);
void bala_source_file_set_relative_filename (ValaSourceFile* self,
                                             const gchar* value);
const gchar* bala_source_file_get_package_name (ValaSourceFile* self);
void bala_source_file_set_package_name (ValaSourceFile* self,
                                        const gchar* value);
const gchar* bala_source_file_get_installed_version (ValaSourceFile* self);
void bala_source_file_set_installed_version (ValaSourceFile* self,
                                             const gchar* value);
GType bala_source_file_type_get_type (void) G_GNUC_CONST;
ValaSourceFileType bala_source_file_get_file_type (ValaSourceFile* self);
void bala_source_file_set_file_type (ValaSourceFile* self,
                                     ValaSourceFileType value);
gboolean bala_source_file_get_from_commandline (ValaSourceFile* self);
void bala_source_file_set_from_commandline (ValaSourceFile* self,
                                            gboolean value);
const gchar* bala_source_file_get_gir_namespace (ValaSourceFile* self);
void bala_source_file_set_gir_namespace (ValaSourceFile* self,
                                         const gchar* value);
const gchar* bala_source_file_get_gir_version (ValaSourceFile* self);
void bala_source_file_set_gir_version (ValaSourceFile* self,
                                       const gchar* value);
ValaCodeContext* bala_source_file_get_context (ValaSourceFile* self);
void bala_source_file_set_context (ValaSourceFile* self,
                                   ValaCodeContext* value);
const gchar* bala_source_file_get_content (ValaSourceFile* self);
void bala_source_file_set_content (ValaSourceFile* self,
                                   const gchar* value);
gboolean bala_source_file_get_used (ValaSourceFile* self);
void bala_source_file_set_used (ValaSourceFile* self,
                                gboolean value);
ValaList* bala_source_file_get_current_using_directives (ValaSourceFile* self);
void bala_source_file_set_current_using_directives (ValaSourceFile* self,
                                                    ValaList* value);
ValaSourceFile* bala_source_file_new (ValaCodeContext* context,
                                      ValaSourceFileType type,
                                      const gchar* filename,
                                      const gchar* content,
                                      gboolean cmdline);
ValaSourceFile* bala_source_file_construct (GType object_type,
                                            ValaCodeContext* context,
                                            ValaSourceFileType type,
                                            const gchar* filename,
                                            const gchar* content,
                                            gboolean cmdline);
void bala_source_file_add_comment (ValaSourceFile* self,
                                   ValaComment* comment);
ValaList* bala_source_file_get_comments (ValaSourceFile* self);
void bala_source_file_add_using_directive (ValaSourceFile* self,
                                           ValaUsingDirective* ns);
void bala_source_file_add_node (ValaSourceFile* self,
                                ValaCodeNode* node);
void bala_source_file_remove_node (ValaSourceFile* self,
                                   ValaCodeNode* node);
ValaList* bala_source_file_get_nodes (ValaSourceFile* self);
void bala_source_file_accept (ValaSourceFile* self,
                              ValaCodeVisitor* visitor);
void bala_source_file_accept_children (ValaSourceFile* self,
                                       ValaCodeVisitor* visitor);
gchar* bala_source_file_get_relative_filename (ValaSourceFile* self);
gchar* bala_source_file_get_csource_filename (ValaSourceFile* self);
gchar* bala_source_file_get_cinclude_filename (ValaSourceFile* self);
gchar* bala_source_file_get_source_line (ValaSourceFile* self,
                                         gint lineno);
gchar* bala_source_file_get_mapped_contents (ValaSourceFile* self);
gsize bala_source_file_get_mapped_length (ValaSourceFile* self);
gboolean bala_source_file_check (ValaSourceFile* self,
                                 ValaCodeContext* context);
void bala_source_location_init (ValaSourceLocation *self,
                                gchar* _pos,
                                gint _line,
                                gint _column);
gchar* bala_source_location_to_string (ValaSourceLocation *self);
ValaSourceFile* bala_source_reference_get_file (ValaSourceReference* self);
void bala_source_reference_set_file (ValaSourceReference* self,
                                     ValaSourceFile* value);
void bala_source_reference_get_begin (ValaSourceReference* self,
                                      ValaSourceLocation * result);
void bala_source_reference_set_begin (ValaSourceReference* self,
                                      ValaSourceLocation * value);
void bala_source_reference_get_end (ValaSourceReference* self,
                                    ValaSourceLocation * result);
void bala_source_reference_set_end (ValaSourceReference* self,
                                    ValaSourceLocation * value);
ValaList* bala_source_reference_get_using_directives (ValaSourceReference* self);
ValaSourceReference* bala_source_reference_new (ValaSourceFile* _file,
                                                ValaSourceLocation* begin,
                                                ValaSourceLocation* end);
ValaSourceReference* bala_source_reference_construct (GType object_type,
                                                      ValaSourceFile* _file,
                                                      ValaSourceLocation* begin,
                                                      ValaSourceLocation* end);
gboolean bala_source_reference_contains (ValaSourceReference* self,
                                         ValaSourceLocation* location);
gchar* bala_source_reference_to_string (ValaSourceReference* self);
GType bala_statement_list_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaStatementList, bala_code_node_unref)
gint bala_statement_list_get_length (ValaStatementList* self);
ValaStatementList* bala_statement_list_new (ValaSourceReference* source_reference);
ValaStatementList* bala_statement_list_construct (GType object_type,
                                                  ValaSourceReference* source_reference);
ValaStatement* bala_statement_list_get (ValaStatementList* self,
                                        gint index);
void bala_statement_list_set (ValaStatementList* self,
                              gint index,
                              ValaStatement* stmt);
void bala_statement_list_add (ValaStatementList* self,
                              ValaStatement* stmt);
void bala_statement_list_insert (ValaStatementList* self,
                                 gint index,
                                 ValaStatement* stmt);
const gchar* bala_string_literal_get_value (ValaStringLiteral* self);
void bala_string_literal_set_value (ValaStringLiteral* self,
                                    const gchar* value);
gboolean bala_string_literal_get_translate (ValaStringLiteral* self);
void bala_string_literal_set_translate (ValaStringLiteral* self,
                                        gboolean value);
ValaStringLiteral* bala_string_literal_new (const gchar* value,
                                            ValaSourceReference* source_reference);
ValaStringLiteral* bala_string_literal_construct (GType object_type,
                                                  const gchar* value,
                                                  ValaSourceReference* source_reference);
gchar* bala_string_literal_eval (ValaStringLiteral* self);
ValaStringLiteral* bala_string_literal_get_format_literal (ValaExpression* expr);
ValaDataType* bala_struct_get_base_type (ValaStruct* self);
void bala_struct_set_base_type (ValaStruct* self,
                                ValaDataType* value);
ValaStruct* bala_struct_get_base_struct (ValaStruct* self);
ValaCreationMethod* bala_struct_get_default_construction_method (ValaStruct* self);
gboolean bala_struct_get_is_immutable (ValaStruct* self);
void bala_struct_set_is_immutable (ValaStruct* self,
                                   gboolean value);
gint bala_struct_get_width (ValaStruct* self);
void bala_struct_set_width (ValaStruct* self,
                            gint value);
gboolean bala_struct_get_signed (ValaStruct* self);
void bala_struct_set_signed (ValaStruct* self,
                             gboolean value);
gint bala_struct_get_rank (ValaStruct* self);
void bala_struct_set_rank (ValaStruct* self,
                           gint value);
ValaStruct* bala_struct_new (const gchar* name,
                             ValaSourceReference* source_reference,
                             ValaComment* comment);
ValaStruct* bala_struct_construct (GType object_type,
                                   const gchar* name,
                                   ValaSourceReference* source_reference,
                                   ValaComment* comment);
void bala_struct_add_type_parameter (ValaStruct* self,
                                     ValaTypeParameter* p);
ValaList* bala_struct_get_type_parameters (ValaStruct* self);
ValaList* bala_struct_get_fields (ValaStruct* self);
ValaList* bala_struct_get_constants (ValaStruct* self);
ValaList* bala_struct_get_methods (ValaStruct* self);
ValaList* bala_struct_get_properties (ValaStruct* self);
gboolean bala_struct_is_boolean_type (ValaStruct* self);
gboolean bala_struct_is_integer_type (ValaStruct* self);
gboolean bala_struct_is_floating_type (ValaStruct* self);
gboolean bala_struct_is_decimal_floating_type (ValaStruct* self);
gboolean bala_struct_is_simple_type (ValaStruct* self);
void bala_struct_set_simple_type (ValaStruct* self,
                                  gboolean simple_type);
gboolean bala_struct_is_disposable (ValaStruct* self);
ValaStructValueType* bala_struct_value_type_new (ValaStruct* type_symbol);
ValaStructValueType* bala_struct_value_type_construct (GType object_type,
                                                       ValaStruct* type_symbol);
ValaBasicBlock* bala_subroutine_get_entry_block (ValaSubroutine* self);
void bala_subroutine_set_entry_block (ValaSubroutine* self,
                                      ValaBasicBlock* value);
ValaBasicBlock* bala_subroutine_get_return_block (ValaSubroutine* self);
void bala_subroutine_set_return_block (ValaSubroutine* self,
                                       ValaBasicBlock* value);
ValaBasicBlock* bala_subroutine_get_exit_block (ValaSubroutine* self);
void bala_subroutine_set_exit_block (ValaSubroutine* self,
                                     ValaBasicBlock* value);
ValaLocalVariable* bala_subroutine_get_result_var (ValaSubroutine* self);
void bala_subroutine_set_result_var (ValaSubroutine* self,
                                     ValaLocalVariable* value);
gboolean bala_subroutine_get_has_result (ValaSubroutine* self);
ValaSubroutine* bala_subroutine_construct (GType object_type,
                                           const gchar* name,
                                           ValaSourceReference* source_reference,
                                           ValaComment* comment);
ValaBlock* bala_subroutine_get_body (ValaSubroutine* self);
void bala_subroutine_set_body (ValaSubroutine* self,
                               ValaBlock* value);
ValaExpression* bala_switch_label_get_expression (ValaSwitchLabel* self);
void bala_switch_label_set_expression (ValaSwitchLabel* self,
                                       ValaExpression* value);
ValaSwitchSection* bala_switch_label_get_section (ValaSwitchLabel* self);
ValaSwitchLabel* bala_switch_label_new (ValaExpression* expr,
                                        ValaSourceReference* source);
ValaSwitchLabel* bala_switch_label_construct (GType object_type,
                                              ValaExpression* expr,
                                              ValaSourceReference* source);
ValaSwitchLabel* bala_switch_label_new_with_default (ValaSourceReference* source);
ValaSwitchLabel* bala_switch_label_construct_with_default (GType object_type,
                                                           ValaSourceReference* source);
ValaSwitchSection* bala_switch_section_new (ValaSourceReference* source_reference);
ValaSwitchSection* bala_switch_section_construct (GType object_type,
                                                  ValaSourceReference* source_reference);
void bala_switch_section_add_label (ValaSwitchSection* self,
                                    ValaSwitchLabel* label);
ValaList* bala_switch_section_get_labels (ValaSwitchSection* self);
gboolean bala_switch_section_has_default_label (ValaSwitchSection* self);
ValaExpression* bala_switch_statement_get_expression (ValaSwitchStatement* self);
void bala_switch_statement_set_expression (ValaSwitchStatement* self,
                                           ValaExpression* value);
ValaSwitchStatement* bala_switch_statement_new (ValaExpression* expression,
                                                ValaSourceReference* source_reference);
ValaSwitchStatement* bala_switch_statement_construct (GType object_type,
                                                      ValaExpression* expression,
                                                      ValaSourceReference* source_reference);
void bala_switch_statement_add_section (ValaSwitchStatement* self,
                                        ValaSwitchSection* section);
ValaList* bala_switch_statement_get_sections (ValaSwitchStatement* self);
ValaSymbol* bala_symbol_get_parent_symbol (ValaSymbol* self);
ValaScope* bala_symbol_get_owner (ValaSymbol* self);
void bala_symbol_set_owner (ValaSymbol* self,
                            ValaScope* value);
const gchar* bala_symbol_get_name (ValaSymbol* self);
void bala_symbol_set_name (ValaSymbol* self,
                           const gchar* value);
gboolean bala_symbol_get_active (ValaSymbol* self);
void bala_symbol_set_active (ValaSymbol* self,
                             gboolean value);
gboolean bala_symbol_get_used (ValaSymbol* self);
void bala_symbol_set_used (ValaSymbol* self,
                           gboolean value);
gboolean bala_symbol_get_anonymous (ValaSymbol* self);
void bala_symbol_set_anonymous (ValaSymbol* self,
                                gboolean value);
GType bala_symbol_accessibility_get_type (void) G_GNUC_CONST;
ValaSymbolAccessibility bala_symbol_get_access (ValaSymbol* self);
void bala_symbol_set_access (ValaSymbol* self,
                             ValaSymbolAccessibility value);
ValaComment* bala_symbol_get_comment (ValaSymbol* self);
void bala_symbol_set_comment (ValaSymbol* self,
                              ValaComment* value);
gpointer bala_version_attribute_ref (gpointer instance);
void bala_version_attribute_unref (gpointer instance);
GParamSpec* bala_param_spec_version_attribute (const gchar* name,
                                               const gchar* nick,
                                               const gchar* blurb,
                                               GType object_type,
                                               GParamFlags flags);
void bala_value_set_version_attribute (GValue* value,
                                       gpointer v_object);
void bala_value_take_version_attribute (GValue* value,
                                        gpointer v_object);
gpointer bala_value_get_version_attribute (const GValue* value);
GType bala_version_attribute_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaVersionAttribute, bala_version_attribute_unref)
ValaVersionAttribute* bala_symbol_get_version (ValaSymbol* self);
gboolean bala_symbol_get_hides (ValaSymbol* self);
void bala_symbol_set_hides (ValaSymbol* self,
                            gboolean value);
gboolean bala_symbol_is_internal_symbol (ValaSymbol* self);
gboolean bala_symbol_is_private_symbol (ValaSymbol* self);
ValaScope* bala_symbol_get_scope (ValaSymbol* self);
gboolean bala_symbol_get_is_extern (ValaSymbol* self);
void bala_symbol_set_is_extern (ValaSymbol* self,
                                gboolean value);
gboolean bala_symbol_get_external (ValaSymbol* self);
void bala_symbol_set_external (ValaSymbol* self,
                               gboolean value);
gboolean bala_symbol_get_external_package (ValaSymbol* self);
gboolean bala_symbol_get_from_commandline (ValaSymbol* self);
ValaSourceFileType bala_symbol_get_source_type (ValaSymbol* self);
ValaSymbol* bala_symbol_construct (GType object_type,
                                   const gchar* name,
                                   ValaSourceReference* source_reference,
                                   ValaComment* comment);
gchar* bala_symbol_get_full_name (ValaSymbol* self);
gchar* bala_symbol_camel_case_to_lower_case (const gchar* camel_case);
gchar* bala_symbol_lower_case_to_camel_case (const gchar* lower_case);
gboolean bala_symbol_equal_func (ValaSymbol* a,
                                 ValaSymbol* b);
guint bala_symbol_hash_func (ValaSymbol* s);
ValaScope* bala_symbol_get_top_accessible_scope (ValaSymbol* self,
                                                 gboolean is_internal);
gboolean bala_symbol_is_instance_member (ValaSymbol* self);
gboolean bala_symbol_is_class_member (ValaSymbol* self);
ValaSymbol* bala_symbol_get_hidden_member (ValaSymbol* self);
gboolean bala_symbol_is_accessible (ValaSymbol* self,
                                    ValaSymbol* sym);
void bala_symbol_add_namespace (ValaSymbol* self,
                                ValaNamespace* ns);
void bala_symbol_add_class (ValaSymbol* self,
                            ValaClass* cl);
void bala_symbol_add_interface (ValaSymbol* self,
                                ValaInterface* iface);
void bala_symbol_add_struct (ValaSymbol* self,
                             ValaStruct* st);
void bala_symbol_add_enum (ValaSymbol* self,
                           ValaEnum* en);
void bala_symbol_add_error_domain (ValaSymbol* self,
                                   ValaErrorDomain* edomain);
void bala_symbol_add_delegate (ValaSymbol* self,
                               ValaDelegate* d);
void bala_symbol_add_constant (ValaSymbol* self,
                               ValaConstant* constant);
void bala_symbol_add_field (ValaSymbol* self,
                            ValaField* f);
void bala_symbol_add_method (ValaSymbol* self,
                             ValaMethod* m);
void bala_symbol_add_property (ValaSymbol* self,
                               ValaProperty* prop);
void bala_symbol_add_signal (ValaSymbol* self,
                             ValaSignal* sig);
void bala_symbol_add_constructor (ValaSymbol* self,
                                  ValaConstructor* c);
void bala_symbol_add_destructor (ValaSymbol* self,
                                 ValaDestructor* d);
const gchar* bala_symbol_accessibility_to_string (ValaSymbolAccessibility self);
void bala_symbol_resolver_resolve (ValaSymbolResolver* self,
                                   ValaCodeContext* context);
ValaSymbolResolver* bala_symbol_resolver_new (void);
ValaSymbolResolver* bala_symbol_resolver_construct (GType object_type);
ValaDataType* bala_target_value_get_value_type (ValaTargetValue* self);
void bala_target_value_set_value_type (ValaTargetValue* self,
                                       ValaDataType* value);
ValaDataType* bala_target_value_get_actual_value_type (ValaTargetValue* self);
void bala_target_value_set_actual_value_type (ValaTargetValue* self,
                                              ValaDataType* value);
ValaTargetValue* bala_target_value_construct (GType object_type,
                                              ValaDataType* value_type);
ValaTemplate* bala_template_new (ValaSourceReference* source_reference);
ValaTemplate* bala_template_construct (GType object_type,
                                       ValaSourceReference* source_reference);
void bala_template_add_expression (ValaTemplate* self,
                                   ValaExpression* expr);
ValaList* bala_template_get_expressions (ValaTemplate* self);
ValaExpression* bala_throw_statement_get_error_expression (ValaThrowStatement* self);
void bala_throw_statement_set_error_expression (ValaThrowStatement* self,
                                                ValaExpression* value);
ValaThrowStatement* bala_throw_statement_new (ValaExpression* error_expression,
                                              ValaSourceReference* source_reference);
ValaThrowStatement* bala_throw_statement_construct (GType object_type,
                                                    ValaExpression* error_expression,
                                                    ValaSourceReference* source_reference);
const gchar* bala_token_type_to_string (ValaTokenType self);
GType bala_traverse_visitor_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaTraverseVisitor, bala_code_visitor_unref)
GType bala_traverse_status_get_type (void) G_GNUC_CONST;
ValaTraverseVisitor* bala_traverse_visitor_new (ValaTraverseFunc func,
                                                gpointer func_target,
                                                GDestroyNotify func_target_destroy_notify);
ValaTraverseVisitor* bala_traverse_visitor_construct (GType object_type,
                                                      ValaTraverseFunc func,
                                                      gpointer func_target,
                                                      GDestroyNotify func_target_destroy_notify);
ValaBlock* bala_try_statement_get_body (ValaTryStatement* self);
void bala_try_statement_set_body (ValaTryStatement* self,
                                  ValaBlock* value);
ValaBlock* bala_try_statement_get_finally_body (ValaTryStatement* self);
void bala_try_statement_set_finally_body (ValaTryStatement* self,
                                          ValaBlock* value);
gboolean bala_try_statement_get_after_try_block_reachable (ValaTryStatement* self);
void bala_try_statement_set_after_try_block_reachable (ValaTryStatement* self,
                                                       gboolean value);
ValaTryStatement* bala_try_statement_new (ValaBlock* body,
                                          ValaBlock* finally_body,
                                          ValaSourceReference* source_reference);
ValaTryStatement* bala_try_statement_construct (GType object_type,
                                                ValaBlock* body,
                                                ValaBlock* finally_body,
                                                ValaSourceReference* source_reference);
void bala_try_statement_add_catch_clause (ValaTryStatement* self,
                                          ValaCatchClause* clause);
ValaList* bala_try_statement_get_catch_clauses (ValaTryStatement* self);
ValaTuple* bala_tuple_new (ValaSourceReference* source_reference);
ValaTuple* bala_tuple_construct (GType object_type,
                                 ValaSourceReference* source_reference);
void bala_tuple_add_expression (ValaTuple* self,
                                ValaExpression* expr);
ValaList* bala_tuple_get_expressions (ValaTuple* self);
ValaExpression* bala_typecheck_get_expression (ValaTypeCheck* self);
void bala_typecheck_set_expression (ValaTypeCheck* self,
                                    ValaExpression* value);
ValaDataType* bala_typecheck_get_type_reference (ValaTypeCheck* self);
void bala_typecheck_set_type_reference (ValaTypeCheck* self,
                                        ValaDataType* value);
ValaTypeCheck* bala_typecheck_new (ValaExpression* expr,
                                   ValaDataType* type,
                                   ValaSourceReference* source);
ValaTypeCheck* bala_typecheck_construct (GType object_type,
                                         ValaExpression* expr,
                                         ValaDataType* type,
                                         ValaSourceReference* source);
ValaDataType* bala_typeof_expression_get_type_reference (ValaTypeofExpression* self);
void bala_typeof_expression_set_type_reference (ValaTypeofExpression* self,
                                                ValaDataType* value);
ValaTypeofExpression* bala_typeof_expression_new (ValaDataType* type,
                                                  ValaSourceReference* source);
ValaTypeofExpression* bala_typeof_expression_construct (GType object_type,
                                                        ValaDataType* type,
                                                        ValaSourceReference* source);
ValaTypeParameter* bala_typeparameter_new (const gchar* name,
                                           ValaSourceReference* source_reference);
ValaTypeParameter* bala_typeparameter_construct (GType object_type,
                                                 const gchar* name,
                                                 ValaSourceReference* source_reference);
gboolean bala_typeparameter_equals (ValaTypeParameter* self,
                                    ValaTypeParameter* param2);
ValaTypeSymbol* bala_typesymbol_construct (GType object_type,
                                           const gchar* name,
                                           ValaSourceReference* source_reference,
                                           ValaComment* comment);
gboolean bala_typesymbol_is_reference_type (ValaTypeSymbol* self);
gboolean bala_typesymbol_is_subtype_of (ValaTypeSymbol* self,
                                        ValaTypeSymbol* t);
gint bala_typesymbol_get_type_parameter_index (ValaTypeSymbol* self,
                                               const gchar* name);
GType bala_unary_operator_get_type (void) G_GNUC_CONST;
ValaUnaryOperator bala_unary_expression_get_operator (ValaUnaryExpression* self);
void bala_unary_expression_set_operator (ValaUnaryExpression* self,
                                         ValaUnaryOperator value);
ValaExpression* bala_unary_expression_get_inner (ValaUnaryExpression* self);
void bala_unary_expression_set_inner (ValaUnaryExpression* self,
                                      ValaExpression* value);
ValaUnaryExpression* bala_unary_expression_new (ValaUnaryOperator op,
                                                ValaExpression* _inner,
                                                ValaSourceReference* source);
ValaUnaryExpression* bala_unary_expression_construct (GType object_type,
                                                      ValaUnaryOperator op,
                                                      ValaExpression* _inner,
                                                      ValaSourceReference* source);
const gchar* bala_unary_operator_to_string (ValaUnaryOperator self);
ValaExpression* bala_unlock_statement_get_resource (ValaUnlockStatement* self);
void bala_unlock_statement_set_resource (ValaUnlockStatement* self,
                                         ValaExpression* value);
ValaUnlockStatement* bala_unlock_statement_new (ValaExpression* resource,
                                                ValaSourceReference* source_reference);
ValaUnlockStatement* bala_unlock_statement_construct (GType object_type,
                                                      ValaExpression* resource,
                                                      ValaSourceReference* source_reference);
GType bala_unresolved_symbol_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaUnresolvedSymbol, bala_code_node_unref)
ValaUnresolvedSymbol* bala_unresolved_symbol_get_inner (ValaUnresolvedSymbol* self);
void bala_unresolved_symbol_set_inner (ValaUnresolvedSymbol* self,
                                       ValaUnresolvedSymbol* value);
gboolean bala_unresolved_symbol_get_qualified (ValaUnresolvedSymbol* self);
void bala_unresolved_symbol_set_qualified (ValaUnresolvedSymbol* self,
                                           gboolean value);
ValaUnresolvedSymbol* bala_unresolved_symbol_new (ValaUnresolvedSymbol* inner,
                                                  const gchar* name,
                                                  ValaSourceReference* source_reference);
ValaUnresolvedSymbol* bala_unresolved_symbol_construct (GType object_type,
                                                        ValaUnresolvedSymbol* inner,
                                                        const gchar* name,
                                                        ValaSourceReference* source_reference);
ValaUnresolvedSymbol* bala_unresolved_symbol_new_from_expression (ValaExpression* expr);
ValaUnresolvedSymbol* bala_unresolved_symbol_copy (ValaUnresolvedSymbol* self);
GType bala_unresolved_type_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaUnresolvedType, bala_code_node_unref)
ValaUnresolvedSymbol* bala_unresolved_type_get_unresolved_symbol (ValaUnresolvedType* self);
void bala_unresolved_type_set_unresolved_symbol (ValaUnresolvedType* self,
                                                 ValaUnresolvedSymbol* value);
ValaUnresolvedType* bala_unresolved_type_new (void);
ValaUnresolvedType* bala_unresolved_type_construct (GType object_type);
ValaUnresolvedType* bala_unresolved_type_new_from_symbol (ValaUnresolvedSymbol* symbol,
                                                          ValaSourceReference* source);
ValaUnresolvedType* bala_unresolved_type_construct_from_symbol (GType object_type,
                                                                ValaUnresolvedSymbol* symbol,
                                                                ValaSourceReference* source);
ValaUnresolvedType* bala_unresolved_type_new_from_expression (ValaExpression* expr);
ValaUsedAttr* bala_used_attr_new (void);
ValaUsedAttr* bala_used_attr_construct (GType object_type);
void bala_used_attr_mark (ValaUsedAttr* self,
                          const gchar* attribute,
                          const gchar* argument);
void bala_used_attr_check_unused (ValaUsedAttr* self,
                                  ValaCodeContext* context);
ValaSymbol* bala_using_directive_get_namespace_symbol (ValaUsingDirective* self);
void bala_using_directive_set_namespace_symbol (ValaUsingDirective* self,
                                                ValaSymbol* value);
ValaUsingDirective* bala_using_directive_new (ValaSymbol* namespace_symbol,
                                              ValaSourceReference* source_reference);
ValaUsingDirective* bala_using_directive_construct (GType object_type,
                                                    ValaSymbol* namespace_symbol,
                                                    ValaSourceReference* source_reference);
ValaValueType* bala_value_type_construct (GType object_type,
                                          ValaTypeSymbol* type_symbol);
ValaExpression* bala_variable_get_initializer (ValaVariable* self);
void bala_variable_set_initializer (ValaVariable* self,
                                    ValaExpression* value);
ValaDataType* bala_variable_get_variable_type (ValaVariable* self);
void bala_variable_set_variable_type (ValaVariable* self,
                                      ValaDataType* value);
gboolean bala_variable_get_single_assignment (ValaVariable* self);
void bala_variable_set_single_assignment (ValaVariable* self,
                                          gboolean value);
ValaVariable* bala_variable_new (ValaDataType* variable_type,
                                 const gchar* name,
                                 ValaExpression* initializer,
                                 ValaSourceReference* source_reference,
                                 ValaComment* comment);
ValaVariable* bala_variable_construct (GType object_type,
                                       ValaDataType* variable_type,
                                       const gchar* name,
                                       ValaExpression* initializer,
                                       ValaSourceReference* source_reference,
                                       ValaComment* comment);
GType bala_var_type_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaVarType, bala_code_node_unref)
ValaVarType* bala_var_type_new (gboolean value_owned);
ValaVarType* bala_var_type_construct (GType object_type,
                                      gboolean value_owned);
#define BALA_MAJOR_VERSION 0
#define BALA_MINOR_VERSION 48
#define BALA_MICRO_VERSION 17
#define BALA_API_VERSION "0.48"
#define BALA_BUILD_VERSION "0.48.17"
guint bala_get_major_version (void);
guint bala_get_minor_version (void);
guint bala_get_micro_version (void);
const gchar* bala_get_build_version (void);
const gchar* bala_check_version (guint required_major,
                                 guint required_minor,
                                 guint required_micro);
ValaVersionAttribute* bala_version_attribute_new (ValaSymbol* symbol);
ValaVersionAttribute* bala_version_attribute_construct (GType object_type,
                                                        ValaSymbol* symbol);
gboolean bala_version_attribute_get_deprecated (ValaVersionAttribute* self);
void bala_version_attribute_set_deprecated (ValaVersionAttribute* self,
                                            gboolean value);
gchar* bala_version_attribute_get_deprecated_since (ValaVersionAttribute* self);
void bala_version_attribute_set_deprecated_since (ValaVersionAttribute* self,
                                                  const gchar* value);
gchar* bala_version_attribute_get_replacement (ValaVersionAttribute* self);
void bala_version_attribute_set_replacement (ValaVersionAttribute* self,
                                             const gchar* value);
gboolean bala_version_attribute_get_experimental (ValaVersionAttribute* self);
void bala_version_attribute_set_experimental (ValaVersionAttribute* self,
                                              gboolean value);
gchar* bala_version_attribute_get_experimental_until (ValaVersionAttribute* self);
void bala_version_attribute_set_experimental_until (ValaVersionAttribute* self,
                                                    const gchar* value);
gchar* bala_version_attribute_get_since (ValaVersionAttribute* self);
void bala_version_attribute_set_since (ValaVersionAttribute* self,
                                       const gchar* value);
gboolean bala_version_attribute_check (ValaVersionAttribute* self,
                                       ValaSourceReference* source_ref);
gint bala_version_attribute_cmp_versions (const gchar* v1str,
                                          const gchar* v2str);
GType bala_void_type_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaVoidType, bala_code_node_unref)
ValaVoidType* bala_void_type_new (ValaSourceReference* source_reference);
ValaVoidType* bala_void_type_construct (GType object_type,
                                        ValaSourceReference* source_reference);
ValaExpression* bala_while_statement_get_condition (ValaWhileStatement* self);
void bala_while_statement_set_condition (ValaWhileStatement* self,
                                         ValaExpression* value);
ValaBlock* bala_while_statement_get_body (ValaWhileStatement* self);
void bala_while_statement_set_body (ValaWhileStatement* self,
                                    ValaBlock* value);
ValaWhileStatement* bala_while_statement_new (ValaExpression* condition,
                                              ValaBlock* body,
                                              ValaSourceReference* source_reference);
ValaWhileStatement* bala_while_statement_construct (GType object_type,
                                                    ValaExpression* condition,
                                                    ValaBlock* body,
                                                    ValaSourceReference* source_reference);
ValaYieldStatement* bala_yield_statement_new (ValaSourceReference* source_reference);
ValaYieldStatement* bala_yield_statement_construct (GType object_type,
                                                    ValaSourceReference* source_reference);

G_END_DECLS

#endif
