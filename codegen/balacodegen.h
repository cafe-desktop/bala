/* balacodegen.h generated by balac, the Vala compiler, do not modify */

#ifndef __BALACODEGEN_H__
#define __BALACODEGEN_H__

#include <bala.h>
#include <stdlib.h>
#include <string.h>
#include <glib.h>
#include <float.h>
#include <math.h>
#include <glib-object.h>
#include <balaccode.h>
#include <balagee.h>

G_BEGIN_DECLS

#define BALA_TYPE_CCODE_BASE_MODULE (bala_ccode_base_module_get_type ())
#define BALA_CCODE_BASE_MODULE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_CCODE_BASE_MODULE, ValaCCodeBaseModule))
#define BALA_CCODE_BASE_MODULE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_CCODE_BASE_MODULE, ValaCCodeBaseModuleClass))
#define BALA_IS_CCODE_BASE_MODULE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_CCODE_BASE_MODULE))
#define BALA_IS_CCODE_BASE_MODULE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_CCODE_BASE_MODULE))
#define BALA_CCODE_BASE_MODULE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_CCODE_BASE_MODULE, ValaCCodeBaseModuleClass))

typedef struct _ValaCCodeBaseModule ValaCCodeBaseModule;
typedef struct _ValaCCodeBaseModuleClass ValaCCodeBaseModuleClass;
typedef struct _ValaCCodeBaseModulePrivate ValaCCodeBaseModulePrivate;

#define BALA_CCODE_BASE_MODULE_TYPE_EMIT_CONTEXT (bala_ccode_base_module_emit_context_get_type ())
#define BALA_CCODE_BASE_MODULE_EMIT_CONTEXT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_CCODE_BASE_MODULE_TYPE_EMIT_CONTEXT, ValaCCodeBaseModuleEmitContext))
#define BALA_CCODE_BASE_MODULE_EMIT_CONTEXT_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_CCODE_BASE_MODULE_TYPE_EMIT_CONTEXT, ValaCCodeBaseModuleEmitContextClass))
#define BALA_CCODE_BASE_MODULE_IS_EMIT_CONTEXT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_CCODE_BASE_MODULE_TYPE_EMIT_CONTEXT))
#define BALA_CCODE_BASE_MODULE_IS_EMIT_CONTEXT_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_CCODE_BASE_MODULE_TYPE_EMIT_CONTEXT))
#define BALA_CCODE_BASE_MODULE_EMIT_CONTEXT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_CCODE_BASE_MODULE_TYPE_EMIT_CONTEXT, ValaCCodeBaseModuleEmitContextClass))

typedef struct _ValaCCodeBaseModuleEmitContext ValaCCodeBaseModuleEmitContext;
typedef struct _ValaCCodeBaseModuleEmitContextClass ValaCCodeBaseModuleEmitContextClass;

#define BALA_TYPE_CCODE_STRUCT_MODULE (bala_ccode_struct_module_get_type ())
#define BALA_CCODE_STRUCT_MODULE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_CCODE_STRUCT_MODULE, ValaCCodeStructModule))
#define BALA_CCODE_STRUCT_MODULE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_CCODE_STRUCT_MODULE, ValaCCodeStructModuleClass))
#define BALA_IS_CCODE_STRUCT_MODULE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_CCODE_STRUCT_MODULE))
#define BALA_IS_CCODE_STRUCT_MODULE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_CCODE_STRUCT_MODULE))
#define BALA_CCODE_STRUCT_MODULE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_CCODE_STRUCT_MODULE, ValaCCodeStructModuleClass))

typedef struct _ValaCCodeStructModule ValaCCodeStructModule;
typedef struct _ValaCCodeStructModuleClass ValaCCodeStructModuleClass;
typedef struct _ValaCCodeStructModulePrivate ValaCCodeStructModulePrivate;

#define BALA_TYPE_CCODE_METHOD_MODULE (bala_ccode_method_module_get_type ())
#define BALA_CCODE_METHOD_MODULE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_CCODE_METHOD_MODULE, ValaCCodeMethodModule))
#define BALA_CCODE_METHOD_MODULE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_CCODE_METHOD_MODULE, ValaCCodeMethodModuleClass))
#define BALA_IS_CCODE_METHOD_MODULE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_CCODE_METHOD_MODULE))
#define BALA_IS_CCODE_METHOD_MODULE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_CCODE_METHOD_MODULE))
#define BALA_CCODE_METHOD_MODULE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_CCODE_METHOD_MODULE, ValaCCodeMethodModuleClass))

typedef struct _ValaCCodeMethodModule ValaCCodeMethodModule;
typedef struct _ValaCCodeMethodModuleClass ValaCCodeMethodModuleClass;
typedef struct _ValaCCodeMethodModulePrivate ValaCCodeMethodModulePrivate;

#define BALA_TYPE_CCODE_CONTROL_FLOW_MODULE (bala_ccode_control_flow_module_get_type ())
#define BALA_CCODE_CONTROL_FLOW_MODULE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_CCODE_CONTROL_FLOW_MODULE, ValaCCodeControlFlowModule))
#define BALA_CCODE_CONTROL_FLOW_MODULE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_CCODE_CONTROL_FLOW_MODULE, ValaCCodeControlFlowModuleClass))
#define BALA_IS_CCODE_CONTROL_FLOW_MODULE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_CCODE_CONTROL_FLOW_MODULE))
#define BALA_IS_CCODE_CONTROL_FLOW_MODULE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_CCODE_CONTROL_FLOW_MODULE))
#define BALA_CCODE_CONTROL_FLOW_MODULE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_CCODE_CONTROL_FLOW_MODULE, ValaCCodeControlFlowModuleClass))

typedef struct _ValaCCodeControlFlowModule ValaCCodeControlFlowModule;
typedef struct _ValaCCodeControlFlowModuleClass ValaCCodeControlFlowModuleClass;
typedef struct _ValaCCodeControlFlowModulePrivate ValaCCodeControlFlowModulePrivate;

#define BALA_TYPE_CCODE_MEMBER_ACCESS_MODULE (bala_ccode_member_access_module_get_type ())
#define BALA_CCODE_MEMBER_ACCESS_MODULE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_CCODE_MEMBER_ACCESS_MODULE, ValaCCodeMemberAccessModule))
#define BALA_CCODE_MEMBER_ACCESS_MODULE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_CCODE_MEMBER_ACCESS_MODULE, ValaCCodeMemberAccessModuleClass))
#define BALA_IS_CCODE_MEMBER_ACCESS_MODULE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_CCODE_MEMBER_ACCESS_MODULE))
#define BALA_IS_CCODE_MEMBER_ACCESS_MODULE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_CCODE_MEMBER_ACCESS_MODULE))
#define BALA_CCODE_MEMBER_ACCESS_MODULE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_CCODE_MEMBER_ACCESS_MODULE, ValaCCodeMemberAccessModuleClass))

typedef struct _ValaCCodeMemberAccessModule ValaCCodeMemberAccessModule;
typedef struct _ValaCCodeMemberAccessModuleClass ValaCCodeMemberAccessModuleClass;
typedef struct _ValaCCodeMemberAccessModulePrivate ValaCCodeMemberAccessModulePrivate;

#define BALA_TYPE_CCODE_ASSIGNMENT_MODULE (bala_ccode_assignment_module_get_type ())
#define BALA_CCODE_ASSIGNMENT_MODULE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_CCODE_ASSIGNMENT_MODULE, ValaCCodeAssignmentModule))
#define BALA_CCODE_ASSIGNMENT_MODULE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_CCODE_ASSIGNMENT_MODULE, ValaCCodeAssignmentModuleClass))
#define BALA_IS_CCODE_ASSIGNMENT_MODULE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_CCODE_ASSIGNMENT_MODULE))
#define BALA_IS_CCODE_ASSIGNMENT_MODULE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_CCODE_ASSIGNMENT_MODULE))
#define BALA_CCODE_ASSIGNMENT_MODULE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_CCODE_ASSIGNMENT_MODULE, ValaCCodeAssignmentModuleClass))

typedef struct _ValaCCodeAssignmentModule ValaCCodeAssignmentModule;
typedef struct _ValaCCodeAssignmentModuleClass ValaCCodeAssignmentModuleClass;
typedef struct _ValaCCodeAssignmentModulePrivate ValaCCodeAssignmentModulePrivate;

#define BALA_TYPE_CCODE_METHOD_CALL_MODULE (bala_ccode_method_call_module_get_type ())
#define BALA_CCODE_METHOD_CALL_MODULE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_CCODE_METHOD_CALL_MODULE, ValaCCodeMethodCallModule))
#define BALA_CCODE_METHOD_CALL_MODULE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_CCODE_METHOD_CALL_MODULE, ValaCCodeMethodCallModuleClass))
#define BALA_IS_CCODE_METHOD_CALL_MODULE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_CCODE_METHOD_CALL_MODULE))
#define BALA_IS_CCODE_METHOD_CALL_MODULE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_CCODE_METHOD_CALL_MODULE))
#define BALA_CCODE_METHOD_CALL_MODULE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_CCODE_METHOD_CALL_MODULE, ValaCCodeMethodCallModuleClass))

typedef struct _ValaCCodeMethodCallModule ValaCCodeMethodCallModule;
typedef struct _ValaCCodeMethodCallModuleClass ValaCCodeMethodCallModuleClass;
typedef struct _ValaCCodeMethodCallModulePrivate ValaCCodeMethodCallModulePrivate;

#define BALA_TYPE_CCODE_ARRAY_MODULE (bala_ccode_array_module_get_type ())
#define BALA_CCODE_ARRAY_MODULE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_CCODE_ARRAY_MODULE, ValaCCodeArrayModule))
#define BALA_CCODE_ARRAY_MODULE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_CCODE_ARRAY_MODULE, ValaCCodeArrayModuleClass))
#define BALA_IS_CCODE_ARRAY_MODULE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_CCODE_ARRAY_MODULE))
#define BALA_IS_CCODE_ARRAY_MODULE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_CCODE_ARRAY_MODULE))
#define BALA_CCODE_ARRAY_MODULE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_CCODE_ARRAY_MODULE, ValaCCodeArrayModuleClass))

typedef struct _ValaCCodeArrayModule ValaCCodeArrayModule;
typedef struct _ValaCCodeArrayModuleClass ValaCCodeArrayModuleClass;
typedef struct _ValaCCodeArrayModulePrivate ValaCCodeArrayModulePrivate;

#define BALA_TYPE_CCODE_ATTRIBUTE (bala_ccode_attribute_get_type ())
#define BALA_CCODE_ATTRIBUTE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_CCODE_ATTRIBUTE, ValaCCodeAttribute))
#define BALA_CCODE_ATTRIBUTE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_CCODE_ATTRIBUTE, ValaCCodeAttributeClass))
#define BALA_IS_CCODE_ATTRIBUTE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_CCODE_ATTRIBUTE))
#define BALA_IS_CCODE_ATTRIBUTE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_CCODE_ATTRIBUTE))
#define BALA_CCODE_ATTRIBUTE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_CCODE_ATTRIBUTE, ValaCCodeAttributeClass))

typedef struct _ValaCCodeAttribute ValaCCodeAttribute;
typedef struct _ValaCCodeAttributeClass ValaCCodeAttributeClass;
typedef struct _ValaCCodeAttributePrivate ValaCCodeAttributePrivate;
typedef struct _ValaCCodeBaseModuleEmitContextPrivate ValaCCodeBaseModuleEmitContextPrivate;

#define BALA_TYPE_CCODE_COMPILER (bala_ccode_compiler_get_type ())
#define BALA_CCODE_COMPILER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_CCODE_COMPILER, ValaCCodeCompiler))
#define BALA_CCODE_COMPILER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_CCODE_COMPILER, ValaCCodeCompilerClass))
#define BALA_IS_CCODE_COMPILER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_CCODE_COMPILER))
#define BALA_IS_CCODE_COMPILER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_CCODE_COMPILER))
#define BALA_CCODE_COMPILER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_CCODE_COMPILER, ValaCCodeCompilerClass))

typedef struct _ValaCCodeCompiler ValaCCodeCompiler;
typedef struct _ValaCCodeCompilerClass ValaCCodeCompilerClass;
typedef struct _ValaCCodeCompilerPrivate ValaCCodeCompilerPrivate;

#define BALA_TYPE_CCODE_DELEGATE_MODULE (bala_ccode_delegate_module_get_type ())
#define BALA_CCODE_DELEGATE_MODULE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_CCODE_DELEGATE_MODULE, ValaCCodeDelegateModule))
#define BALA_CCODE_DELEGATE_MODULE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_CCODE_DELEGATE_MODULE, ValaCCodeDelegateModuleClass))
#define BALA_IS_CCODE_DELEGATE_MODULE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_CCODE_DELEGATE_MODULE))
#define BALA_IS_CCODE_DELEGATE_MODULE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_CCODE_DELEGATE_MODULE))
#define BALA_CCODE_DELEGATE_MODULE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_CCODE_DELEGATE_MODULE, ValaCCodeDelegateModuleClass))

typedef struct _ValaCCodeDelegateModule ValaCCodeDelegateModule;
typedef struct _ValaCCodeDelegateModuleClass ValaCCodeDelegateModuleClass;
typedef struct _ValaCCodeDelegateModulePrivate ValaCCodeDelegateModulePrivate;

#define BALA_TYPE_TYPEREGISTER_FUNCTION (bala_typeregister_function_get_type ())
#define BALA_TYPEREGISTER_FUNCTION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_TYPEREGISTER_FUNCTION, ValaTypeRegisterFunction))
#define BALA_TYPEREGISTER_FUNCTION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_TYPEREGISTER_FUNCTION, ValaTypeRegisterFunctionClass))
#define BALA_IS_TYPEREGISTER_FUNCTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_TYPEREGISTER_FUNCTION))
#define BALA_IS_TYPEREGISTER_FUNCTION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_TYPEREGISTER_FUNCTION))
#define BALA_TYPEREGISTER_FUNCTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_TYPEREGISTER_FUNCTION, ValaTypeRegisterFunctionClass))

typedef struct _ValaTypeRegisterFunction ValaTypeRegisterFunction;
typedef struct _ValaTypeRegisterFunctionClass ValaTypeRegisterFunctionClass;
typedef struct _ValaTypeRegisterFunctionPrivate ValaTypeRegisterFunctionPrivate;

#define BALA_TYPE_CLASS_REGISTER_FUNCTION (bala_class_register_function_get_type ())
#define BALA_CLASS_REGISTER_FUNCTION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_CLASS_REGISTER_FUNCTION, ValaClassRegisterFunction))
#define BALA_CLASS_REGISTER_FUNCTION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_CLASS_REGISTER_FUNCTION, ValaClassRegisterFunctionClass))
#define BALA_IS_CLASS_REGISTER_FUNCTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_CLASS_REGISTER_FUNCTION))
#define BALA_IS_CLASS_REGISTER_FUNCTION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_CLASS_REGISTER_FUNCTION))
#define BALA_CLASS_REGISTER_FUNCTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_CLASS_REGISTER_FUNCTION, ValaClassRegisterFunctionClass))

typedef struct _ValaClassRegisterFunction ValaClassRegisterFunction;
typedef struct _ValaClassRegisterFunctionClass ValaClassRegisterFunctionClass;
typedef struct _ValaClassRegisterFunctionPrivate ValaClassRegisterFunctionPrivate;

#define BALA_TYPE_CTYPE (bala_ctype_get_type ())
#define BALA_CTYPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_CTYPE, ValaCType))
#define BALA_CTYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_CTYPE, ValaCTypeClass))
#define BALA_IS_CTYPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_CTYPE))
#define BALA_IS_CTYPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_CTYPE))
#define BALA_CTYPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_CTYPE, ValaCTypeClass))

typedef struct _ValaCType ValaCType;
typedef struct _ValaCTypeClass ValaCTypeClass;
typedef struct _ValaCTypePrivate ValaCTypePrivate;

#define BALA_TYPE_ENUM_REGISTER_FUNCTION (bala_enum_register_function_get_type ())
#define BALA_ENUM_REGISTER_FUNCTION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_ENUM_REGISTER_FUNCTION, ValaEnumRegisterFunction))
#define BALA_ENUM_REGISTER_FUNCTION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_ENUM_REGISTER_FUNCTION, ValaEnumRegisterFunctionClass))
#define BALA_IS_ENUM_REGISTER_FUNCTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_ENUM_REGISTER_FUNCTION))
#define BALA_IS_ENUM_REGISTER_FUNCTION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_ENUM_REGISTER_FUNCTION))
#define BALA_ENUM_REGISTER_FUNCTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_ENUM_REGISTER_FUNCTION, ValaEnumRegisterFunctionClass))

typedef struct _ValaEnumRegisterFunction ValaEnumRegisterFunction;
typedef struct _ValaEnumRegisterFunctionClass ValaEnumRegisterFunctionClass;
typedef struct _ValaEnumRegisterFunctionPrivate ValaEnumRegisterFunctionPrivate;

#define BALA_TYPE_GERROR_MODULE (bala_gerror_module_get_type ())
#define BALA_GERROR_MODULE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_GERROR_MODULE, ValaGErrorModule))
#define BALA_GERROR_MODULE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_GERROR_MODULE, ValaGErrorModuleClass))
#define BALA_IS_GERROR_MODULE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_GERROR_MODULE))
#define BALA_IS_GERROR_MODULE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_GERROR_MODULE))
#define BALA_GERROR_MODULE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_GERROR_MODULE, ValaGErrorModuleClass))

typedef struct _ValaGErrorModule ValaGErrorModule;
typedef struct _ValaGErrorModuleClass ValaGErrorModuleClass;
typedef struct _ValaGErrorModulePrivate ValaGErrorModulePrivate;

#define BALA_TYPE_GTYPE_MODULE (bala_gtype_module_get_type ())
#define BALA_GTYPE_MODULE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_GTYPE_MODULE, ValaGTypeModule))
#define BALA_GTYPE_MODULE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_GTYPE_MODULE, ValaGTypeModuleClass))
#define BALA_IS_GTYPE_MODULE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_GTYPE_MODULE))
#define BALA_IS_GTYPE_MODULE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_GTYPE_MODULE))
#define BALA_GTYPE_MODULE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_GTYPE_MODULE, ValaGTypeModuleClass))

typedef struct _ValaGTypeModule ValaGTypeModule;
typedef struct _ValaGTypeModuleClass ValaGTypeModuleClass;
typedef struct _ValaGTypeModulePrivate ValaGTypeModulePrivate;

#define BALA_TYPE_GOBJECT_MODULE (bala_gobject_module_get_type ())
#define BALA_GOBJECT_MODULE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_GOBJECT_MODULE, ValaGObjectModule))
#define BALA_GOBJECT_MODULE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_GOBJECT_MODULE, ValaGObjectModuleClass))
#define BALA_IS_GOBJECT_MODULE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_GOBJECT_MODULE))
#define BALA_IS_GOBJECT_MODULE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_GOBJECT_MODULE))
#define BALA_GOBJECT_MODULE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_GOBJECT_MODULE, ValaGObjectModuleClass))

typedef struct _ValaGObjectModule ValaGObjectModule;
typedef struct _ValaGObjectModuleClass ValaGObjectModuleClass;
typedef struct _ValaGObjectModulePrivate ValaGObjectModulePrivate;

#define BALA_TYPE_GSIGNAL_MODULE (bala_gsignal_module_get_type ())
#define BALA_GSIGNAL_MODULE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_GSIGNAL_MODULE, ValaGSignalModule))
#define BALA_GSIGNAL_MODULE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_GSIGNAL_MODULE, ValaGSignalModuleClass))
#define BALA_IS_GSIGNAL_MODULE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_GSIGNAL_MODULE))
#define BALA_IS_GSIGNAL_MODULE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_GSIGNAL_MODULE))
#define BALA_GSIGNAL_MODULE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_GSIGNAL_MODULE, ValaGSignalModuleClass))

typedef struct _ValaGSignalModule ValaGSignalModule;
typedef struct _ValaGSignalModuleClass ValaGSignalModuleClass;
typedef struct _ValaGSignalModulePrivate ValaGSignalModulePrivate;

#define BALA_TYPE_GTK_MODULE (bala_gtk_module_get_type ())
#define BALA_GTK_MODULE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_GTK_MODULE, ValaGtkModule))
#define BALA_GTK_MODULE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_GTK_MODULE, ValaGtkModuleClass))
#define BALA_IS_GTK_MODULE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_GTK_MODULE))
#define BALA_IS_GTK_MODULE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_GTK_MODULE))
#define BALA_GTK_MODULE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_GTK_MODULE, ValaGtkModuleClass))

typedef struct _ValaGtkModule ValaGtkModule;
typedef struct _ValaGtkModuleClass ValaGtkModuleClass;
typedef struct _ValaGtkModulePrivate ValaGtkModulePrivate;

#define BALA_TYPE_GASYNC_MODULE (bala_gasync_module_get_type ())
#define BALA_GASYNC_MODULE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_GASYNC_MODULE, ValaGAsyncModule))
#define BALA_GASYNC_MODULE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_GASYNC_MODULE, ValaGAsyncModuleClass))
#define BALA_IS_GASYNC_MODULE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_GASYNC_MODULE))
#define BALA_IS_GASYNC_MODULE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_GASYNC_MODULE))
#define BALA_GASYNC_MODULE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_GASYNC_MODULE, ValaGAsyncModuleClass))

typedef struct _ValaGAsyncModule ValaGAsyncModule;
typedef struct _ValaGAsyncModuleClass ValaGAsyncModuleClass;
typedef struct _ValaGAsyncModulePrivate ValaGAsyncModulePrivate;

#define BALA_TYPE_GVALUE_MODULE (bala_gvalue_module_get_type ())
#define BALA_GVALUE_MODULE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_GVALUE_MODULE, ValaGValueModule))
#define BALA_GVALUE_MODULE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_GVALUE_MODULE, ValaGValueModuleClass))
#define BALA_IS_GVALUE_MODULE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_GVALUE_MODULE))
#define BALA_IS_GVALUE_MODULE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_GVALUE_MODULE))
#define BALA_GVALUE_MODULE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_GVALUE_MODULE, ValaGValueModuleClass))

typedef struct _ValaGValueModule ValaGValueModule;
typedef struct _ValaGValueModuleClass ValaGValueModuleClass;
typedef struct _ValaGValueModulePrivate ValaGValueModulePrivate;

#define BALA_TYPE_GVARIANT_MODULE (bala_gvariant_module_get_type ())
#define BALA_GVARIANT_MODULE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_GVARIANT_MODULE, ValaGVariantModule))
#define BALA_GVARIANT_MODULE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_GVARIANT_MODULE, ValaGVariantModuleClass))
#define BALA_IS_GVARIANT_MODULE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_GVARIANT_MODULE))
#define BALA_IS_GVARIANT_MODULE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_GVARIANT_MODULE))
#define BALA_GVARIANT_MODULE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_GVARIANT_MODULE, ValaGVariantModuleClass))

typedef struct _ValaGVariantModule ValaGVariantModule;
typedef struct _ValaGVariantModuleClass ValaGVariantModuleClass;
typedef struct _ValaGVariantModulePrivate ValaGVariantModulePrivate;

#define BALA_TYPE_GD_BUS_MODULE (bala_gd_bus_module_get_type ())
#define BALA_GD_BUS_MODULE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_GD_BUS_MODULE, ValaGDBusModule))
#define BALA_GD_BUS_MODULE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_GD_BUS_MODULE, ValaGDBusModuleClass))
#define BALA_IS_GD_BUS_MODULE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_GD_BUS_MODULE))
#define BALA_IS_GD_BUS_MODULE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_GD_BUS_MODULE))
#define BALA_GD_BUS_MODULE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_GD_BUS_MODULE, ValaGDBusModuleClass))

typedef struct _ValaGDBusModule ValaGDBusModule;
typedef struct _ValaGDBusModuleClass ValaGDBusModuleClass;
typedef struct _ValaGDBusModulePrivate ValaGDBusModulePrivate;

#define BALA_TYPE_GD_BUS_CLIENT_MODULE (bala_gd_bus_client_module_get_type ())
#define BALA_GD_BUS_CLIENT_MODULE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_GD_BUS_CLIENT_MODULE, ValaGDBusClientModule))
#define BALA_GD_BUS_CLIENT_MODULE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_GD_BUS_CLIENT_MODULE, ValaGDBusClientModuleClass))
#define BALA_IS_GD_BUS_CLIENT_MODULE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_GD_BUS_CLIENT_MODULE))
#define BALA_IS_GD_BUS_CLIENT_MODULE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_GD_BUS_CLIENT_MODULE))
#define BALA_GD_BUS_CLIENT_MODULE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_GD_BUS_CLIENT_MODULE, ValaGDBusClientModuleClass))

typedef struct _ValaGDBusClientModule ValaGDBusClientModule;
typedef struct _ValaGDBusClientModuleClass ValaGDBusClientModuleClass;
typedef struct _ValaGDBusClientModulePrivate ValaGDBusClientModulePrivate;

#define BALA_TYPE_GD_BUS_SERVER_MODULE (bala_gd_bus_server_module_get_type ())
#define BALA_GD_BUS_SERVER_MODULE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_GD_BUS_SERVER_MODULE, ValaGDBusServerModule))
#define BALA_GD_BUS_SERVER_MODULE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_GD_BUS_SERVER_MODULE, ValaGDBusServerModuleClass))
#define BALA_IS_GD_BUS_SERVER_MODULE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_GD_BUS_SERVER_MODULE))
#define BALA_IS_GD_BUS_SERVER_MODULE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_GD_BUS_SERVER_MODULE))
#define BALA_GD_BUS_SERVER_MODULE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_GD_BUS_SERVER_MODULE, ValaGDBusServerModuleClass))

typedef struct _ValaGDBusServerModule ValaGDBusServerModule;
typedef struct _ValaGDBusServerModuleClass ValaGDBusServerModuleClass;
typedef struct _ValaGDBusServerModulePrivate ValaGDBusServerModulePrivate;

#define BALA_TYPE_GIR_WRITER (bala_gir_writer_get_type ())
#define BALA_GIR_WRITER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_GIR_WRITER, ValaGIRWriter))
#define BALA_GIR_WRITER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_GIR_WRITER, ValaGIRWriterClass))
#define BALA_IS_GIR_WRITER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_GIR_WRITER))
#define BALA_IS_GIR_WRITER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_GIR_WRITER))
#define BALA_GIR_WRITER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_GIR_WRITER, ValaGIRWriterClass))

typedef struct _ValaGIRWriter ValaGIRWriter;
typedef struct _ValaGIRWriterClass ValaGIRWriterClass;
typedef struct _ValaGIRWriterPrivate ValaGIRWriterPrivate;

#define BALA_TYPE_GLIB_VALUE (bala_glib_value_get_type ())
#define BALA_GLIB_VALUE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_GLIB_VALUE, ValaGLibValue))
#define BALA_GLIB_VALUE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_GLIB_VALUE, ValaGLibValueClass))
#define BALA_IS_GLIB_VALUE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_GLIB_VALUE))
#define BALA_IS_GLIB_VALUE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_GLIB_VALUE))
#define BALA_GLIB_VALUE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_GLIB_VALUE, ValaGLibValueClass))

typedef struct _ValaGLibValue ValaGLibValue;
typedef struct _ValaGLibValueClass ValaGLibValueClass;
typedef struct _ValaGLibValuePrivate ValaGLibValuePrivate;

#define BALA_TYPE_INTERFACE_REGISTER_FUNCTION (bala_interface_register_function_get_type ())
#define BALA_INTERFACE_REGISTER_FUNCTION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_INTERFACE_REGISTER_FUNCTION, ValaInterfaceRegisterFunction))
#define BALA_INTERFACE_REGISTER_FUNCTION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_INTERFACE_REGISTER_FUNCTION, ValaInterfaceRegisterFunctionClass))
#define BALA_IS_INTERFACE_REGISTER_FUNCTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_INTERFACE_REGISTER_FUNCTION))
#define BALA_IS_INTERFACE_REGISTER_FUNCTION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_INTERFACE_REGISTER_FUNCTION))
#define BALA_INTERFACE_REGISTER_FUNCTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_INTERFACE_REGISTER_FUNCTION, ValaInterfaceRegisterFunctionClass))

typedef struct _ValaInterfaceRegisterFunction ValaInterfaceRegisterFunction;
typedef struct _ValaInterfaceRegisterFunctionClass ValaInterfaceRegisterFunctionClass;
typedef struct _ValaInterfaceRegisterFunctionPrivate ValaInterfaceRegisterFunctionPrivate;

#define BALA_TYPE_STRUCT_REGISTER_FUNCTION (bala_struct_register_function_get_type ())
#define BALA_STRUCT_REGISTER_FUNCTION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), BALA_TYPE_STRUCT_REGISTER_FUNCTION, ValaStructRegisterFunction))
#define BALA_STRUCT_REGISTER_FUNCTION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), BALA_TYPE_STRUCT_REGISTER_FUNCTION, ValaStructRegisterFunctionClass))
#define BALA_IS_STRUCT_REGISTER_FUNCTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), BALA_TYPE_STRUCT_REGISTER_FUNCTION))
#define BALA_IS_STRUCT_REGISTER_FUNCTION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), BALA_TYPE_STRUCT_REGISTER_FUNCTION))
#define BALA_STRUCT_REGISTER_FUNCTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), BALA_TYPE_STRUCT_REGISTER_FUNCTION, ValaStructRegisterFunctionClass))

typedef struct _ValaStructRegisterFunction ValaStructRegisterFunction;
typedef struct _ValaStructRegisterFunctionClass ValaStructRegisterFunctionClass;
typedef struct _ValaStructRegisterFunctionPrivate ValaStructRegisterFunctionPrivate;

struct _ValaCCodeBaseModule {
	ValaCodeGenerator parent_instance;
	ValaSymbol* root_symbol;
	ValaCCodeBaseModuleEmitContext* emit_context;
	ValaCCodeLineDirective* current_line;
	ValaCCodeFile* header_file;
	ValaCCodeFile* internal_header_file;
	ValaCCodeFile* cfile;
	ValaCCodeBaseModuleEmitContext* class_init_context;
	ValaCCodeBaseModuleEmitContext* base_init_context;
	ValaCCodeBaseModuleEmitContext* class_finalize_context;
	ValaCCodeBaseModuleEmitContext* base_finalize_context;
	ValaCCodeBaseModuleEmitContext* instance_init_context;
	ValaCCodeBaseModuleEmitContext* instance_finalize_context;
	ValaCCodeStruct* param_spec_struct;
	ValaCCodeStruct* closure_struct;
	ValaCCodeEnum* prop_enum;
	ValaCCodeEnum* signal_enum;
	ValaSet* user_marshal_set;
	ValaSet* predefined_marshal_set;
	gint next_regex_id;
	ValaDataType* void_type;
	ValaDataType* bool_type;
	ValaDataType* char_type;
	ValaDataType* uchar_type;
	ValaDataType* unichar_type;
	ValaDataType* short_type;
	ValaDataType* ushort_type;
	ValaDataType* int_type;
	ValaDataType* uint_type;
	ValaDataType* long_type;
	ValaDataType* ulong_type;
	ValaDataType* int8_type;
	ValaDataType* uint8_type;
	ValaDataType* int16_type;
	ValaDataType* uint16_type;
	ValaDataType* int32_type;
	ValaDataType* uint32_type;
	ValaDataType* int64_type;
	ValaDataType* uint64_type;
	ValaDataType* size_t_type;
	ValaDataType* string_type;
	ValaDataType* regex_type;
	ValaDataType* float_type;
	ValaDataType* double_type;
	ValaDataType* pointer_type;
	ValaTypeSymbol* gtype_type;
	ValaTypeSymbol* gobject_type;
	ValaErrorType* gerror_type;
	ValaClass* glist_type;
	ValaClass* gslist_type;
	ValaClass* gnode_type;
	ValaClass* gqueue_type;
	ValaClass* gvaluearray_type;
	ValaTypeSymbol* gstringbuilder_type;
	ValaTypeSymbol* garray_type;
	ValaTypeSymbol* gbytearray_type;
	ValaTypeSymbol* gptrarray_type;
	ValaTypeSymbol* gthreadpool_type;
	ValaDataType* gquark_type;
	ValaStruct* gvalue_type;
	ValaClass* gvariant_type;
	ValaStruct* mutex_type;
	ValaStruct* gmutex_type;
	ValaStruct* grecmutex_type;
	ValaStruct* grwlock_type;
	ValaStruct* gcond_type;
	ValaClass* gsource_type;
	ValaTypeSymbol* type_module_type;
	ValaTypeSymbol* dbus_proxy_type;
	ValaClass* gtk_widget_type;
	ValaDataType* delegate_target_type;
	ValaDelegateType* delegate_target_destroy_type;
	gboolean in_plugin;
	gchar* module_init_param_name;
	gboolean requires_assert;
	gboolean requires_array_free;
	gboolean requires_array_move;
	gboolean requires_array_length;
	gboolean requires_array_n_elements;
	gboolean requires_clear_mutex;
	ValaSet* wrappers;
	ValaCCodeBaseModulePrivate * priv;
};

struct _ValaCCodeBaseModuleClass {
	ValaCodeGeneratorClass parent_class;
	void (*append_bala_array_free) (ValaCCodeBaseModule* self);
	void (*append_bala_array_move) (ValaCCodeBaseModule* self);
	void (*append_bala_array_length) (ValaCCodeBaseModule* self);
	void (*append_params_array) (ValaCCodeBaseModule* self, ValaMethod* m);
	gboolean (*generate_enum_declaration) (ValaCCodeBaseModule* self, ValaEnum* en, ValaCCodeFile* decl_space);
	void (*generate_class_struct_declaration) (ValaCCodeBaseModule* self, ValaClass* cl, ValaCCodeFile* decl_space);
	void (*generate_struct_declaration) (ValaCCodeBaseModule* self, ValaStruct* st, ValaCCodeFile* decl_space);
	void (*generate_delegate_declaration) (ValaCCodeBaseModule* self, ValaDelegate* d, ValaCCodeFile* decl_space);
	void (*generate_cparameters) (ValaCCodeBaseModule* self, ValaMethod* m, ValaCCodeFile* decl_space, ValaMap* cparam_map, ValaCCodeFunction* func, ValaCCodeFunctionDeclarator* vdeclarator, ValaMap* carg_map, ValaCCodeFunctionCall* vcall, gint direction);
	ValaCCodeExpression* (*get_dup_func_expression) (ValaCCodeBaseModule* self, ValaDataType* type, ValaSourceReference* source_reference, gboolean is_chainup);
	gchar* (*append_struct_array_destroy) (ValaCCodeBaseModule* self, ValaStruct* st);
	gchar* (*append_struct_array_free) (ValaCCodeBaseModule* self, ValaStruct* st);
	ValaCCodeExpression* (*destroy_value) (ValaCCodeBaseModule* self, ValaTargetValue* value, gboolean is_macro_definition);
	void (*append_scope_free) (ValaCCodeBaseModule* self, ValaSymbol* sym, ValaCodeNode* stop_at);
	ValaTargetValue* (*get_local_cvalue) (ValaCCodeBaseModule* self, ValaLocalVariable* local);
	ValaTargetValue* (*get_parameter_cvalue) (ValaCCodeBaseModule* self, ValaParameter* param);
	ValaTargetValue* (*get_field_cvalue) (ValaCCodeBaseModule* self, ValaField* field, ValaTargetValue* instance);
	ValaTargetValue* (*load_variable) (ValaCCodeBaseModule* self, ValaVariable* variable, ValaTargetValue* value, ValaExpression* expr);
	ValaTargetValue* (*load_this_parameter) (ValaCCodeBaseModule* self, ValaTypeSymbol* sym);
	void (*store_value) (ValaCCodeBaseModule* self, ValaTargetValue* lvalue, ValaTargetValue* value, ValaSourceReference* source_reference);
	gchar* (*get_delegate_target_cname) (ValaCCodeBaseModule* self, const gchar* delegate_cname);
	ValaCCodeExpression* (*get_delegate_target_cexpression) (ValaCCodeBaseModule* self, ValaExpression* delegate_expr, ValaCCodeExpression* * delegate_target_destroy_notify);
	ValaCCodeExpression* (*get_delegate_target_cvalue) (ValaCCodeBaseModule* self, ValaTargetValue* value);
	ValaCCodeExpression* (*get_delegate_target_destroy_notify_cvalue) (ValaCCodeBaseModule* self, ValaTargetValue* value);
	gchar* (*get_delegate_target_destroy_notify_cname) (ValaCCodeBaseModule* self, const gchar* delegate_cname);
	ValaTargetValue* (*copy_value) (ValaCCodeBaseModule* self, ValaTargetValue* value, ValaCodeNode* node);
	void (*generate_class_declaration) (ValaCCodeBaseModule* self, ValaClass* cl, ValaCCodeFile* decl_space);
	void (*generate_interface_declaration) (ValaCCodeBaseModule* self, ValaInterface* iface, ValaCCodeFile* decl_space);
	gboolean (*generate_method_declaration) (ValaCCodeBaseModule* self, ValaMethod* m, ValaCCodeFile* decl_space);
	void (*generate_error_domain_declaration) (ValaCCodeBaseModule* self, ValaErrorDomain* edomain, ValaCCodeFile* decl_space);
	ValaCCodeExpression* (*deserialize_expression) (ValaCCodeBaseModule* self, ValaDataType* type, ValaCCodeExpression* variant_expr, ValaCCodeExpression* expr, ValaCCodeExpression* error_expr, gboolean* may_fail);
	ValaCCodeExpression* (*serialize_expression) (ValaCCodeBaseModule* self, ValaDataType* type, ValaCCodeExpression* expr);
	ValaCCodeExpression* (*get_implicit_cast_expression) (ValaCCodeBaseModule* self, ValaCCodeExpression* source_cexpr, ValaDataType* expression_type, ValaDataType* target_type, ValaCodeNode* node);
	void (*create_type_check_statement) (ValaCCodeBaseModule* self, ValaCodeNode* method_node, ValaDataType* ret_type, ValaTypeSymbol* t, gboolean non_null, const gchar* var_name);
	void (*generate_dynamic_method_wrapper) (ValaCCodeBaseModule* self, ValaDynamicMethod* method);
	gboolean (*method_has_wrapper) (ValaCCodeBaseModule* self, ValaMethod* method);
	ValaCCodeExpression* (*get_param_spec_cexpression) (ValaCCodeBaseModule* self, ValaProperty* prop);
	ValaCCodeExpression* (*get_param_spec) (ValaCCodeBaseModule* self, ValaProperty* prop);
	ValaCCodeExpression* (*get_signal_creation) (ValaCCodeBaseModule* self, ValaSignal* sig, ValaObjectTypeSymbol* type);
	ValaCCodeExpression* (*get_value_getter_function) (ValaCCodeBaseModule* self, ValaDataType* type_reference);
	ValaCCodeExpression* (*get_value_setter_function) (ValaCCodeBaseModule* self, ValaDataType* type_reference);
	ValaCCodeExpression* (*get_value_taker_function) (ValaCCodeBaseModule* self, ValaDataType* type_reference);
	void (*register_dbus_info) (ValaCCodeBaseModule* self, ValaCCodeBlock* block, ValaObjectTypeSymbol* bindable);
	gchar* (*get_dynamic_property_getter_cname) (ValaCCodeBaseModule* self, ValaDynamicProperty* node);
	gchar* (*get_dynamic_property_setter_cname) (ValaCCodeBaseModule* self, ValaDynamicProperty* node);
	gchar* (*get_dynamic_signal_cname) (ValaCCodeBaseModule* self, ValaDynamicSignal* node);
	gchar* (*get_dynamic_signal_connect_wrapper_name) (ValaCCodeBaseModule* self, ValaDynamicSignal* node);
	gchar* (*get_dynamic_signal_connect_after_wrapper_name) (ValaCCodeBaseModule* self, ValaDynamicSignal* node);
	gchar* (*get_dynamic_signal_disconnect_wrapper_name) (ValaCCodeBaseModule* self, ValaDynamicSignal* node);
	gchar* (*get_array_length_cname) (ValaCCodeBaseModule* self, const gchar* array_cname, gint dim);
	gchar* (*get_variable_array_length_cname) (ValaCCodeBaseModule* self, ValaVariable* variable, gint dim);
	ValaCCodeExpression* (*get_array_length_cexpression) (ValaCCodeBaseModule* self, ValaExpression* array_expr, gint dim);
	ValaCCodeExpression* (*get_array_length_cvalue) (ValaCCodeBaseModule* self, ValaTargetValue* value, gint dim);
	gchar* (*get_array_size_cname) (ValaCCodeBaseModule* self, const gchar* array_cname);
	void (*add_simple_check) (ValaCCodeBaseModule* self, ValaCodeNode* node, gboolean always_fails);
	gchar* (*generate_ready_function) (ValaCCodeBaseModule* self, ValaMethod* m);
};

struct _ValaCCodeStructModule {
	ValaCCodeBaseModule parent_instance;
	ValaCCodeStructModulePrivate * priv;
};

struct _ValaCCodeStructModuleClass {
	ValaCCodeBaseModuleClass parent_class;
};

struct _ValaCCodeMethodModule {
	ValaCCodeStructModule parent_instance;
	ValaCCodeMethodModulePrivate * priv;
};

struct _ValaCCodeMethodModuleClass {
	ValaCCodeStructModuleClass parent_class;
	void (*generate_method_result_declaration) (ValaCCodeMethodModule* self, ValaMethod* m, ValaCCodeFile* decl_space, ValaCCodeFunction* cfunc, ValaMap* cparam_map, ValaMap* carg_map);
	ValaCCodeParameter* (*generate_parameter) (ValaCCodeMethodModule* self, ValaParameter* param, ValaCCodeFile* decl_space, ValaMap* cparam_map, ValaMap* carg_map);
};

struct _ValaCCodeControlFlowModule {
	ValaCCodeMethodModule parent_instance;
	ValaCCodeControlFlowModulePrivate * priv;
};

struct _ValaCCodeControlFlowModuleClass {
	ValaCCodeMethodModuleClass parent_class;
};

struct _ValaCCodeMemberAccessModule {
	ValaCCodeControlFlowModule parent_instance;
	ValaCCodeMemberAccessModulePrivate * priv;
};

struct _ValaCCodeMemberAccessModuleClass {
	ValaCCodeControlFlowModuleClass parent_class;
};

struct _ValaCCodeAssignmentModule {
	ValaCCodeMemberAccessModule parent_instance;
	ValaCCodeAssignmentModulePrivate * priv;
};

struct _ValaCCodeAssignmentModuleClass {
	ValaCCodeMemberAccessModuleClass parent_class;
};

struct _ValaCCodeMethodCallModule {
	ValaCCodeAssignmentModule parent_instance;
	ValaCCodeMethodCallModulePrivate * priv;
};

struct _ValaCCodeMethodCallModuleClass {
	ValaCCodeAssignmentModuleClass parent_class;
};

struct _ValaCCodeArrayModule {
	ValaCCodeMethodCallModule parent_instance;
	ValaCCodeArrayModulePrivate * priv;
};

struct _ValaCCodeArrayModuleClass {
	ValaCCodeMethodCallModuleClass parent_class;
};

struct _ValaCCodeAttribute {
	ValaAttributeCache parent_instance;
	ValaCCodeAttributePrivate * priv;
};

struct _ValaCCodeAttributeClass {
	ValaAttributeCacheClass parent_class;
};

struct _ValaCCodeBaseModuleEmitContext {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ValaSymbol* current_symbol;
	ValaArrayList* symbol_stack;
	ValaTryStatement* current_try;
	gint current_try_id;
	gint next_try_id;
	ValaCatchClause* current_catch;
	ValaCCodeFunction* ccode;
	ValaArrayList* ccode_stack;
	ValaArrayList* temp_ref_values;
	gint next_temp_var_id;
	gint current_inner_error_id;
	gboolean current_method_inner_error;
	gboolean current_method_return;
	gint next_coroutine_state;
	ValaMap* variable_name_map;
	ValaMap* closure_variable_count_map;
	ValaMap* closure_variable_clash_map;
	gboolean is_in_method_precondition;
	ValaCCodeBaseModuleEmitContextPrivate * priv;
};

struct _ValaCCodeBaseModuleEmitContextClass {
	GTypeClass parent_class;
	void (*finalize) (ValaCCodeBaseModuleEmitContext *self);
};

struct _ValaCCodeCompiler {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ValaCCodeCompilerPrivate * priv;
};

struct _ValaCCodeCompilerClass {
	GTypeClass parent_class;
	void (*finalize) (ValaCCodeCompiler *self);
};

struct _ValaCCodeDelegateModule {
	ValaCCodeArrayModule parent_instance;
	ValaCCodeDelegateModulePrivate * priv;
};

struct _ValaCCodeDelegateModuleClass {
	ValaCCodeArrayModuleClass parent_class;
};

struct _ValaTypeRegisterFunction {
	GTypeInstance parent_instance;
	volatile int ref_count;
	ValaTypeRegisterFunctionPrivate * priv;
};

struct _ValaTypeRegisterFunctionClass {
	GTypeClass parent_class;
	void (*finalize) (ValaTypeRegisterFunction *self);
	ValaTypeSymbol* (*get_type_declaration) (ValaTypeRegisterFunction* self);
	gchar* (*get_type_struct_name) (ValaTypeRegisterFunction* self);
	gchar* (*get_base_init_func_name) (ValaTypeRegisterFunction* self);
	gchar* (*get_class_finalize_func_name) (ValaTypeRegisterFunction* self);
	gchar* (*get_base_finalize_func_name) (ValaTypeRegisterFunction* self);
	gchar* (*get_class_init_func_name) (ValaTypeRegisterFunction* self);
	gchar* (*get_instance_struct_size) (ValaTypeRegisterFunction* self);
	gchar* (*get_instance_init_func_name) (ValaTypeRegisterFunction* self);
	gchar* (*get_parent_type_name) (ValaTypeRegisterFunction* self);
	gchar* (*get_gtype_value_table_init_function_name) (ValaTypeRegisterFunction* self);
	gchar* (*get_gtype_value_table_peek_pointer_function_name) (ValaTypeRegisterFunction* self);
	gchar* (*get_gtype_value_table_free_function_name) (ValaTypeRegisterFunction* self);
	gchar* (*get_gtype_value_table_copy_function_name) (ValaTypeRegisterFunction* self);
	gchar* (*get_gtype_value_table_lcopy_value_function_name) (ValaTypeRegisterFunction* self);
	gchar* (*get_gtype_value_table_collect_value_function_name) (ValaTypeRegisterFunction* self);
	gchar* (*get_type_flags) (ValaTypeRegisterFunction* self);
	ValaCCodeFragment* (*get_type_interface_init_declaration) (ValaTypeRegisterFunction* self);
	void (*get_type_interface_init_statements) (ValaTypeRegisterFunction* self, ValaCodeContext* context, ValaCCodeBlock* block, gboolean plugin);
	ValaSymbolAccessibility (*get_accessibility) (ValaTypeRegisterFunction* self);
};

struct _ValaClassRegisterFunction {
	ValaTypeRegisterFunction parent_instance;
	ValaClassRegisterFunctionPrivate * priv;
};

struct _ValaClassRegisterFunctionClass {
	ValaTypeRegisterFunctionClass parent_class;
};

struct _ValaCType {
	ValaDataType parent_instance;
	ValaCTypePrivate * priv;
};

struct _ValaCTypeClass {
	ValaDataTypeClass parent_class;
};

struct _ValaEnumRegisterFunction {
	ValaTypeRegisterFunction parent_instance;
	ValaEnumRegisterFunctionPrivate * priv;
};

struct _ValaEnumRegisterFunctionClass {
	ValaTypeRegisterFunctionClass parent_class;
};

struct _ValaGErrorModule {
	ValaCCodeDelegateModule parent_instance;
	ValaGErrorModulePrivate * priv;
};

struct _ValaGErrorModuleClass {
	ValaCCodeDelegateModuleClass parent_class;
	void (*return_with_exception) (ValaGErrorModule* self, ValaCCodeExpression* error_expr);
};

struct _ValaGTypeModule {
	ValaGErrorModule parent_instance;
	ValaGTypeModulePrivate * priv;
};

struct _ValaGTypeModuleClass {
	ValaGErrorModuleClass parent_class;
	void (*generate_virtual_method_declaration) (ValaGTypeModule* self, ValaMethod* m, ValaCCodeFile* decl_space, ValaCCodeStruct* type_struct);
	void (*generate_class_init) (ValaGTypeModule* self, ValaClass* cl);
	void (*end_instance_init) (ValaGTypeModule* self, ValaClass* cl);
};

struct _ValaGObjectModule {
	ValaGTypeModule parent_instance;
	ValaGObjectModulePrivate * priv;
};

struct _ValaGObjectModuleClass {
	ValaGTypeModuleClass parent_class;
};

struct _ValaGSignalModule {
	ValaGObjectModule parent_instance;
	ValaGSignalModulePrivate * priv;
};

struct _ValaGSignalModuleClass {
	ValaGObjectModuleClass parent_class;
};

struct _ValaGtkModule {
	ValaGSignalModule parent_instance;
	ValaGtkModulePrivate * priv;
};

struct _ValaGtkModuleClass {
	ValaGSignalModuleClass parent_class;
};

struct _ValaGAsyncModule {
	ValaGtkModule parent_instance;
	ValaGAsyncModulePrivate * priv;
};

struct _ValaGAsyncModuleClass {
	ValaGtkModuleClass parent_class;
};

struct _ValaGValueModule {
	ValaGAsyncModule parent_instance;
	ValaGValueModulePrivate * priv;
};

struct _ValaGValueModuleClass {
	ValaGAsyncModuleClass parent_class;
};

struct _ValaGVariantModule {
	ValaGValueModule parent_instance;
	ValaGVariantModulePrivate * priv;
};

struct _ValaGVariantModuleClass {
	ValaGValueModuleClass parent_class;
};

struct _ValaGDBusModule {
	ValaGVariantModule parent_instance;
	ValaGDBusModulePrivate * priv;
};

struct _ValaGDBusModuleClass {
	ValaGVariantModuleClass parent_class;
};

struct _ValaGDBusClientModule {
	ValaGDBusModule parent_instance;
	ValaGDBusClientModulePrivate * priv;
};

struct _ValaGDBusClientModuleClass {
	ValaGDBusModuleClass parent_class;
};

struct _ValaGDBusServerModule {
	ValaGDBusClientModule parent_instance;
	ValaGDBusServerModulePrivate * priv;
};

struct _ValaGDBusServerModuleClass {
	ValaGDBusClientModuleClass parent_class;
};

struct _ValaGIRWriter {
	ValaCodeVisitor parent_instance;
	ValaGIRWriterPrivate * priv;
};

struct _ValaGIRWriterClass {
	ValaCodeVisitorClass parent_class;
	gchar* (*get_interface_comment) (ValaGIRWriter* self, ValaInterface* iface);
	gchar* (*get_struct_comment) (ValaGIRWriter* self, ValaStruct* st);
	gchar* (*get_enum_comment) (ValaGIRWriter* self, ValaEnum* en);
	gchar* (*get_class_comment) (ValaGIRWriter* self, ValaClass* c);
	gchar* (*get_error_code_comment) (ValaGIRWriter* self, ValaErrorCode* ecode);
	gchar* (*get_enum_value_comment) (ValaGIRWriter* self, ValaEnumValue* ev);
	gchar* (*get_constant_comment) (ValaGIRWriter* self, ValaConstant* c);
	gchar* (*get_error_domain_comment) (ValaGIRWriter* self, ValaErrorDomain* edomain);
	gchar* (*get_field_comment) (ValaGIRWriter* self, ValaField* f);
	gchar* (*get_delegate_comment) (ValaGIRWriter* self, ValaDelegate* cb);
	gchar* (*get_method_comment) (ValaGIRWriter* self, ValaMethod* m);
	gchar* (*get_property_comment) (ValaGIRWriter* self, ValaProperty* prop);
	gchar* (*get_delegate_return_comment) (ValaGIRWriter* self, ValaDelegate* cb);
	gchar* (*get_signal_return_comment) (ValaGIRWriter* self, ValaSignal* sig);
	gchar* (*get_method_return_comment) (ValaGIRWriter* self, ValaMethod* m);
	gchar* (*get_signal_comment) (ValaGIRWriter* self, ValaSignal* sig);
	gchar* (*get_parameter_comment) (ValaGIRWriter* self, ValaParameter* param);
};

struct _ValaGLibValue {
	ValaTargetValue parent_instance;
	ValaCCodeExpression* cvalue;
	gboolean lvalue;
	gboolean non_null;
	gchar* ctype;
	ValaList* array_length_cvalues;
	ValaCCodeExpression* array_size_cvalue;
	gboolean array_null_terminated;
	ValaCCodeExpression* array_length_cexpr;
	ValaCCodeExpression* delegate_target_cvalue;
	ValaCCodeExpression* delegate_target_destroy_notify_cvalue;
	ValaGLibValuePrivate * priv;
};

struct _ValaGLibValueClass {
	ValaTargetValueClass parent_class;
};

struct _ValaInterfaceRegisterFunction {
	ValaTypeRegisterFunction parent_instance;
	ValaInterfaceRegisterFunctionPrivate * priv;
};

struct _ValaInterfaceRegisterFunctionClass {
	ValaTypeRegisterFunctionClass parent_class;
};

struct _ValaStructRegisterFunction {
	ValaTypeRegisterFunction parent_instance;
	ValaStructRegisterFunctionPrivate * priv;
};

struct _ValaStructRegisterFunctionClass {
	ValaTypeRegisterFunctionClass parent_class;
};

gchar* bala_get_ccode_name (ValaCodeNode* node);
gchar* bala_get_ccode_const_name (ValaCodeNode* node);
gchar* bala_get_ccode_type_name (ValaObjectTypeSymbol* sym);
gchar* bala_get_ccode_type_cast_function (ValaObjectTypeSymbol* sym);
gchar* bala_get_ccode_type_get_function (ValaObjectTypeSymbol* sym);
gchar* bala_get_ccode_class_get_private_function (ValaClass* cl);
gchar* bala_get_ccode_class_type_function (ValaClass* cl);
gchar* bala_get_ccode_lower_case_name (ValaCodeNode* node,
                                       const gchar* infix);
gchar* bala_get_ccode_upper_case_name (ValaSymbol* sym,
                                       const gchar* infix);
gchar* bala_get_ccode_header_filenames (ValaSymbol* sym);
gchar* bala_get_ccode_feature_test_macros (ValaSymbol* sym);
gchar* bala_get_ccode_prefix (ValaSymbol* sym);
gchar* bala_get_ccode_lower_case_prefix (ValaSymbol* sym);
gchar* bala_get_ccode_lower_case_suffix (ValaSymbol* sym);
gchar* bala_get_ccode_ref_function (ValaTypeSymbol* sym);
gchar* bala_get_ccode_quark_name (ValaErrorDomain* edomain);
gboolean bala_is_reference_counting (ValaTypeSymbol* sym);
gboolean bala_is_ref_function_void (ValaDataType* type);
gboolean bala_is_free_function_address_of (ValaDataType* type);
gboolean bala_get_ccode_ref_function_void (ValaClass* cl);
gboolean bala_get_ccode_free_function_address_of (ValaClass* cl);
gchar* bala_get_ccode_unref_function (ValaObjectTypeSymbol* sym);
gchar* bala_get_ccode_ref_sink_function (ValaObjectTypeSymbol* sym);
gchar* bala_get_ccode_copy_function (ValaTypeSymbol* sym);
gchar* bala_get_ccode_destroy_function (ValaTypeSymbol* sym);
gchar* bala_get_ccode_dup_function (ValaTypeSymbol* sym);
gchar* bala_get_ccode_free_function (ValaTypeSymbol* sym);
gboolean bala_get_ccode_is_gboxed (ValaTypeSymbol* sym);
gboolean bala_get_ccode_finish_instance (ValaMethod* m);
gchar* bala_get_ccode_type_id (ValaCodeNode* node);
gchar* bala_get_ccode_type_function (ValaTypeSymbol* sym);
gchar* bala_get_ccode_marshaller_type_name (ValaCodeNode* node);
gchar* bala_get_ccode_get_value_function (ValaCodeNode* sym);
gchar* bala_get_ccode_set_value_function (ValaCodeNode* sym);
gchar* bala_get_ccode_take_value_function (ValaCodeNode* sym);
gchar* bala_get_ccode_param_spec_function (ValaCodeNode* sym);
gchar* bala_get_ccode_type_check_function (ValaTypeSymbol* sym);
gchar* bala_get_ccode_class_type_check_function (ValaClass* cl);
gchar* bala_get_ccode_default_value (ValaTypeSymbol* sym);
gchar* bala_get_ccode_default_value_on_error (ValaTypeSymbol* sym);
gboolean bala_get_ccode_has_copy_function (ValaStruct* st);
gboolean bala_get_ccode_has_destroy_function (ValaStruct* st);
gdouble bala_get_ccode_instance_pos (ValaCodeNode* node);
gdouble bala_get_ccode_error_pos (ValaCallable* c);
gboolean bala_get_ccode_array_length (ValaCodeNode* node);
gchar* bala_get_ccode_array_length_type (ValaCodeNode* node);
gboolean bala_get_ccode_array_null_terminated (ValaCodeNode* node);
gchar* bala_get_ccode_array_length_name (ValaCodeNode* node);
gchar* bala_get_ccode_array_length_expr (ValaCodeNode* node);
gdouble bala_get_ccode_array_length_pos (ValaCodeNode* node);
gdouble bala_get_ccode_delegate_target_pos (ValaCodeNode* node);
gdouble bala_get_ccode_destroy_notify_pos (ValaCodeNode* node);
gboolean bala_get_ccode_delegate_target (ValaCodeNode* node);
gchar* bala_get_ccode_delegate_target_name (ValaVariable* variable);
gchar* bala_get_ccode_delegate_target_destroy_notify_name (ValaVariable* variable);
gdouble bala_get_ccode_pos (ValaParameter* param);
gchar* bala_get_ccode_type (ValaCodeNode* node);
gboolean bala_get_ccode_simple_generics (ValaMethod* m);
gchar* bala_get_ccode_real_name (ValaSymbol* sym);
gchar* bala_get_ccode_constructv_name (ValaCreationMethod* m);
gchar* bala_get_ccode_vfunc_name (ValaMethod* m);
gdouble bala_get_ccode_async_result_pos (ValaMethod* m);
gchar* bala_get_ccode_finish_name (ValaMethod* m);
gchar* bala_get_ccode_finish_vfunc_name (ValaMethod* m);
gchar* bala_get_ccode_finish_real_name (ValaMethod* m);
gboolean bala_get_ccode_no_accessor_method (ValaProperty* p);
gboolean bala_get_ccode_concrete_accessor (ValaProperty* p);
gboolean bala_get_ccode_has_emitter (ValaSignal* sig);
gboolean bala_get_ccode_has_type_id (ValaTypeSymbol* sym);
gboolean bala_get_ccode_has_new_function (ValaMethod* m);
gboolean bala_get_ccode_has_generic_type_parameter (ValaMethod* m);
gdouble bala_get_ccode_generic_type_pos (ValaMethod* m);
gboolean bala_get_ccode_no_wrapper (ValaMethod* m);
gchar* bala_get_ccode_sentinel (ValaMethod* m);
GType bala_ccode_base_module_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaCCodeBaseModule, bala_code_visitor_unref)
gpointer bala_ccode_base_module_emit_context_ref (gpointer instance);
void bala_ccode_base_module_emit_context_unref (gpointer instance);
GParamSpec* bala_ccode_base_module_param_spec_emit_context (const gchar* name,
                                                            const gchar* nick,
                                                            const gchar* blurb,
                                                            GType object_type,
                                                            GParamFlags flags);
void bala_ccode_base_module_value_set_emit_context (GValue* value,
                                                    gpointer v_object);
void bala_ccode_base_module_value_take_emit_context (GValue* value,
                                                     gpointer v_object);
gpointer bala_ccode_base_module_value_get_emit_context (const GValue* value);
GType bala_ccode_base_module_emit_context_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaCCodeBaseModuleEmitContext, bala_ccode_base_module_emit_context_unref)
GType bala_ccode_struct_module_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaCCodeStructModule, bala_code_visitor_unref)
GType bala_ccode_method_module_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaCCodeMethodModule, bala_code_visitor_unref)
GType bala_ccode_control_flow_module_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaCCodeControlFlowModule, bala_code_visitor_unref)
GType bala_ccode_member_access_module_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaCCodeMemberAccessModule, bala_code_visitor_unref)
GType bala_ccode_assignment_module_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaCCodeAssignmentModule, bala_code_visitor_unref)
GType bala_ccode_method_call_module_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaCCodeMethodCallModule, bala_code_visitor_unref)
GType bala_ccode_array_module_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaCCodeArrayModule, bala_code_visitor_unref)
ValaCCodeArrayModule* bala_ccode_array_module_new (void);
ValaCCodeArrayModule* bala_ccode_array_module_construct (GType object_type);
ValaCCodeAssignmentModule* bala_ccode_assignment_module_new (void);
ValaCCodeAssignmentModule* bala_ccode_assignment_module_construct (GType object_type);
GType bala_ccode_attribute_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaCCodeAttribute, bala_attribute_cache_unref)
const gchar* bala_ccode_attribute_get_name (ValaCCodeAttribute* self);
const gchar* bala_ccode_attribute_get_const_name (ValaCCodeAttribute* self);
const gchar* bala_ccode_attribute_get_type_name (ValaCCodeAttribute* self);
const gchar* bala_ccode_attribute_get_feature_test_macros (ValaCCodeAttribute* self);
const gchar* bala_ccode_attribute_get_header_filenames (ValaCCodeAttribute* self);
const gchar* bala_ccode_attribute_get_prefix (ValaCCodeAttribute* self);
const gchar* bala_ccode_attribute_get_lower_case_prefix (ValaCCodeAttribute* self);
const gchar* bala_ccode_attribute_get_lower_case_suffix (ValaCCodeAttribute* self);
const gchar* bala_ccode_attribute_get_ref_function (ValaCCodeAttribute* self);
gboolean bala_ccode_attribute_get_ref_function_void (ValaCCodeAttribute* self);
const gchar* bala_ccode_attribute_get_unref_function (ValaCCodeAttribute* self);
const gchar* bala_ccode_attribute_get_ref_sink_function (ValaCCodeAttribute* self);
const gchar* bala_ccode_attribute_get_copy_function (ValaCCodeAttribute* self);
const gchar* bala_ccode_attribute_get_destroy_function (ValaCCodeAttribute* self);
const gchar* bala_ccode_attribute_get_dup_function (ValaCCodeAttribute* self);
const gchar* bala_ccode_attribute_get_free_function (ValaCCodeAttribute* self);
gboolean bala_ccode_attribute_get_free_function_address_of (ValaCCodeAttribute* self);
const gchar* bala_ccode_attribute_get_ctype (ValaCCodeAttribute* self);
const gchar* bala_ccode_attribute_get_type_id (ValaCCodeAttribute* self);
const gchar* bala_ccode_attribute_get_marshaller_type_name (ValaCCodeAttribute* self);
const gchar* bala_ccode_attribute_get_get_value_function (ValaCCodeAttribute* self);
const gchar* bala_ccode_attribute_get_set_value_function (ValaCCodeAttribute* self);
const gchar* bala_ccode_attribute_get_take_value_function (ValaCCodeAttribute* self);
const gchar* bala_ccode_attribute_get_param_spec_function (ValaCCodeAttribute* self);
const gchar* bala_ccode_attribute_get_default_value (ValaCCodeAttribute* self);
const gchar* bala_ccode_attribute_get_default_value_on_error (ValaCCodeAttribute* self);
gdouble bala_ccode_attribute_get_pos (ValaCCodeAttribute* self);
const gchar* bala_ccode_attribute_get_real_name (ValaCCodeAttribute* self);
const gchar* bala_ccode_attribute_get_vfunc_name (ValaCCodeAttribute* self);
const gchar* bala_ccode_attribute_get_finish_name (ValaCCodeAttribute* self);
const gchar* bala_ccode_attribute_get_finish_vfunc_name (ValaCCodeAttribute* self);
const gchar* bala_ccode_attribute_get_finish_real_name (ValaCCodeAttribute* self);
gboolean bala_ccode_attribute_get_finish_instance (ValaCCodeAttribute* self);
gboolean bala_ccode_attribute_get_delegate_target (ValaCCodeAttribute* self);
const gchar* bala_ccode_attribute_get_delegate_target_name (ValaCCodeAttribute* self);
const gchar* bala_ccode_attribute_get_delegate_target_destroy_notify_name (ValaCCodeAttribute* self);
gboolean bala_ccode_attribute_get_array_length (ValaCCodeAttribute* self);
gboolean bala_ccode_attribute_get_array_null_terminated (ValaCCodeAttribute* self);
const gchar* bala_ccode_attribute_get_array_length_type (ValaCCodeAttribute* self);
const gchar* bala_ccode_attribute_get_sentinel (ValaCCodeAttribute* self);
const gchar* bala_ccode_attribute_get_array_length_name (ValaCCodeAttribute* self);
const gchar* bala_ccode_attribute_get_array_length_expr (ValaCCodeAttribute* self);
ValaCCodeAttribute* bala_ccode_attribute_new (ValaCodeNode* node);
ValaCCodeAttribute* bala_ccode_attribute_construct (GType object_type,
                                                    ValaCodeNode* node);
ValaCodeContext* bala_ccode_base_module_get_context (ValaCCodeBaseModule* self);
void bala_ccode_base_module_set_context (ValaCCodeBaseModule* self,
                                         ValaCodeContext* value);
ValaSymbol* bala_ccode_base_module_get_current_symbol (ValaCCodeBaseModule* self);
ValaTryStatement* bala_ccode_base_module_get_current_try (ValaCCodeBaseModule* self);
void bala_ccode_base_module_set_current_try (ValaCCodeBaseModule* self,
                                             ValaTryStatement* value);
gint bala_ccode_base_module_get_current_try_id (ValaCCodeBaseModule* self);
void bala_ccode_base_module_set_current_try_id (ValaCCodeBaseModule* self,
                                                gint value);
gint bala_ccode_base_module_get_next_try_id (ValaCCodeBaseModule* self);
void bala_ccode_base_module_set_next_try_id (ValaCCodeBaseModule* self,
                                             gint value);
ValaCatchClause* bala_ccode_base_module_get_current_catch (ValaCCodeBaseModule* self);
void bala_ccode_base_module_set_current_catch (ValaCCodeBaseModule* self,
                                               ValaCatchClause* value);
gint bala_ccode_base_module_get_current_inner_error_id (ValaCCodeBaseModule* self);
void bala_ccode_base_module_set_current_inner_error_id (ValaCCodeBaseModule* self,
                                                        gint value);
gboolean bala_ccode_base_module_get_is_in_method_precondition (ValaCCodeBaseModule* self);
void bala_ccode_base_module_set_is_in_method_precondition (ValaCCodeBaseModule* self,
                                                           gboolean value);
ValaTypeSymbol* bala_ccode_base_module_get_current_type_symbol (ValaCCodeBaseModule* self);
ValaClass* bala_ccode_base_module_get_current_class (ValaCCodeBaseModule* self);
ValaMethod* bala_ccode_base_module_get_current_method (ValaCCodeBaseModule* self);
ValaPropertyAccessor* bala_ccode_base_module_get_current_property_accessor (ValaCCodeBaseModule* self);
ValaConstructor* bala_ccode_base_module_get_current_constructor (ValaCCodeBaseModule* self);
ValaDestructor* bala_ccode_base_module_get_current_destructor (ValaCCodeBaseModule* self);
ValaDataType* bala_ccode_base_module_get_current_return_type (ValaCCodeBaseModule* self);
gboolean bala_ccode_base_module_is_in_coroutine (ValaCCodeBaseModule* self);
gboolean bala_ccode_base_module_is_in_constructor (ValaCCodeBaseModule* self);
gboolean bala_ccode_base_module_is_in_destructor (ValaCCodeBaseModule* self);
ValaBlock* bala_ccode_base_module_get_current_closure_block (ValaCCodeBaseModule* self);
ValaBlock* bala_ccode_base_module_next_closure_block (ValaCCodeBaseModule* self,
                                                      ValaSymbol* sym);
ValaCCodeFunction* bala_ccode_base_module_get_ccode (ValaCCodeBaseModule* self);
ValaArrayList* bala_ccode_base_module_get_temp_ref_values (ValaCCodeBaseModule* self);
extern ValaSet* bala_ccode_base_module_reserved_identifiers;
gint bala_ccode_base_module_get_next_temp_var_id (ValaCCodeBaseModule* self);
void bala_ccode_base_module_set_next_temp_var_id (ValaCCodeBaseModule* self,
                                                  gint value);
gboolean bala_ccode_base_module_get_in_creation_method (ValaCCodeBaseModule* self);
gboolean bala_ccode_base_module_get_current_method_inner_error (ValaCCodeBaseModule* self);
void bala_ccode_base_module_set_current_method_inner_error (ValaCCodeBaseModule* self,
                                                            gboolean value);
gboolean bala_ccode_base_module_get_current_method_return (ValaCCodeBaseModule* self);
void bala_ccode_base_module_set_current_method_return (ValaCCodeBaseModule* self,
                                                       gboolean value);
ValaMap* bala_ccode_base_module_get_variable_name_map (ValaCCodeBaseModule* self);
extern gint bala_ccode_base_module_ccode_attribute_cache_index;
ValaCCodeBaseModule* bala_ccode_base_module_construct (GType object_type);
void bala_ccode_base_module_push_context (ValaCCodeBaseModule* self,
                                          ValaCCodeBaseModuleEmitContext* emit_context);
void bala_ccode_base_module_pop_context (ValaCCodeBaseModule* self);
void bala_ccode_base_module_push_line (ValaCCodeBaseModule* self,
                                       ValaSourceReference* source_reference);
void bala_ccode_base_module_pop_line (ValaCCodeBaseModule* self);
void bala_ccode_base_module_push_function (ValaCCodeBaseModule* self,
                                           ValaCCodeFunction* func);
void bala_ccode_base_module_pop_function (ValaCCodeBaseModule* self);
gboolean bala_ccode_base_module_add_symbol_declaration (ValaCCodeBaseModule* self,
                                                        ValaCCodeFile* decl_space,
                                                        ValaSymbol* sym,
                                                        const gchar* name);
void bala_ccode_base_module_append_bala_array_free (ValaCCodeBaseModule* self);
void bala_ccode_base_module_append_bala_array_move (ValaCCodeBaseModule* self);
void bala_ccode_base_module_append_bala_array_length (ValaCCodeBaseModule* self);
void bala_ccode_base_module_append_params_array (ValaCCodeBaseModule* self,
                                                 ValaMethod* m);
void bala_ccode_base_module_append_bala_clear_mutex (ValaCCodeBaseModule* self,
                                                     const gchar* typename,
                                                     const gchar* funcprefix);
gboolean bala_ccode_base_module_generate_enum_declaration (ValaCCodeBaseModule* self,
                                                           ValaEnum* en,
                                                           ValaCCodeFile* decl_space);
void bala_ccode_base_module_visit_member (ValaCCodeBaseModule* self,
                                          ValaSymbol* m);
void bala_ccode_base_module_generate_constant_declaration (ValaCCodeBaseModule* self,
                                                           ValaConstant* c,
                                                           ValaCCodeFile* decl_space,
                                                           gboolean definition);
void bala_ccode_base_module_append_field (ValaCCodeBaseModule* self,
                                          ValaCCodeStruct* ccode_struct,
                                          ValaField* f,
                                          ValaCCodeFile* decl_space);
void bala_ccode_base_module_generate_field_declaration (ValaCCodeBaseModule* self,
                                                        ValaField* f,
                                                        ValaCCodeFile* decl_space);
gboolean bala_ccode_base_module_is_constant_ccode_expression (ValaCCodeExpression* cexpr);
gboolean bala_ccode_base_module_is_constant_ccode (ValaCodeNode* expr);
gboolean bala_ccode_base_module_is_pure_ccode_expression (ValaCCodeExpression* cexpr);
void bala_ccode_base_module_generate_type_declaration (ValaCCodeBaseModule* self,
                                                       ValaDataType* type,
                                                       ValaCCodeFile* decl_space);
void bala_ccode_base_module_generate_class_struct_declaration (ValaCCodeBaseModule* self,
                                                               ValaClass* cl,
                                                               ValaCCodeFile* decl_space);
void bala_ccode_base_module_generate_struct_declaration (ValaCCodeBaseModule* self,
                                                         ValaStruct* st,
                                                         ValaCCodeFile* decl_space);
void bala_ccode_base_module_generate_delegate_declaration (ValaCCodeBaseModule* self,
                                                           ValaDelegate* d,
                                                           ValaCCodeFile* decl_space);
void bala_ccode_base_module_generate_cparameters (ValaCCodeBaseModule* self,
                                                  ValaMethod* m,
                                                  ValaCCodeFile* decl_space,
                                                  ValaMap* cparam_map,
                                                  ValaCCodeFunction* func,
                                                  ValaCCodeFunctionDeclarator* vdeclarator,
                                                  ValaMap* carg_map,
                                                  ValaCCodeFunctionCall* vcall,
                                                  gint direction);
void bala_ccode_base_module_generate_property_accessor_declaration (ValaCCodeBaseModule* self,
                                                                    ValaPropertyAccessor* acc,
                                                                    ValaCCodeFile* decl_space);
gint bala_ccode_base_module_get_block_id (ValaCCodeBaseModule* self,
                                          ValaBlock* b);
gboolean bala_ccode_base_module_no_implicit_copy (ValaCCodeBaseModule* self,
                                                  ValaDataType* type);
ValaCCodeExpression* bala_ccode_base_module_get_cexpression (ValaCCodeBaseModule* self,
                                                             const gchar* name);
ValaCCodeExpression* bala_ccode_base_module_get_local_cexpression (ValaCCodeBaseModule* self,
                                                                   ValaLocalVariable* local);
ValaCCodeExpression* bala_ccode_base_module_get_parameter_cexpression (ValaCCodeBaseModule* self,
                                                                       ValaParameter* param);
ValaCCodeExpression* bala_ccode_base_module_get_variable_cexpression (ValaCCodeBaseModule* self,
                                                                      const gchar* name);
ValaCCodeExpression* bala_ccode_base_module_get_this_cexpression (ValaCCodeBaseModule* self);
ValaCCodeExpression* bala_ccode_base_module_get_this_interface_cexpression (ValaCCodeBaseModule* self,
                                                                            ValaInterface* iface);
ValaCCodeExpression* bala_ccode_base_module_get_inner_error_cexpression (ValaCCodeBaseModule* self);
gchar* bala_ccode_base_module_get_local_cname (ValaCCodeBaseModule* self,
                                               ValaLocalVariable* local);
gchar* bala_ccode_base_module_get_variable_cname (ValaCCodeBaseModule* self,
                                                  const gchar* name);
gboolean bala_ccode_base_module_is_simple_struct_creation (ValaCCodeBaseModule* self,
                                                           ValaVariable* variable,
                                                           ValaExpression* expr);
ValaTargetValue* bala_ccode_base_module_create_temp_value (ValaCCodeBaseModule* self,
                                                           ValaDataType* type,
                                                           gboolean init,
                                                           ValaCodeNode* node_reference,
                                                           gboolean* value_owned);
ValaTargetValue* bala_ccode_base_module_load_temp_value (ValaCCodeBaseModule* self,
                                                         ValaTargetValue* lvalue);
ValaTargetValue* bala_ccode_base_module_store_temp_value (ValaCCodeBaseModule* self,
                                                          ValaTargetValue* initializer,
                                                          ValaCodeNode* node_reference,
                                                          gboolean* value_owned);
ValaLocalVariable* bala_ccode_base_module_get_temp_variable (ValaCCodeBaseModule* self,
                                                             ValaDataType* type,
                                                             gboolean value_owned,
                                                             ValaCodeNode* node_reference,
                                                             gboolean init);
ValaCCodeExpression* bala_ccode_base_module_get_type_id_expression (ValaCCodeBaseModule* self,
                                                                    ValaDataType* type,
                                                                    gboolean is_chainup);
ValaCCodeExpression* bala_ccode_base_module_get_dup_func_expression (ValaCCodeBaseModule* self,
                                                                     ValaDataType* type,
                                                                     ValaSourceReference* source_reference,
                                                                     gboolean is_chainup);
gchar* bala_ccode_base_module_generate_dup_func_wrapper (ValaCCodeBaseModule* self,
                                                         ValaDataType* type);
gchar* bala_ccode_base_module_generate_free_function_address_of_wrapper (ValaCCodeBaseModule* self,
                                                                         ValaDataType* type);
gchar* bala_ccode_base_module_generate_destroy_function_content_of_wrapper (ValaCCodeBaseModule* self,
                                                                            ValaDataType* type);
gchar* bala_ccode_base_module_generate_free_func_wrapper (ValaCCodeBaseModule* self,
                                                          ValaDataType* type);
ValaCCodeExpression* bala_ccode_base_module_get_destroy0_func_expression (ValaCCodeBaseModule* self,
                                                                          ValaDataType* type,
                                                                          gboolean is_chainup);
ValaCCodeExpression* bala_ccode_base_module_get_destroy_func_expression (ValaCCodeBaseModule* self,
                                                                         ValaDataType* type,
                                                                         gboolean is_chainup);
gchar* bala_ccode_base_module_append_struct_array_destroy (ValaCCodeBaseModule* self,
                                                           ValaStruct* st);
gchar* bala_ccode_base_module_append_struct_array_free (ValaCCodeBaseModule* self,
                                                        ValaStruct* st);
ValaCCodeExpression* bala_ccode_base_module_destroy_local (ValaCCodeBaseModule* self,
                                                           ValaLocalVariable* local);
ValaCCodeExpression* bala_ccode_base_module_destroy_parameter (ValaCCodeBaseModule* self,
                                                               ValaParameter* param);
ValaCCodeExpression* bala_ccode_base_module_destroy_field (ValaCCodeBaseModule* self,
                                                           ValaField* field,
                                                           ValaTargetValue* instance);
ValaCCodeExpression* bala_ccode_base_module_destroy_value (ValaCCodeBaseModule* self,
                                                           ValaTargetValue* value,
                                                           gboolean is_macro_definition);
void bala_ccode_base_module_emit_temp_var (ValaCCodeBaseModule* self,
                                           ValaLocalVariable* local,
                                           gboolean on_error);
void bala_ccode_base_module_append_scope_free (ValaCCodeBaseModule* self,
                                               ValaSymbol* sym,
                                               ValaCodeNode* stop_at);
void bala_ccode_base_module_append_local_free (ValaCCodeBaseModule* self,
                                               ValaSymbol* sym,
                                               ValaStatement* jump_stmt,
                                               ValaCodeNode* stop_at);
void bala_ccode_base_module_append_out_param_free (ValaCCodeBaseModule* self,
                                                   ValaMethod* m);
gboolean bala_ccode_base_module_variable_accessible_in_finally (ValaCCodeBaseModule* self,
                                                                ValaLocalVariable* local);
void bala_ccode_base_module_return_out_parameter (ValaCCodeBaseModule* self,
                                                  ValaParameter* param);
gchar* bala_ccode_base_module_get_symbol_lock_name (ValaCCodeBaseModule* self,
                                                    const gchar* symname);
ValaTargetValue* bala_ccode_base_module_get_local_cvalue (ValaCCodeBaseModule* self,
                                                          ValaLocalVariable* local);
ValaTargetValue* bala_ccode_base_module_get_parameter_cvalue (ValaCCodeBaseModule* self,
                                                              ValaParameter* param);
ValaTargetValue* bala_ccode_base_module_get_field_cvalue (ValaCCodeBaseModule* self,
                                                          ValaField* field,
                                                          ValaTargetValue* instance);
ValaTargetValue* bala_ccode_base_module_load_variable (ValaCCodeBaseModule* self,
                                                       ValaVariable* variable,
                                                       ValaTargetValue* value,
                                                       ValaExpression* expr);
ValaTargetValue* bala_ccode_base_module_load_this_parameter (ValaCCodeBaseModule* self,
                                                             ValaTypeSymbol* sym);
void bala_ccode_base_module_store_value (ValaCCodeBaseModule* self,
                                         ValaTargetValue* lvalue,
                                         ValaTargetValue* value,
                                         ValaSourceReference* source_reference);
gchar* bala_ccode_base_module_get_delegate_target_cname (ValaCCodeBaseModule* self,
                                                         const gchar* delegate_cname);
ValaCCodeExpression* bala_ccode_base_module_get_delegate_target_cexpression (ValaCCodeBaseModule* self,
                                                                             ValaExpression* delegate_expr,
                                                                             ValaCCodeExpression* * delegate_target_destroy_notify);
ValaCCodeExpression* bala_ccode_base_module_get_delegate_target_cvalue (ValaCCodeBaseModule* self,
                                                                        ValaTargetValue* value);
ValaCCodeExpression* bala_ccode_base_module_get_delegate_target_destroy_notify_cvalue (ValaCCodeBaseModule* self,
                                                                                       ValaTargetValue* value);
gchar* bala_ccode_base_module_get_delegate_target_destroy_notify_cname (ValaCCodeBaseModule* self,
                                                                        const gchar* delegate_cname);
gboolean bala_ccode_base_module_requires_copy (ValaDataType* type);
gboolean bala_ccode_base_module_requires_destroy (ValaDataType* type);
ValaTargetValue* bala_ccode_base_module_copy_value (ValaCCodeBaseModule* self,
                                                    ValaTargetValue* value,
                                                    ValaCodeNode* node);
void bala_ccode_base_module_generate_class_declaration (ValaCCodeBaseModule* self,
                                                        ValaClass* cl,
                                                        ValaCCodeFile* decl_space);
void bala_ccode_base_module_generate_interface_declaration (ValaCCodeBaseModule* self,
                                                            ValaInterface* iface,
                                                            ValaCCodeFile* decl_space);
gboolean bala_ccode_base_module_generate_method_declaration (ValaCCodeBaseModule* self,
                                                             ValaMethod* m,
                                                             ValaCCodeFile* decl_space);
void bala_ccode_base_module_generate_error_domain_declaration (ValaCCodeBaseModule* self,
                                                               ValaErrorDomain* edomain,
                                                               ValaCCodeFile* decl_space);
void bala_ccode_base_module_add_generic_type_arguments (ValaCCodeBaseModule* self,
                                                        ValaMap* arg_map,
                                                        ValaList* type_args,
                                                        ValaCodeNode* expr,
                                                        gboolean is_chainup,
                                                        ValaList* type_parameters);
ValaCCodeExpression* bala_ccode_base_module_handle_struct_argument (ValaCCodeBaseModule* self,
                                                                    ValaParameter* param,
                                                                    ValaExpression* arg,
                                                                    ValaCCodeExpression* cexpr);
ValaCCodeExpression* bala_ccode_base_module_deserialize_expression (ValaCCodeBaseModule* self,
                                                                    ValaDataType* type,
                                                                    ValaCCodeExpression* variant_expr,
                                                                    ValaCCodeExpression* expr,
                                                                    ValaCCodeExpression* error_expr,
                                                                    gboolean* may_fail);
ValaCCodeExpression* bala_ccode_base_module_serialize_expression (ValaCCodeBaseModule* self,
                                                                  ValaDataType* type,
                                                                  ValaCCodeExpression* expr);
ValaCCodeExpression* bala_ccode_base_module_create_type_check (ValaCCodeBaseModule* self,
                                                               ValaCCodeNode* ccodenode,
                                                               ValaDataType* type);
ValaCCodeExpression* bala_ccode_base_module_convert_from_generic_pointer (ValaCCodeBaseModule* self,
                                                                          ValaCCodeExpression* cexpr,
                                                                          ValaDataType* actual_type);
ValaCCodeExpression* bala_ccode_base_module_convert_to_generic_pointer (ValaCCodeBaseModule* self,
                                                                        ValaCCodeExpression* cexpr,
                                                                        ValaDataType* actual_type);
ValaTargetValue* bala_ccode_base_module_transform_value (ValaCCodeBaseModule* self,
                                                         ValaTargetValue* value,
                                                         ValaDataType* target_type,
                                                         ValaCodeNode* node);
ValaCCodeExpression* bala_ccode_base_module_get_implicit_cast_expression (ValaCCodeBaseModule* self,
                                                                          ValaCCodeExpression* source_cexpr,
                                                                          ValaDataType* expression_type,
                                                                          ValaDataType* target_type,
                                                                          ValaCodeNode* node);
void bala_ccode_base_module_store_property (ValaCCodeBaseModule* self,
                                            ValaProperty* prop,
                                            ValaExpression* instance,
                                            ValaTargetValue* value);
gboolean bala_ccode_base_module_add_wrapper (ValaCCodeBaseModule* self,
                                             const gchar* wrapper_name);
gboolean bala_ccode_base_module_add_generated_external_symbol (ValaCCodeBaseModule* self,
                                                               ValaSymbol* external_symbol);
ValaDataType* bala_ccode_base_module_get_callable_creturn_type (ValaCallable* c);
ValaCCodeExpression* bala_ccode_base_module_default_value_for_type (ValaCCodeBaseModule* self,
                                                                    ValaDataType* type,
                                                                    gboolean initializer_expression,
                                                                    gboolean on_error);
void bala_ccode_base_module_create_type_check_statement (ValaCCodeBaseModule* self,
                                                         ValaCodeNode* method_node,
                                                         ValaDataType* ret_type,
                                                         ValaTypeSymbol* t,
                                                         gboolean non_null,
                                                         const gchar* var_name);
gint bala_ccode_base_module_get_param_pos (ValaCCodeBaseModule* self,
                                           gdouble param_pos,
                                           gboolean ellipsis);
ValaCCodeExpression* bala_ccode_base_module_get_ccodenode (ValaCCodeBaseModule* self,
                                                           ValaExpression* node);
gboolean bala_ccode_base_module_is_lvalue_access_allowed (ValaCCodeBaseModule* self,
                                                          ValaDataType* type);
gboolean bala_ccode_base_module_requires_memset_init (ValaCCodeBaseModule* self,
                                                      ValaVariable* variable,
                                                      ValaCCodeExpression* * size);
ValaCCodeDeclaratorSuffix* bala_ccode_base_module_get_ccode_declarator_suffix (ValaCCodeBaseModule* self,
                                                                               ValaDataType* type);
ValaCCodeConstant* bala_ccode_base_module_get_signal_canonical_constant (ValaCCodeBaseModule* self,
                                                                         ValaSignal* sig,
                                                                         const gchar* detail);
ValaCCodeConstant* bala_ccode_base_module_get_property_canonical_cconstant (ValaCCodeBaseModule* self,
                                                                            ValaProperty* prop);
void bala_ccode_base_module_create_postcondition_statement (ValaCCodeBaseModule* self,
                                                            ValaExpression* postcondition);
ValaDataType* bala_ccode_base_module_get_this_type (ValaCCodeBaseModule* self);
ValaCCodeFunctionCall* bala_ccode_base_module_generate_instance_cast (ValaCCodeBaseModule* self,
                                                                      ValaCCodeExpression* expr,
                                                                      ValaTypeSymbol* type);
void bala_ccode_base_module_return_default_value (ValaCCodeBaseModule* self,
                                                  ValaDataType* return_type,
                                                  gboolean on_error);
void bala_ccode_base_module_generate_dynamic_method_wrapper (ValaCCodeBaseModule* self,
                                                             ValaDynamicMethod* method);
gboolean bala_ccode_base_module_method_has_wrapper (ValaCCodeBaseModule* self,
                                                    ValaMethod* method);
ValaCCodeExpression* bala_ccode_base_module_get_param_spec_cexpression (ValaCCodeBaseModule* self,
                                                                        ValaProperty* prop);
ValaCCodeExpression* bala_ccode_base_module_get_param_spec (ValaCCodeBaseModule* self,
                                                            ValaProperty* prop);
ValaCCodeExpression* bala_ccode_base_module_get_signal_creation (ValaCCodeBaseModule* self,
                                                                 ValaSignal* sig,
                                                                 ValaObjectTypeSymbol* type);
ValaCCodeExpression* bala_ccode_base_module_get_value_getter_function (ValaCCodeBaseModule* self,
                                                                       ValaDataType* type_reference);
ValaCCodeExpression* bala_ccode_base_module_get_value_setter_function (ValaCCodeBaseModule* self,
                                                                       ValaDataType* type_reference);
ValaCCodeExpression* bala_ccode_base_module_get_value_taker_function (ValaCCodeBaseModule* self,
                                                                      ValaDataType* type_reference);
void bala_ccode_base_module_register_dbus_info (ValaCCodeBaseModule* self,
                                                ValaCCodeBlock* block,
                                                ValaObjectTypeSymbol* bindable);
gchar* bala_ccode_base_module_get_dynamic_property_getter_cname (ValaCCodeBaseModule* self,
                                                                 ValaDynamicProperty* node);
gchar* bala_ccode_base_module_get_dynamic_property_setter_cname (ValaCCodeBaseModule* self,
                                                                 ValaDynamicProperty* node);
gchar* bala_ccode_base_module_get_dynamic_signal_cname (ValaCCodeBaseModule* self,
                                                        ValaDynamicSignal* node);
gchar* bala_ccode_base_module_get_dynamic_signal_connect_wrapper_name (ValaCCodeBaseModule* self,
                                                                       ValaDynamicSignal* node);
gchar* bala_ccode_base_module_get_dynamic_signal_connect_after_wrapper_name (ValaCCodeBaseModule* self,
                                                                             ValaDynamicSignal* node);
gchar* bala_ccode_base_module_get_dynamic_signal_disconnect_wrapper_name (ValaCCodeBaseModule* self,
                                                                          ValaDynamicSignal* node);
gchar* bala_ccode_base_module_get_array_length_cname (ValaCCodeBaseModule* self,
                                                      const gchar* array_cname,
                                                      gint dim);
gchar* bala_ccode_base_module_get_variable_array_length_cname (ValaCCodeBaseModule* self,
                                                               ValaVariable* variable,
                                                               gint dim);
ValaCCodeExpression* bala_ccode_base_module_get_array_length_cexpression (ValaCCodeBaseModule* self,
                                                                          ValaExpression* array_expr,
                                                                          gint dim);
ValaCCodeExpression* bala_ccode_base_module_get_array_length_cvalue (ValaCCodeBaseModule* self,
                                                                     ValaTargetValue* value,
                                                                     gint dim);
gchar* bala_ccode_base_module_get_array_size_cname (ValaCCodeBaseModule* self,
                                                    const gchar* array_cname);
void bala_ccode_base_module_add_simple_check (ValaCCodeBaseModule* self,
                                              ValaCodeNode* node,
                                              gboolean always_fails);
gchar* bala_ccode_base_module_generate_ready_function (ValaCCodeBaseModule* self,
                                                       ValaMethod* m);
ValaCCodeExpression* bala_ccode_base_module_get_boolean_cconstant (ValaCCodeBaseModule* self,
                                                                   gboolean b);
ValaCCodeBaseModuleEmitContext* bala_ccode_base_module_emit_context_new (ValaSymbol* symbol);
ValaCCodeBaseModuleEmitContext* bala_ccode_base_module_emit_context_construct (GType object_type,
                                                                               ValaSymbol* symbol);
void bala_ccode_base_module_emit_context_push_symbol (ValaCCodeBaseModuleEmitContext* self,
                                                      ValaSymbol* symbol);
void bala_ccode_base_module_emit_context_pop_symbol (ValaCCodeBaseModuleEmitContext* self);
gpointer bala_ccode_compiler_ref (gpointer instance);
void bala_ccode_compiler_unref (gpointer instance);
GParamSpec* bala_param_spec_ccode_compiler (const gchar* name,
                                            const gchar* nick,
                                            const gchar* blurb,
                                            GType object_type,
                                            GParamFlags flags);
void bala_value_set_ccode_compiler (GValue* value,
                                    gpointer v_object);
void bala_value_take_ccode_compiler (GValue* value,
                                     gpointer v_object);
gpointer bala_value_get_ccode_compiler (const GValue* value);
GType bala_ccode_compiler_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaCCodeCompiler, bala_ccode_compiler_unref)
ValaCCodeCompiler* bala_ccode_compiler_new (void);
ValaCCodeCompiler* bala_ccode_compiler_construct (GType object_type);
void bala_ccode_compiler_compile (ValaCCodeCompiler* self,
                                  ValaCodeContext* context,
                                  const gchar* cc_command,
                                  gchar** cc_options,
                                  gint cc_options_length1);
ValaCCodeControlFlowModule* bala_ccode_control_flow_module_construct (GType object_type);
GType bala_ccode_delegate_module_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaCCodeDelegateModule, bala_code_visitor_unref)
gchar* bala_ccode_delegate_module_generate_delegate_wrapper (ValaCCodeDelegateModule* self,
                                                             ValaMethod* m,
                                                             ValaDelegateType* dt,
                                                             ValaCodeNode* node);
ValaCCodeDelegateModule* bala_ccode_delegate_module_new (void);
ValaCCodeDelegateModule* bala_ccode_delegate_module_construct (GType object_type);
ValaCCodeMemberAccessModule* bala_ccode_member_access_module_construct (GType object_type);
ValaCCodeMethodCallModule* bala_ccode_method_call_module_new (void);
ValaCCodeMethodCallModule* bala_ccode_method_call_module_construct (GType object_type);
void bala_ccode_method_module_generate_method_result_declaration (ValaCCodeMethodModule* self,
                                                                  ValaMethod* m,
                                                                  ValaCCodeFile* decl_space,
                                                                  ValaCCodeFunction* cfunc,
                                                                  ValaMap* cparam_map,
                                                                  ValaMap* carg_map);
void bala_ccode_method_module_complete_async (ValaCCodeMethodModule* self);
ValaCCodeParameter* bala_ccode_method_module_generate_parameter (ValaCCodeMethodModule* self,
                                                                 ValaParameter* param,
                                                                 ValaCCodeFile* decl_space,
                                                                 ValaMap* cparam_map,
                                                                 ValaMap* carg_map);
void bala_ccode_method_module_generate_vfunc (ValaCCodeMethodModule* self,
                                              ValaMethod* m,
                                              ValaDataType* return_type,
                                              ValaMap* cparam_map,
                                              ValaMap* carg_map,
                                              const gchar* suffix,
                                              gint direction);
ValaCCodeMethodModule* bala_ccode_method_module_construct (GType object_type);
ValaCCodeStructModule* bala_ccode_struct_module_construct (GType object_type);
gpointer bala_typeregister_function_ref (gpointer instance);
void bala_typeregister_function_unref (gpointer instance);
GParamSpec* bala_param_spec_typeregister_function (const gchar* name,
                                                   const gchar* nick,
                                                   const gchar* blurb,
                                                   GType object_type,
                                                   GParamFlags flags);
void bala_value_set_typeregister_function (GValue* value,
                                           gpointer v_object);
void bala_value_take_typeregister_function (GValue* value,
                                            gpointer v_object);
gpointer bala_value_get_typeregister_function (const GValue* value);
GType bala_typeregister_function_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaTypeRegisterFunction, bala_typeregister_function_unref)
GType bala_class_register_function_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaClassRegisterFunction, bala_typeregister_function_unref)
ValaClass* bala_class_register_function_get_class_reference (ValaClassRegisterFunction* self);
void bala_class_register_function_set_class_reference (ValaClassRegisterFunction* self,
                                                       ValaClass* value);
ValaClassRegisterFunction* bala_class_register_function_new (ValaClass* cl);
ValaClassRegisterFunction* bala_class_register_function_construct (GType object_type,
                                                                   ValaClass* cl);
GType bala_ctype_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaCType, bala_code_node_unref)
const gchar* bala_ctype_get_ctype_name (ValaCType* self);
void bala_ctype_set_ctype_name (ValaCType* self,
                                const gchar* value);
const gchar* bala_ctype_get_cdefault_value (ValaCType* self);
void bala_ctype_set_cdefault_value (ValaCType* self,
                                    const gchar* value);
ValaCType* bala_ctype_new (const gchar* ctype_name,
                           const gchar* cdefault_value);
ValaCType* bala_ctype_construct (GType object_type,
                                 const gchar* ctype_name,
                                 const gchar* cdefault_value);
GType bala_enum_register_function_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaEnumRegisterFunction, bala_typeregister_function_unref)
ValaEnum* bala_enum_register_function_get_enum_reference (ValaEnumRegisterFunction* self);
void bala_enum_register_function_set_enum_reference (ValaEnumRegisterFunction* self,
                                                     ValaEnum* value);
ValaEnumRegisterFunction* bala_enum_register_function_new (ValaEnum* en);
ValaEnumRegisterFunction* bala_enum_register_function_construct (GType object_type,
                                                                 ValaEnum* en);
GType bala_gerror_module_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaGErrorModule, bala_code_visitor_unref)
GType bala_gtype_module_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaGTypeModule, bala_code_visitor_unref)
GType bala_gobject_module_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaGObjectModule, bala_code_visitor_unref)
GType bala_gsignal_module_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaGSignalModule, bala_code_visitor_unref)
GType bala_gtk_module_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaGtkModule, bala_code_visitor_unref)
GType bala_gasync_module_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaGAsyncModule, bala_code_visitor_unref)
void bala_gasync_module_append_struct (ValaGAsyncModule* self,
                                       ValaCCodeStruct* structure);
gchar* bala_gasync_module_generate_async_callback_wrapper (ValaGAsyncModule* self);
ValaGAsyncModule* bala_gasync_module_new (void);
ValaGAsyncModule* bala_gasync_module_construct (GType object_type);
GType bala_gvalue_module_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaGValueModule, bala_code_visitor_unref)
GType bala_gvariant_module_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaGVariantModule, bala_code_visitor_unref)
GType bala_gd_bus_module_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaGDBusModule, bala_code_visitor_unref)
GType bala_gd_bus_client_module_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaGDBusClientModule, bala_code_visitor_unref)
ValaCCodeConstant* bala_gd_bus_client_module_get_dbus_timeout (ValaGDBusClientModule* self,
                                                               ValaSymbol* symbol);
ValaGDBusClientModule* bala_gd_bus_client_module_new (void);
ValaGDBusClientModule* bala_gd_bus_client_module_construct (GType object_type);
gchar* bala_gd_bus_module_get_dbus_name (ValaTypeSymbol* symbol);
gchar* bala_gd_bus_module_get_dbus_name_for_member (ValaSymbol* symbol);
gint bala_gd_bus_module_get_dbus_timeout_for_member (ValaSymbol* symbol);
gboolean bala_gd_bus_module_is_dbus_visible (ValaCodeNode* node);
gboolean bala_gd_bus_module_is_dbus_no_reply (ValaMethod* m);
gchar* bala_gd_bus_module_dbus_result_name (ValaMethod* m);
gboolean bala_gd_bus_module_dbus_method_uses_file_descriptor (ValaGDBusModule* self,
                                                              ValaMethod* method);
void bala_gd_bus_module_send_dbus_value (ValaGDBusModule* self,
                                         ValaDataType* type,
                                         ValaCCodeExpression* builder_expr,
                                         ValaCCodeExpression* expr,
                                         ValaSymbol* sym);
void bala_gd_bus_module_receive_dbus_value (ValaGDBusModule* self,
                                            ValaDataType* type,
                                            ValaCCodeExpression* message_expr,
                                            ValaCCodeExpression* iter_expr,
                                            ValaCCodeExpression* target_expr,
                                            ValaSymbol* sym,
                                            ValaCCodeExpression* error_expr,
                                            gboolean* may_fail);
ValaCCodeExpression* bala_gd_bus_module_get_interface_info (ValaGDBusModule* self,
                                                            ValaObjectTypeSymbol* sym);
ValaGDBusModule* bala_gd_bus_module_new (void);
ValaGDBusModule* bala_gd_bus_module_construct (GType object_type);
GType bala_gd_bus_server_module_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaGDBusServerModule, bala_code_visitor_unref)
ValaGDBusServerModule* bala_gd_bus_server_module_new (void);
ValaGDBusServerModule* bala_gd_bus_server_module_construct (GType object_type);
void bala_gerror_module_return_with_exception (ValaGErrorModule* self,
                                               ValaCCodeExpression* error_expr);
ValaGErrorModule* bala_gerror_module_new (void);
ValaGErrorModule* bala_gerror_module_construct (GType object_type);
GType bala_gir_writer_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaGIRWriter, bala_code_visitor_unref)
gchar* bala_gir_writer_get_interface_comment (ValaGIRWriter* self,
                                              ValaInterface* iface);
gchar* bala_gir_writer_get_struct_comment (ValaGIRWriter* self,
                                           ValaStruct* st);
gchar* bala_gir_writer_get_enum_comment (ValaGIRWriter* self,
                                         ValaEnum* en);
gchar* bala_gir_writer_get_class_comment (ValaGIRWriter* self,
                                          ValaClass* c);
gchar* bala_gir_writer_get_error_code_comment (ValaGIRWriter* self,
                                               ValaErrorCode* ecode);
gchar* bala_gir_writer_get_enum_value_comment (ValaGIRWriter* self,
                                               ValaEnumValue* ev);
gchar* bala_gir_writer_get_constant_comment (ValaGIRWriter* self,
                                             ValaConstant* c);
gchar* bala_gir_writer_get_error_domain_comment (ValaGIRWriter* self,
                                                 ValaErrorDomain* edomain);
gchar* bala_gir_writer_get_field_comment (ValaGIRWriter* self,
                                          ValaField* f);
gchar* bala_gir_writer_get_delegate_comment (ValaGIRWriter* self,
                                             ValaDelegate* cb);
gchar* bala_gir_writer_get_method_comment (ValaGIRWriter* self,
                                           ValaMethod* m);
gchar* bala_gir_writer_get_property_comment (ValaGIRWriter* self,
                                             ValaProperty* prop);
gchar* bala_gir_writer_get_delegate_return_comment (ValaGIRWriter* self,
                                                    ValaDelegate* cb);
gchar* bala_gir_writer_get_signal_return_comment (ValaGIRWriter* self,
                                                  ValaSignal* sig);
gchar* bala_gir_writer_get_method_return_comment (ValaGIRWriter* self,
                                                  ValaMethod* m);
gchar* bala_gir_writer_get_signal_comment (ValaGIRWriter* self,
                                           ValaSignal* sig);
gchar* bala_gir_writer_get_parameter_comment (ValaGIRWriter* self,
                                              ValaParameter* param);
void bala_gir_writer_write_includes (ValaGIRWriter* self);
void bala_gir_writer_write_file (ValaGIRWriter* self,
                                 ValaCodeContext* context,
                                 const gchar* directory,
                                 const gchar* gir_filename,
                                 const gchar* gir_namespace,
                                 const gchar* gir_version,
                                 const gchar* package,
                                 const gchar* gir_shared_library);
ValaGIRWriter* bala_gir_writer_new (void);
ValaGIRWriter* bala_gir_writer_construct (GType object_type);
GType bala_glib_value_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaGLibValue, bala_target_value_unref)
ValaGLibValue* bala_glib_value_new (ValaDataType* value_type,
                                    ValaCCodeExpression* cvalue,
                                    gboolean lvalue);
ValaGLibValue* bala_glib_value_construct (GType object_type,
                                          ValaDataType* value_type,
                                          ValaCCodeExpression* cvalue,
                                          gboolean lvalue);
void bala_glib_value_append_array_length_cvalue (ValaGLibValue* self,
                                                 ValaCCodeExpression* length_cvalue);
ValaGLibValue* bala_glib_value_copy (ValaGLibValue* self);
ValaCCodeExpression* bala_get_cvalue (ValaExpression* expr);
ValaCCodeExpression* bala_get_cvalue_ (ValaTargetValue* value);
void bala_set_cvalue (ValaExpression* expr,
                      ValaCCodeExpression* cvalue);
ValaCCodeExpression* bala_get_array_size_cvalue (ValaTargetValue* value);
void bala_set_array_size_cvalue (ValaTargetValue* value,
                                 ValaCCodeExpression* cvalue);
ValaCCodeExpression* bala_get_delegate_target (ValaExpression* expr);
void bala_set_delegate_target (ValaExpression* expr,
                               ValaCCodeExpression* delegate_target);
ValaCCodeExpression* bala_get_delegate_target_destroy_notify (ValaExpression* expr);
void bala_set_delegate_target_destroy_notify (ValaExpression* expr,
                                              ValaCCodeExpression* destroy_notify);
void bala_append_array_length (ValaExpression* expr,
                               ValaCCodeExpression* size);
ValaList* bala_get_array_lengths (ValaExpression* expr);
gboolean bala_get_lvalue (ValaTargetValue* value);
gboolean bala_get_non_null (ValaTargetValue* value);
const gchar* bala_get_ctype (ValaTargetValue* value);
gboolean bala_get_array_null_terminated (ValaTargetValue* value);
ValaCCodeExpression* bala_get_array_length_cexpr (ValaTargetValue* value);
ValaGObjectModule* bala_gobject_module_new (void);
ValaGObjectModule* bala_gobject_module_construct (GType object_type);
ValaGtkModule* bala_gtk_module_new (void);
ValaGtkModule* bala_gtk_module_construct (GType object_type);
ValaGSignalModule* bala_gsignal_module_new (void);
ValaGSignalModule* bala_gsignal_module_construct (GType object_type);
void bala_gtype_module_generate_virtual_method_declaration (ValaGTypeModule* self,
                                                            ValaMethod* m,
                                                            ValaCCodeFile* decl_space,
                                                            ValaCCodeStruct* type_struct);
void bala_gtype_module_generate_class_init (ValaGTypeModule* self,
                                            ValaClass* cl);
void bala_gtype_module_end_instance_init (ValaGTypeModule* self,
                                          ValaClass* cl);
ValaGTypeModule* bala_gtype_module_new (void);
ValaGTypeModule* bala_gtype_module_construct (GType object_type);
ValaGValueModule* bala_gvalue_module_new (void);
ValaGValueModule* bala_gvalue_module_construct (GType object_type);
gchar* bala_gvariant_module_get_dbus_signature (ValaSymbol* symbol);
ValaCCodeFunction* bala_gvariant_module_generate_enum_from_string_function_declaration (ValaGVariantModule* self,
                                                                                        ValaEnum* en);
ValaCCodeFunction* bala_gvariant_module_generate_enum_from_string_function (ValaGVariantModule* self,
                                                                            ValaEnum* en);
void bala_gvariant_module_read_expression (ValaGVariantModule* self,
                                           ValaDataType* type,
                                           ValaCCodeExpression* iter_expr,
                                           ValaCCodeExpression* target_expr,
                                           ValaSymbol* sym,
                                           ValaCCodeExpression* error_expr,
                                           gboolean* may_fail);
ValaCCodeFunction* bala_gvariant_module_generate_enum_to_string_function_declaration (ValaGVariantModule* self,
                                                                                      ValaEnum* en);
ValaCCodeFunction* bala_gvariant_module_generate_enum_to_string_function (ValaGVariantModule* self,
                                                                          ValaEnum* en);
void bala_gvariant_module_write_expression (ValaGVariantModule* self,
                                            ValaDataType* type,
                                            ValaCCodeExpression* builder_expr,
                                            ValaCCodeExpression* expr,
                                            ValaSymbol* sym);
ValaGVariantModule* bala_gvariant_module_new (void);
ValaGVariantModule* bala_gvariant_module_construct (GType object_type);
GType bala_interface_register_function_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaInterfaceRegisterFunction, bala_typeregister_function_unref)
ValaInterface* bala_interface_register_function_get_interface_reference (ValaInterfaceRegisterFunction* self);
void bala_interface_register_function_set_interface_reference (ValaInterfaceRegisterFunction* self,
                                                               ValaInterface* value);
ValaInterfaceRegisterFunction* bala_interface_register_function_new (ValaInterface* iface);
ValaInterfaceRegisterFunction* bala_interface_register_function_construct (GType object_type,
                                                                           ValaInterface* iface);
GType bala_struct_register_function_get_type (void) G_GNUC_CONST;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ValaStructRegisterFunction, bala_typeregister_function_unref)
ValaStruct* bala_struct_register_function_get_struct_reference (ValaStructRegisterFunction* self);
void bala_struct_register_function_set_struct_reference (ValaStructRegisterFunction* self,
                                                         ValaStruct* value);
ValaStructRegisterFunction* bala_struct_register_function_new (ValaStruct* st);
ValaStructRegisterFunction* bala_struct_register_function_construct (GType object_type,
                                                                     ValaStruct* st);
void bala_typeregister_function_init_from_type (ValaTypeRegisterFunction* self,
                                                ValaCodeContext* context,
                                                gboolean plugin,
                                                gboolean declaration_only);
ValaTypeSymbol* bala_typeregister_function_get_type_declaration (ValaTypeRegisterFunction* self);
gchar* bala_typeregister_function_get_type_struct_name (ValaTypeRegisterFunction* self);
gchar* bala_typeregister_function_get_base_init_func_name (ValaTypeRegisterFunction* self);
gchar* bala_typeregister_function_get_class_finalize_func_name (ValaTypeRegisterFunction* self);
gchar* bala_typeregister_function_get_base_finalize_func_name (ValaTypeRegisterFunction* self);
gchar* bala_typeregister_function_get_class_init_func_name (ValaTypeRegisterFunction* self);
gchar* bala_typeregister_function_get_instance_struct_size (ValaTypeRegisterFunction* self);
gchar* bala_typeregister_function_get_instance_init_func_name (ValaTypeRegisterFunction* self);
gchar* bala_typeregister_function_get_parent_type_name (ValaTypeRegisterFunction* self);
gchar* bala_typeregister_function_get_gtype_value_table_init_function_name (ValaTypeRegisterFunction* self);
gchar* bala_typeregister_function_get_gtype_value_table_peek_pointer_function_name (ValaTypeRegisterFunction* self);
gchar* bala_typeregister_function_get_gtype_value_table_free_function_name (ValaTypeRegisterFunction* self);
gchar* bala_typeregister_function_get_gtype_value_table_copy_function_name (ValaTypeRegisterFunction* self);
gchar* bala_typeregister_function_get_gtype_value_table_lcopy_value_function_name (ValaTypeRegisterFunction* self);
gchar* bala_typeregister_function_get_gtype_value_table_collect_value_function_name (ValaTypeRegisterFunction* self);
gchar* bala_typeregister_function_get_type_flags (ValaTypeRegisterFunction* self);
ValaCCodeFragment* bala_typeregister_function_get_type_interface_init_declaration (ValaTypeRegisterFunction* self);
void bala_typeregister_function_get_type_interface_init_statements (ValaTypeRegisterFunction* self,
                                                                    ValaCodeContext* context,
                                                                    ValaCCodeBlock* block,
                                                                    gboolean plugin);
ValaCCodeFragment* bala_typeregister_function_get_source_declaration (ValaTypeRegisterFunction* self);
ValaCCodeFragment* bala_typeregister_function_get_declaration (ValaTypeRegisterFunction* self);
ValaCCodeFragment* bala_typeregister_function_get_definition (ValaTypeRegisterFunction* self);
ValaSymbolAccessibility bala_typeregister_function_get_accessibility (ValaTypeRegisterFunction* self);
ValaTypeRegisterFunction* bala_typeregister_function_construct (GType object_type);

G_END_DECLS

#endif
