/* codegen.bapi generated by balac, do not modify. */

namespace Bala {
	[CCode (cheader_filename = "balacodegen.h")]
	public class CCodeArrayModule : Bala.CCodeMethodCallModule {
		public CCodeArrayModule ();
		public override void append_params_array (Bala.Method m);
		public override string? append_struct_array_destroy (Bala.Struct st);
		public override string? append_struct_array_free (Bala.Struct st);
		public override void append_bala_array_free ();
		public override void append_bala_array_length ();
		public override void append_bala_array_move ();
		public override Bala.TargetValue? copy_value (Bala.TargetValue value, Bala.CodeNode node);
		public override Bala.CCodeExpression destroy_value (Bala.TargetValue value, bool is_macro_definition = false);
		public override Bala.CCodeParameter generate_parameter (Bala.Parameter param, Bala.CCodeFile decl_space, Bala.Map<int,Bala.CCodeParameter> cparam_map, Bala.Map<int,Bala.CCodeExpression>? carg_map);
		public override Bala.CCodeExpression get_array_length_cexpression (Bala.Expression array_expr, int dim = -1);
		public override string get_array_length_cname (string array_cname, int dim);
		public override Bala.CCodeExpression get_array_length_cvalue (Bala.TargetValue value, int dim = -1);
		public override string get_array_size_cname (string array_cname);
		public override Bala.CCodeExpression? get_dup_func_expression (Bala.DataType type, Bala.SourceReference? source_reference, bool is_chainup);
		public override string get_variable_array_length_cname (Bala.Variable variable, int dim);
		public override void visit_array_creation_expression (Bala.ArrayCreationExpression expr);
		public override void visit_assignment (Bala.Assignment assignment);
		public override void visit_element_access (Bala.ElementAccess expr);
		public override void visit_slice_expression (Bala.SliceExpression expr);
	}
	[CCode (cheader_filename = "balacodegen.h")]
	public class CCodeAssignmentModule : Bala.CCodeMemberAccessModule {
		public CCodeAssignmentModule ();
		public override void store_field (Bala.Field field, Bala.TargetValue? instance, Bala.TargetValue value, Bala.SourceReference? source_reference = null);
		public override void store_local (Bala.LocalVariable local, Bala.TargetValue value, bool initializer, Bala.SourceReference? source_reference = null);
		public override void store_parameter (Bala.Parameter param, Bala.TargetValue _value, bool capturing_parameter = false, Bala.SourceReference? source_reference = null);
		public override void store_value (Bala.TargetValue lvalue, Bala.TargetValue value, Bala.SourceReference? source_reference = null);
		public override void visit_assignment (Bala.Assignment assignment);
	}
	[CCode (cheader_filename = "balacodegen.h")]
	public class CCodeAttribute : Bala.AttributeCache {
		public CCodeAttribute (Bala.CodeNode node);
		public bool array_length { get; }
		public string? array_length_expr { get; private set; }
		public string? array_length_name { get; private set; }
		public string array_length_type { get; }
		public bool array_null_terminated { get; }
		public string const_name { get; }
		public string copy_function { get; }
		public string ctype { get; }
		public string default_value { get; }
		public string default_value_on_error { get; }
		public bool delegate_target { get; }
		public string delegate_target_destroy_notify_name { get; }
		public string delegate_target_name { get; }
		public string destroy_function { get; }
		public string dup_function { get; }
		public string feature_test_macros { get; }
		public bool finish_instance { get; }
		public string finish_name { get; }
		public string finish_real_name { get; }
		public string finish_vfunc_name { get; }
		public string free_function { get; }
		public bool free_function_address_of { get; }
		public string get_value_function { get; }
		public string header_filenames { get; }
		public string lower_case_prefix { get; }
		public string lower_case_suffix { get; }
		public string marshaller_type_name { get; }
		public string name { get; }
		public string param_spec_function { get; }
		public double pos { get; }
		public string prefix { get; }
		public string real_name { get; }
		public string ref_function { get; }
		public bool ref_function_void { get; }
		public string ref_sink_function { get; }
		public string sentinel { get; }
		public string set_value_function { get; }
		public string take_value_function { get; }
		public string type_id { get; }
		public string type_name { get; }
		public string unref_function { get; }
		public string vfunc_name { get; }
	}
	[CCode (cheader_filename = "balacodegen.h")]
	public abstract class CCodeBaseModule : Bala.CodeGenerator {
		public class EmitContext {
			public Bala.CCodeFunction ccode;
			public Bala.ArrayList<Bala.CCodeFunction> ccode_stack;
			public Bala.Map<Bala.LocalVariable,int> closure_variable_clash_map;
			public Bala.Map<string,int> closure_variable_count_map;
			public Bala.CatchClause current_catch;
			public int current_inner_error_id;
			public bool current_method_inner_error;
			public bool current_method_return;
			public Bala.Symbol? current_symbol;
			public Bala.TryStatement current_try;
			public int current_try_id;
			public bool is_in_method_precondition;
			public int next_coroutine_state;
			public int next_temp_var_id;
			public int next_try_id;
			public Bala.ArrayList<Bala.Symbol> symbol_stack;
			public Bala.ArrayList<Bala.TargetValue> temp_ref_values;
			public Bala.Map<string,string> variable_name_map;
			public EmitContext (Bala.Symbol? symbol = null);
			public void pop_symbol ();
			public void push_symbol (Bala.Symbol symbol);
		}
		public Bala.CCodeBaseModule.EmitContext base_finalize_context;
		public Bala.CCodeBaseModule.EmitContext base_init_context;
		public Bala.DataType bool_type;
		public static int ccode_attribute_cache_index;
		public Bala.CCodeFile cfile;
		public Bala.DataType char_type;
		public Bala.CCodeBaseModule.EmitContext class_finalize_context;
		public Bala.CCodeBaseModule.EmitContext class_init_context;
		public Bala.CCodeStruct closure_struct;
		public Bala.CCodeLineDirective? current_line;
		public Bala.TypeSymbol dbus_proxy_type;
		public Bala.DelegateType delegate_target_destroy_type;
		public Bala.DataType delegate_target_type;
		public Bala.DataType double_type;
		public Bala.CCodeBaseModule.EmitContext emit_context;
		public Bala.DataType float_type;
		public Bala.TypeSymbol garray_type;
		public Bala.TypeSymbol gbytearray_type;
		public Bala.Struct gcond_type;
		public Bala.ErrorType gerror_type;
		public Bala.Class glist_type;
		public Bala.Struct gmutex_type;
		public Bala.Class gnode_type;
		public Bala.TypeSymbol gobject_type;
		public Bala.TypeSymbol gptrarray_type;
		public Bala.DataType gquark_type;
		public Bala.Class gqueue_type;
		public Bala.Struct grecmutex_type;
		public Bala.Struct grwlock_type;
		public Bala.Class gslist_type;
		public Bala.Class gsource_type;
		public Bala.TypeSymbol gstringbuilder_type;
		public Bala.TypeSymbol gthreadpool_type;
		public Bala.Class gtk_widget_type;
		public Bala.TypeSymbol gtype_type;
		public Bala.Struct gvalue_type;
		public Bala.Class gvaluearray_type;
		public Bala.Class gvariant_type;
		public Bala.CCodeFile header_file;
		public bool in_plugin;
		public Bala.CCodeBaseModule.EmitContext instance_finalize_context;
		public Bala.CCodeBaseModule.EmitContext instance_init_context;
		public Bala.DataType int16_type;
		public Bala.DataType int32_type;
		public Bala.DataType int64_type;
		public Bala.DataType int8_type;
		public Bala.DataType int_type;
		public Bala.CCodeFile internal_header_file;
		public Bala.DataType long_type;
		public string module_init_param_name;
		public Bala.Struct mutex_type;
		public int next_regex_id;
		public Bala.CCodeStruct param_spec_struct;
		public Bala.DataType pointer_type;
		public Bala.Set<string> predefined_marshal_set;
		public Bala.CCodeEnum prop_enum;
		public Bala.DataType regex_type;
		public bool requires_array_free;
		public bool requires_array_length;
		public bool requires_array_move;
		public bool requires_array_n_elements;
		public bool requires_assert;
		public bool requires_clear_mutex;
		public static Bala.Set<string> reserved_identifiers;
		public Bala.Symbol root_symbol;
		public Bala.DataType short_type;
		public Bala.CCodeEnum signal_enum;
		public Bala.DataType size_t_type;
		public Bala.DataType string_type;
		public Bala.TypeSymbol type_module_type;
		public Bala.DataType uchar_type;
		public Bala.DataType uint16_type;
		public Bala.DataType uint32_type;
		public Bala.DataType uint64_type;
		public Bala.DataType uint8_type;
		public Bala.DataType uint_type;
		public Bala.DataType ulong_type;
		public Bala.DataType? unichar_type;
		public Bala.Set<string> user_marshal_set;
		public Bala.DataType ushort_type;
		public Bala.DataType void_type;
		public Bala.Set<string> wrappers;
		protected CCodeBaseModule ();
		public bool add_generated_external_symbol (Bala.Symbol external_symbol);
		public void add_generic_type_arguments (Bala.Map<int,Bala.CCodeExpression> arg_map, Bala.List<Bala.DataType> type_args, Bala.CodeNode expr, bool is_chainup = false, Bala.List<Bala.TypeParameter>? type_parameters = null);
		public virtual void add_simple_check (Bala.CodeNode node, bool always_fails = false);
		public bool add_symbol_declaration (Bala.CCodeFile decl_space, Bala.Symbol sym, string name);
		public bool add_wrapper (string wrapper_name);
		public void append_field (Bala.CCodeStruct ccode_struct, Bala.Field f, Bala.CCodeFile decl_space);
		public void append_local_free (Bala.Symbol sym, Bala.Statement? jump_stmt = null, Bala.CodeNode? stop_at = null);
		public void append_out_param_free (Bala.Method? m);
		public virtual void append_params_array (Bala.Method m);
		protected virtual void append_scope_free (Bala.Symbol sym, Bala.CodeNode? stop_at = null);
		public virtual string? append_struct_array_destroy (Bala.Struct st);
		public virtual string? append_struct_array_free (Bala.Struct st);
		public virtual void append_bala_array_free ();
		public virtual void append_bala_array_length ();
		public virtual void append_bala_array_move ();
		public void append_bala_clear_mutex (string typename, string funcprefix);
		public Bala.CCodeExpression convert_from_generic_pointer (Bala.CCodeExpression cexpr, Bala.DataType actual_type);
		public Bala.CCodeExpression convert_to_generic_pointer (Bala.CCodeExpression cexpr, Bala.DataType actual_type);
		public virtual Bala.TargetValue? copy_value (Bala.TargetValue value, Bala.CodeNode node);
		public void create_postcondition_statement (Bala.Expression postcondition);
		public Bala.TargetValue create_temp_value (Bala.DataType type, bool init, Bala.CodeNode node_reference, bool? value_owned = null);
		public Bala.CCodeExpression? create_type_check (Bala.CCodeNode ccodenode, Bala.DataType type);
		public virtual void create_type_check_statement (Bala.CodeNode method_node, Bala.DataType ret_type, Bala.TypeSymbol t, bool non_null, string var_name);
		public Bala.CCodeExpression? default_value_for_type (Bala.DataType type, bool initializer_expression, bool on_error = false);
		public virtual Bala.CCodeExpression? deserialize_expression (Bala.DataType type, Bala.CCodeExpression variant_expr, Bala.CCodeExpression? expr, Bala.CCodeExpression? error_expr = null, out bool may_fail = null);
		public Bala.CCodeExpression destroy_field (Bala.Field field, Bala.TargetValue? instance);
		public Bala.CCodeExpression destroy_local (Bala.LocalVariable local);
		public Bala.CCodeExpression destroy_parameter (Bala.Parameter param);
		public virtual Bala.CCodeExpression destroy_value (Bala.TargetValue value, bool is_macro_definition = false);
		public override void emit (Bala.CodeContext context);
		public void emit_temp_var (Bala.LocalVariable local, bool on_error = false);
		public virtual void generate_class_declaration (Bala.Class cl, Bala.CCodeFile decl_space);
		public virtual void generate_class_struct_declaration (Bala.Class cl, Bala.CCodeFile decl_space);
		public void generate_constant_declaration (Bala.Constant c, Bala.CCodeFile decl_space, bool definition = false);
		public virtual void generate_cparameters (Bala.Method m, Bala.CCodeFile decl_space, Bala.Map<int,Bala.CCodeParameter> cparam_map, Bala.CCodeFunction func, Bala.CCodeFunctionDeclarator? vdeclarator = null, Bala.Map<int,Bala.CCodeExpression>? carg_map = null, Bala.CCodeFunctionCall? vcall = null, int direction = 3);
		public virtual void generate_delegate_declaration (Bala.Delegate d, Bala.CCodeFile decl_space);
		protected string generate_destroy_function_content_of_wrapper (Bala.DataType type);
		protected string generate_dup_func_wrapper (Bala.DataType type);
		public virtual void generate_dynamic_method_wrapper (Bala.DynamicMethod method);
		public virtual bool generate_enum_declaration (Bala.Enum en, Bala.CCodeFile decl_space);
		public virtual void generate_error_domain_declaration (Bala.ErrorDomain edomain, Bala.CCodeFile decl_space);
		public void generate_field_declaration (Bala.Field f, Bala.CCodeFile decl_space);
		protected string generate_free_func_wrapper (Bala.DataType type);
		protected string generate_free_function_address_of_wrapper (Bala.DataType type);
		public Bala.CCodeFunctionCall generate_instance_cast (Bala.CCodeExpression expr, Bala.TypeSymbol type);
		public virtual void generate_interface_declaration (Bala.Interface iface, Bala.CCodeFile decl_space);
		public virtual bool generate_method_declaration (Bala.Method m, Bala.CCodeFile decl_space);
		public void generate_property_accessor_declaration (Bala.PropertyAccessor acc, Bala.CCodeFile decl_space);
		public virtual string generate_ready_function (Bala.Method m);
		public virtual void generate_struct_declaration (Bala.Struct st, Bala.CCodeFile decl_space);
		public void generate_type_declaration (Bala.DataType type, Bala.CCodeFile decl_space);
		public virtual Bala.CCodeExpression get_array_length_cexpression (Bala.Expression array_expr, int dim = -1);
		public virtual string get_array_length_cname (string array_cname, int dim);
		public virtual Bala.CCodeExpression get_array_length_cvalue (Bala.TargetValue value, int dim = -1);
		public virtual string get_array_size_cname (string array_cname);
		public int get_block_id (Bala.Block b);
		public Bala.CCodeExpression get_boolean_cconstant (bool b);
		public static Bala.DataType get_callable_creturn_type (Bala.Callable c);
		public Bala.CCodeDeclaratorSuffix? get_ccode_declarator_suffix (Bala.DataType type);
		public Bala.CCodeExpression? get_ccodenode (Bala.Expression node);
		public Bala.CCodeExpression get_cexpression (string name);
		public virtual Bala.CCodeExpression get_delegate_target_cexpression (Bala.Expression delegate_expr, out Bala.CCodeExpression delegate_target_destroy_notify);
		public virtual string get_delegate_target_cname (string delegate_cname);
		public virtual Bala.CCodeExpression get_delegate_target_cvalue (Bala.TargetValue value);
		public virtual string get_delegate_target_destroy_notify_cname (string delegate_cname);
		public virtual Bala.CCodeExpression get_delegate_target_destroy_notify_cvalue (Bala.TargetValue value);
		public Bala.CCodeExpression? get_destroy0_func_expression (Bala.DataType type, bool is_chainup = false);
		public Bala.CCodeExpression? get_destroy_func_expression (Bala.DataType type, bool is_chainup = false);
		public virtual Bala.CCodeExpression? get_dup_func_expression (Bala.DataType type, Bala.SourceReference? source_reference, bool is_chainup = false);
		public virtual string get_dynamic_property_getter_cname (Bala.DynamicProperty node);
		public virtual string get_dynamic_property_setter_cname (Bala.DynamicProperty node);
		public virtual string get_dynamic_signal_cname (Bala.DynamicSignal node);
		public virtual string get_dynamic_signal_connect_after_wrapper_name (Bala.DynamicSignal node);
		public virtual string get_dynamic_signal_connect_wrapper_name (Bala.DynamicSignal node);
		public virtual string get_dynamic_signal_disconnect_wrapper_name (Bala.DynamicSignal node);
		public abstract Bala.TargetValue get_field_cvalue (Bala.Field field, Bala.TargetValue? instance);
		public virtual Bala.CCodeExpression get_implicit_cast_expression (Bala.CCodeExpression source_cexpr, Bala.DataType? expression_type, Bala.DataType? target_type, Bala.CodeNode? node);
		public Bala.CCodeExpression get_inner_error_cexpression ();
		public Bala.CCodeExpression get_local_cexpression (Bala.LocalVariable local);
		public string get_local_cname (Bala.LocalVariable local);
		public abstract Bala.TargetValue get_local_cvalue (Bala.LocalVariable local);
		public int get_param_pos (double param_pos, bool ellipsis = false);
		public virtual Bala.CCodeExpression get_param_spec (Bala.Property prop);
		public virtual Bala.CCodeExpression get_param_spec_cexpression (Bala.Property prop);
		public Bala.CCodeExpression get_parameter_cexpression (Bala.Parameter param);
		public abstract Bala.TargetValue get_parameter_cvalue (Bala.Parameter param);
		public Bala.CCodeConstant get_property_canonical_cconstant (Bala.Property prop);
		public Bala.CCodeConstant get_signal_canonical_constant (Bala.Signal sig, string? detail = null);
		public virtual Bala.CCodeExpression get_signal_creation (Bala.Signal sig, Bala.ObjectTypeSymbol type);
		public string get_symbol_lock_name (string symname);
		public Bala.LocalVariable get_temp_variable (Bala.DataType type, bool value_owned = true, Bala.CodeNode? node_reference = null, bool init = false);
		public Bala.CCodeExpression get_this_cexpression ();
		public Bala.CCodeExpression get_this_interface_cexpression (Bala.Interface iface);
		public unowned Bala.DataType? get_this_type ();
		public Bala.CCodeExpression get_type_id_expression (Bala.DataType type, bool is_chainup = false);
		public virtual Bala.CCodeExpression get_value_getter_function (Bala.DataType type_reference);
		public virtual Bala.CCodeExpression get_value_setter_function (Bala.DataType type_reference);
		public virtual Bala.CCodeExpression get_value_taker_function (Bala.DataType type_reference);
		public virtual string get_variable_array_length_cname (Bala.Variable variable, int dim);
		public Bala.CCodeExpression get_variable_cexpression (string name);
		public string get_variable_cname (string name);
		public Bala.CCodeExpression? handle_struct_argument (Bala.Parameter? param, Bala.Expression arg, Bala.CCodeExpression? cexpr);
		public static bool is_constant_ccode (Bala.CodeNode expr);
		public static bool is_constant_ccode_expression (Bala.CCodeExpression cexpr);
		public bool is_in_constructor ();
		public bool is_in_coroutine ();
		public bool is_in_destructor ();
		public bool is_lvalue_access_allowed (Bala.DataType type);
		public static bool is_pure_ccode_expression (Bala.CCodeExpression cexpr);
		public bool is_simple_struct_creation (Bala.Variable variable, Bala.Expression expr);
		public Bala.TargetValue load_temp_value (Bala.TargetValue lvalue);
		public abstract Bala.TargetValue load_this_parameter (Bala.TypeSymbol sym);
		public abstract Bala.TargetValue load_variable (Bala.Variable variable, Bala.TargetValue value, Bala.Expression? expr = null);
		public virtual bool method_has_wrapper (Bala.Method method);
		public unowned Bala.Block? next_closure_block (Bala.Symbol sym);
		public bool no_implicit_copy (Bala.DataType type);
		public void pop_context ();
		public void pop_function ();
		public void pop_line ();
		public void push_context (Bala.CCodeBaseModule.EmitContext emit_context);
		public void push_function (Bala.CCodeFunction func);
		public void push_line (Bala.SourceReference? source_reference);
		public virtual void register_dbus_info (Bala.CCodeBlock block, Bala.ObjectTypeSymbol bindable);
		public static bool requires_copy (Bala.DataType type);
		public static bool requires_destroy (Bala.DataType type);
		public bool requires_memset_init (Bala.Variable variable, out Bala.CCodeExpression? size);
		public void return_default_value (Bala.DataType return_type, bool on_error = false);
		public void return_out_parameter (Bala.Parameter param);
		public virtual Bala.CCodeExpression? serialize_expression (Bala.DataType type, Bala.CCodeExpression expr);
		public void store_property (Bala.Property prop, Bala.Expression? instance, Bala.TargetValue value);
		public Bala.TargetValue store_temp_value (Bala.TargetValue initializer, Bala.CodeNode node_reference, bool? value_owned = null);
		public abstract void store_value (Bala.TargetValue lvalue, Bala.TargetValue value, Bala.SourceReference? source_reference = null);
		public Bala.TargetValue transform_value (Bala.TargetValue value, Bala.DataType? target_type, Bala.CodeNode node);
		public bool variable_accessible_in_finally (Bala.LocalVariable local);
		public override void visit_addressof_expression (Bala.AddressofExpression expr);
		public override void visit_base_access (Bala.BaseAccess expr);
		public override void visit_binary_expression (Bala.BinaryExpression expr);
		public override void visit_block (Bala.Block b);
		public override void visit_boolean_literal (Bala.BooleanLiteral expr);
		public override void visit_cast_expression (Bala.CastExpression expr);
		public override void visit_character_literal (Bala.CharacterLiteral expr);
		public override void visit_class (Bala.Class cl);
		public override void visit_constant (Bala.Constant c);
		public override void visit_declaration_statement (Bala.DeclarationStatement stmt);
		public override void visit_delete_statement (Bala.DeleteStatement stmt);
		public override void visit_destructor (Bala.Destructor d);
		public override void visit_end_full_expression (Bala.Expression expr);
		public override void visit_enum (Bala.Enum en);
		public override void visit_expression (Bala.Expression expr);
		public override void visit_expression_statement (Bala.ExpressionStatement stmt);
		public override void visit_field (Bala.Field f);
		public override void visit_initializer_list (Bala.InitializerList list);
		public override void visit_integer_literal (Bala.IntegerLiteral expr);
		public override void visit_lambda_expression (Bala.LambdaExpression lambda);
		public override void visit_local_variable (Bala.LocalVariable local);
		public override void visit_lock_statement (Bala.LockStatement stmt);
		public void visit_member (Bala.Symbol m);
		public override void visit_named_argument (Bala.NamedArgument expr);
		public override void visit_null_literal (Bala.NullLiteral expr);
		public override void visit_object_creation_expression (Bala.ObjectCreationExpression expr);
		public override void visit_pointer_indirection (Bala.PointerIndirection expr);
		public override void visit_postfix_expression (Bala.PostfixExpression expr);
		public override void visit_property (Bala.Property prop);
		public override void visit_property_accessor (Bala.PropertyAccessor acc);
		public override void visit_real_literal (Bala.RealLiteral expr);
		public override void visit_reference_transfer_expression (Bala.ReferenceTransferExpression expr);
		public override void visit_regex_literal (Bala.RegexLiteral expr);
		public override void visit_return_statement (Bala.ReturnStatement stmt);
		public override void visit_sizeof_expression (Bala.SizeofExpression expr);
		public override void visit_source_file (Bala.SourceFile source_file);
		public override void visit_string_literal (Bala.StringLiteral expr);
		public override void visit_type_check (Bala.TypeCheck expr);
		public override void visit_typeof_expression (Bala.TypeofExpression expr);
		public override void visit_unary_expression (Bala.UnaryExpression expr);
		public override void visit_unlock_statement (Bala.UnlockStatement stmt);
		public Bala.CCodeFunction ccode { get; }
		public Bala.CodeContext context { get; set; }
		public Bala.CatchClause current_catch { get; set; }
		public Bala.Class? current_class { get; }
		public Bala.Block? current_closure_block { get; }
		public Bala.Constructor? current_constructor { get; }
		public Bala.Destructor? current_destructor { get; }
		public int current_inner_error_id { get; set; }
		public Bala.Method? current_method { get; }
		public bool current_method_inner_error { get; set; }
		public bool current_method_return { get; set; }
		public Bala.PropertyAccessor? current_property_accessor { get; }
		public Bala.DataType? current_return_type { get; }
		public Bala.Symbol current_symbol { get; }
		public Bala.TryStatement current_try { get; set; }
		public int current_try_id { get; set; }
		public Bala.TypeSymbol? current_type_symbol { get; }
		public bool in_creation_method { get; }
		public bool is_in_method_precondition { get; set; }
		public int next_temp_var_id { get; set; }
		public int next_try_id { get; set; }
		public Bala.ArrayList<Bala.TargetValue> temp_ref_values { get; }
		public Bala.Map<string,string> variable_name_map { get; }
	}
	[CCode (cheader_filename = "balacodegen.h")]
	public class CCodeCompiler {
		public CCodeCompiler ();
		public void compile (Bala.CodeContext context, string? cc_command, string[] cc_options);
	}
	[CCode (cheader_filename = "balacodegen.h")]
	public abstract class CCodeControlFlowModule : Bala.CCodeMethodModule {
		protected CCodeControlFlowModule ();
		public override void visit_break_statement (Bala.BreakStatement stmt);
		public override void visit_continue_statement (Bala.ContinueStatement stmt);
		public override void visit_foreach_statement (Bala.ForeachStatement stmt);
		public override void visit_if_statement (Bala.IfStatement stmt);
		public override void visit_loop (Bala.Loop stmt);
		public override void visit_switch_label (Bala.SwitchLabel label);
		public override void visit_switch_statement (Bala.SwitchStatement stmt);
	}
	[CCode (cheader_filename = "balacodegen.h")]
	public class CCodeDelegateModule : Bala.CCodeArrayModule {
		public CCodeDelegateModule ();
		public override void generate_delegate_declaration (Bala.Delegate d, Bala.CCodeFile decl_space);
		public string generate_delegate_wrapper (Bala.Method m, Bala.DelegateType dt, Bala.CodeNode? node);
		public override Bala.CCodeParameter generate_parameter (Bala.Parameter param, Bala.CCodeFile decl_space, Bala.Map<int,Bala.CCodeParameter> cparam_map, Bala.Map<int,Bala.CCodeExpression>? carg_map);
		public override Bala.CCodeExpression get_delegate_target_cexpression (Bala.Expression delegate_expr, out Bala.CCodeExpression delegate_target_destroy_notify);
		public override string get_delegate_target_cname (string delegate_cname);
		public override Bala.CCodeExpression get_delegate_target_cvalue (Bala.TargetValue value);
		public override string get_delegate_target_destroy_notify_cname (string delegate_cname);
		public override Bala.CCodeExpression get_delegate_target_destroy_notify_cvalue (Bala.TargetValue value);
		public override Bala.CCodeExpression get_implicit_cast_expression (Bala.CCodeExpression source_cexpr, Bala.DataType? expression_type, Bala.DataType? target_type, Bala.CodeNode? node);
		public override void visit_delegate (Bala.Delegate d);
	}
	[CCode (cheader_filename = "balacodegen.h")]
	public abstract class CCodeMemberAccessModule : Bala.CCodeControlFlowModule {
		protected CCodeMemberAccessModule ();
		public override Bala.TargetValue get_field_cvalue (Bala.Field field, Bala.TargetValue? instance);
		public override Bala.TargetValue get_local_cvalue (Bala.LocalVariable local);
		public override Bala.TargetValue get_parameter_cvalue (Bala.Parameter param);
		public override Bala.TargetValue load_field (Bala.Field field, Bala.TargetValue? instance, Bala.Expression? expr = null);
		public override Bala.TargetValue load_local (Bala.LocalVariable local, Bala.Expression? expr = null);
		public override Bala.TargetValue load_parameter (Bala.Parameter param, Bala.Expression? expr = null);
		public override Bala.TargetValue load_this_parameter (Bala.TypeSymbol sym);
		public override Bala.TargetValue load_variable (Bala.Variable variable, Bala.TargetValue value, Bala.Expression? expr = null);
		public override void visit_member_access (Bala.MemberAccess expr);
	}
	[CCode (cheader_filename = "balacodegen.h")]
	public class CCodeMethodCallModule : Bala.CCodeAssignmentModule {
		public CCodeMethodCallModule ();
		public override void visit_method_call (Bala.MethodCall expr);
	}
	[CCode (cheader_filename = "balacodegen.h")]
	public abstract class CCodeMethodModule : Bala.CCodeStructModule {
		protected CCodeMethodModule ();
		public void complete_async ();
		public override void generate_cparameters (Bala.Method m, Bala.CCodeFile decl_space, Bala.Map<int,Bala.CCodeParameter> cparam_map, Bala.CCodeFunction func, Bala.CCodeFunctionDeclarator? vdeclarator = null, Bala.Map<int,Bala.CCodeExpression>? carg_map = null, Bala.CCodeFunctionCall? vcall = null, int direction = 3);
		public override bool generate_method_declaration (Bala.Method m, Bala.CCodeFile decl_space);
		public virtual void generate_method_result_declaration (Bala.Method m, Bala.CCodeFile decl_space, Bala.CCodeFunction cfunc, Bala.Map<int,Bala.CCodeParameter> cparam_map, Bala.Map<int,Bala.CCodeExpression>? carg_map);
		public virtual Bala.CCodeParameter generate_parameter (Bala.Parameter param, Bala.CCodeFile decl_space, Bala.Map<int,Bala.CCodeParameter> cparam_map, Bala.Map<int,Bala.CCodeExpression>? carg_map);
		public void generate_vfunc (Bala.Method m, Bala.DataType return_type, Bala.Map<int,Bala.CCodeParameter> cparam_map, Bala.Map<int,Bala.CCodeExpression> carg_map, string suffix = "", int direction = 3);
		public override bool method_has_wrapper (Bala.Method method);
		public override void visit_creation_method (Bala.CreationMethod m);
		public override void visit_method (Bala.Method m);
	}
	[CCode (cheader_filename = "balacodegen.h")]
	public abstract class CCodeStructModule : Bala.CCodeBaseModule {
		protected CCodeStructModule ();
		public override void generate_struct_declaration (Bala.Struct st, Bala.CCodeFile decl_space);
		public override void visit_struct (Bala.Struct st);
	}
	[CCode (cheader_filename = "balacodegen.h")]
	public class CType : Bala.DataType {
		public CType (string ctype_name, string cdefault_value);
		public override Bala.DataType copy ();
		public string cdefault_value { get; set; }
		public string ctype_name { get; set; }
	}
	[CCode (cheader_filename = "balacodegen.h")]
	public class ClassRegisterFunction : Bala.TypeRegisterFunction {
		public ClassRegisterFunction (Bala.Class cl);
		public override Bala.SymbolAccessibility get_accessibility ();
		public override string get_base_finalize_func_name ();
		public override string get_base_init_func_name ();
		public override string get_class_finalize_func_name ();
		public override string get_class_init_func_name ();
		public override string? get_gtype_value_table_collect_value_function_name ();
		public override string? get_gtype_value_table_copy_function_name ();
		public override string? get_gtype_value_table_free_function_name ();
		public override string? get_gtype_value_table_init_function_name ();
		public override string? get_gtype_value_table_lcopy_value_function_name ();
		public override string? get_gtype_value_table_peek_pointer_function_name ();
		public override string get_instance_init_func_name ();
		public override string get_instance_struct_size ();
		public override string get_parent_type_name ();
		public override Bala.TypeSymbol get_type_declaration ();
		public override string get_type_flags ();
		public override Bala.CCodeFragment get_type_interface_init_declaration ();
		public override void get_type_interface_init_statements (Bala.CodeContext context, Bala.CCodeBlock block, bool plugin);
		public override string get_type_struct_name ();
		public weak Bala.Class class_reference { get; set; }
	}
	[CCode (cheader_filename = "balacodegen.h")]
	public class EnumRegisterFunction : Bala.TypeRegisterFunction {
		public EnumRegisterFunction (Bala.Enum en);
		public override Bala.SymbolAccessibility get_accessibility ();
		public override Bala.TypeSymbol get_type_declaration ();
		public weak Bala.Enum enum_reference { get; set; }
	}
	[CCode (cheader_filename = "balacodegen.h")]
	public class GAsyncModule : Bala.GtkModule {
		public GAsyncModule ();
		public void append_struct (Bala.CCodeStruct structure);
		public string generate_async_callback_wrapper ();
		public override void generate_cparameters (Bala.Method m, Bala.CCodeFile decl_space, Bala.Map<int,Bala.CCodeParameter> cparam_map, Bala.CCodeFunction func, Bala.CCodeFunctionDeclarator? vdeclarator = null, Bala.Map<int,Bala.CCodeExpression>? carg_map = null, Bala.CCodeFunctionCall? vcall = null, int direction = 3);
		public override bool generate_method_declaration (Bala.Method m, Bala.CCodeFile decl_space);
		public override string generate_ready_function (Bala.Method m);
		public override void generate_virtual_method_declaration (Bala.Method m, Bala.CCodeFile decl_space, Bala.CCodeStruct type_struct);
		public override void return_with_exception (Bala.CCodeExpression error_expr);
		public override void visit_creation_method (Bala.CreationMethod m);
		public override void visit_method (Bala.Method m);
		public override void visit_return_statement (Bala.ReturnStatement stmt);
		public override void visit_yield_statement (Bala.YieldStatement stmt);
	}
	[CCode (cheader_filename = "balacodegen.h")]
	public class GDBusClientModule : Bala.GDBusModule {
		public GDBusClientModule ();
		public override void generate_dynamic_method_wrapper (Bala.DynamicMethod method);
		public override void generate_interface_declaration (Bala.Interface iface, Bala.CCodeFile decl_space);
		public Bala.CCodeConstant get_dbus_timeout (Bala.Symbol symbol);
		public override void register_dbus_info (Bala.CCodeBlock block, Bala.ObjectTypeSymbol sym);
		public override void visit_interface (Bala.Interface iface);
		public override void visit_method_call (Bala.MethodCall expr);
	}
	[CCode (cheader_filename = "balacodegen.h")]
	public class GDBusModule : Bala.GVariantModule {
		public GDBusModule ();
		public bool dbus_method_uses_file_descriptor (Bala.Method method);
		public static string dbus_result_name (Bala.Method m);
		public static string? get_dbus_name (Bala.TypeSymbol symbol);
		public static string get_dbus_name_for_member (Bala.Symbol symbol);
		public static int get_dbus_timeout_for_member (Bala.Symbol symbol);
		protected Bala.CCodeExpression get_interface_info (Bala.ObjectTypeSymbol sym);
		public static bool is_dbus_no_reply (Bala.Method m);
		public static bool is_dbus_visible (Bala.CodeNode node);
		public void receive_dbus_value (Bala.DataType type, Bala.CCodeExpression message_expr, Bala.CCodeExpression iter_expr, Bala.CCodeExpression target_expr, Bala.Symbol? sym, Bala.CCodeExpression? error_expr = null, out bool may_fail = null);
		public void send_dbus_value (Bala.DataType type, Bala.CCodeExpression builder_expr, Bala.CCodeExpression expr, Bala.Symbol? sym);
		public override void visit_class (Bala.Class cl);
		public override void visit_error_domain (Bala.ErrorDomain edomain);
		public override void visit_interface (Bala.Interface iface);
	}
	[CCode (cheader_filename = "balacodegen.h")]
	public class GDBusServerModule : Bala.GDBusClientModule {
		public GDBusServerModule ();
		public override void generate_class_declaration (Bala.Class cl, Bala.CCodeFile decl_space);
		public override void generate_interface_declaration (Bala.Interface iface, Bala.CCodeFile decl_space);
		public override void register_dbus_info (Bala.CCodeBlock block, Bala.ObjectTypeSymbol sym);
		public override void visit_class (Bala.Class cl);
		public override void visit_interface (Bala.Interface iface);
		public override void visit_method_call (Bala.MethodCall expr);
	}
	[CCode (cheader_filename = "balacodegen.h")]
	public class GErrorModule : Bala.CCodeDelegateModule {
		public GErrorModule ();
		public override void add_simple_check (Bala.CodeNode node, bool always_fails = false);
		protected override void append_scope_free (Bala.Symbol sym, Bala.CodeNode? stop_at = null);
		public override void generate_error_domain_declaration (Bala.ErrorDomain edomain, Bala.CCodeFile decl_space);
		public virtual void return_with_exception (Bala.CCodeExpression error_expr);
		public override void visit_catch_clause (Bala.CatchClause clause);
		public override void visit_error_domain (Bala.ErrorDomain edomain);
		public override void visit_throw_statement (Bala.ThrowStatement stmt);
		public override void visit_try_statement (Bala.TryStatement stmt);
	}
	[CCode (cheader_filename = "balacodegen.h")]
	public class GIRWriter : Bala.CodeVisitor {
		public GIRWriter ();
		protected virtual string? get_class_comment (Bala.Class c);
		protected virtual string? get_constant_comment (Bala.Constant c);
		protected virtual string? get_delegate_comment (Bala.Delegate cb);
		protected virtual string? get_delegate_return_comment (Bala.Delegate cb);
		protected virtual string? get_enum_comment (Bala.Enum en);
		protected virtual string? get_enum_value_comment (Bala.EnumValue ev);
		protected virtual string? get_error_code_comment (Bala.ErrorCode ecode);
		protected virtual string? get_error_domain_comment (Bala.ErrorDomain edomain);
		protected virtual string? get_field_comment (Bala.Field f);
		protected virtual string? get_interface_comment (Bala.Interface iface);
		protected virtual string? get_method_comment (Bala.Method m);
		protected virtual string? get_method_return_comment (Bala.Method m);
		protected virtual string? get_parameter_comment (Bala.Parameter param);
		protected virtual string? get_property_comment (Bala.Property prop);
		protected virtual string? get_signal_comment (Bala.Signal sig);
		protected virtual string? get_signal_return_comment (Bala.Signal sig);
		protected virtual string? get_struct_comment (Bala.Struct st);
		public override void visit_class (Bala.Class cl);
		public override void visit_constant (Bala.Constant c);
		public override void visit_creation_method (Bala.CreationMethod m);
		public override void visit_delegate (Bala.Delegate cb);
		public override void visit_enum (Bala.Enum en);
		public override void visit_enum_value (Bala.EnumValue ev);
		public override void visit_error_code (Bala.ErrorCode ecode);
		public override void visit_error_domain (Bala.ErrorDomain edomain);
		public override void visit_field (Bala.Field f);
		public override void visit_interface (Bala.Interface iface);
		public override void visit_method (Bala.Method m);
		public override void visit_namespace (Bala.Namespace ns);
		public override void visit_property (Bala.Property prop);
		public override void visit_signal (Bala.Signal sig);
		public override void visit_source_file (Bala.SourceFile source_file);
		public override void visit_struct (Bala.Struct st);
		public void write_file (Bala.CodeContext context, string directory, string gir_filename, string gir_namespace, string gir_version, string package, string? gir_shared_library = null);
		public void write_includes ();
	}
	[CCode (cheader_filename = "balacodegen.h")]
	public class GLibValue : Bala.TargetValue {
		public Bala.CCodeExpression? array_length_cexpr;
		public Bala.List<Bala.CCodeExpression> array_length_cvalues;
		public bool array_null_terminated;
		public Bala.CCodeExpression? array_size_cvalue;
		public string? ctype;
		public Bala.CCodeExpression cvalue;
		public Bala.CCodeExpression? delegate_target_cvalue;
		public Bala.CCodeExpression? delegate_target_destroy_notify_cvalue;
		public bool lvalue;
		public bool non_null;
		public GLibValue (Bala.DataType? value_type = null, Bala.CCodeExpression? cvalue = null, bool lvalue = false);
		public void append_array_length_cvalue (Bala.CCodeExpression length_cvalue);
		public Bala.GLibValue copy ();
	}
	[CCode (cheader_filename = "balacodegen.h")]
	public class GObjectModule : Bala.GTypeModule {
		public GObjectModule ();
		public override void generate_class_init (Bala.Class cl);
		public override string get_dynamic_property_getter_cname (Bala.DynamicProperty prop);
		public override string get_dynamic_property_setter_cname (Bala.DynamicProperty prop);
		public override string get_dynamic_signal_cname (Bala.DynamicSignal node);
		public override string get_dynamic_signal_connect_after_wrapper_name (Bala.DynamicSignal sig);
		public override string get_dynamic_signal_connect_wrapper_name (Bala.DynamicSignal sig);
		public override void visit_class (Bala.Class cl);
		public override void visit_constructor (Bala.Constructor c);
		public override void visit_method_call (Bala.MethodCall expr);
		public override void visit_property (Bala.Property prop);
	}
	[CCode (cheader_filename = "balacodegen.h")]
	public class GSignalModule : Bala.GObjectModule {
		public GSignalModule ();
		public override Bala.CCodeExpression get_signal_creation (Bala.Signal sig, Bala.ObjectTypeSymbol type);
		public override void visit_element_access (Bala.ElementAccess expr);
		public override void visit_member_access (Bala.MemberAccess expr);
		public override void visit_method_call (Bala.MethodCall expr);
		public override void visit_signal (Bala.Signal sig);
	}
	[CCode (cheader_filename = "balacodegen.h")]
	public class GTypeModule : Bala.GErrorModule {
		public GTypeModule ();
		public override void create_type_check_statement (Bala.CodeNode method_node, Bala.DataType ret_type, Bala.TypeSymbol t, bool non_null, string var_name);
		public virtual void end_instance_init (Bala.Class cl);
		public override void generate_class_declaration (Bala.Class cl, Bala.CCodeFile decl_space);
		public virtual void generate_class_init (Bala.Class cl);
		public override void generate_class_struct_declaration (Bala.Class cl, Bala.CCodeFile decl_space);
		public override void generate_interface_declaration (Bala.Interface iface, Bala.CCodeFile decl_space);
		public override bool generate_method_declaration (Bala.Method m, Bala.CCodeFile decl_space);
		public override Bala.CCodeParameter generate_parameter (Bala.Parameter param, Bala.CCodeFile decl_space, Bala.Map<int,Bala.CCodeParameter> cparam_map, Bala.Map<int,Bala.CCodeExpression>? carg_map);
		public virtual void generate_virtual_method_declaration (Bala.Method m, Bala.CCodeFile decl_space, Bala.CCodeStruct type_struct);
		public override Bala.CCodeExpression get_param_spec (Bala.Property prop);
		public override Bala.CCodeExpression get_param_spec_cexpression (Bala.Property prop);
		public override void visit_cast_expression (Bala.CastExpression expr);
		public override void visit_class (Bala.Class cl);
		public override void visit_enum (Bala.Enum en);
		public override void visit_interface (Bala.Interface iface);
		public override void visit_method_call (Bala.MethodCall expr);
		public override void visit_property (Bala.Property prop);
		public override void visit_struct (Bala.Struct st);
	}
	[CCode (cheader_filename = "balacodegen.h")]
	public class GValueModule : Bala.GAsyncModule {
		public GValueModule ();
		public override Bala.CCodeExpression get_value_getter_function (Bala.DataType type_reference);
		public override Bala.CCodeExpression get_value_setter_function (Bala.DataType type_reference);
		public override Bala.CCodeExpression get_value_taker_function (Bala.DataType type_reference);
		public override void visit_cast_expression (Bala.CastExpression expr);
	}
	[CCode (cheader_filename = "balacodegen.h")]
	public class GVariantModule : Bala.GValueModule {
		public GVariantModule ();
		public override Bala.CCodeExpression? deserialize_expression (Bala.DataType type, Bala.CCodeExpression variant_expr, Bala.CCodeExpression? expr, Bala.CCodeExpression? error_expr = null, out bool may_fail = null);
		public override bool generate_enum_declaration (Bala.Enum en, Bala.CCodeFile decl_space);
		public Bala.CCodeFunction generate_enum_from_string_function (Bala.Enum en);
		public Bala.CCodeFunction generate_enum_from_string_function_declaration (Bala.Enum en);
		public Bala.CCodeFunction generate_enum_to_string_function (Bala.Enum en);
		public Bala.CCodeFunction generate_enum_to_string_function_declaration (Bala.Enum en);
		public static string? get_dbus_signature (Bala.Symbol symbol);
		public void read_expression (Bala.DataType type, Bala.CCodeExpression iter_expr, Bala.CCodeExpression target_expr, Bala.Symbol? sym, Bala.CCodeExpression? error_expr = null, out bool may_fail = null);
		public override Bala.CCodeExpression? serialize_expression (Bala.DataType type, Bala.CCodeExpression expr);
		public override void visit_cast_expression (Bala.CastExpression expr);
		public override void visit_enum (Bala.Enum en);
		public void write_expression (Bala.DataType type, Bala.CCodeExpression builder_expr, Bala.CCodeExpression expr, Bala.Symbol? sym);
	}
	[CCode (cheader_filename = "balacodegen.h")]
	public class GtkModule : Bala.GSignalModule {
		public GtkModule ();
		public override void end_instance_init (Bala.Class cl);
		public override void generate_class_init (Bala.Class cl);
		public override void visit_field (Bala.Field f);
		public override void visit_method (Bala.Method m);
		public override void visit_property (Bala.Property prop);
	}
	[CCode (cheader_filename = "balacodegen.h")]
	public class InterfaceRegisterFunction : Bala.TypeRegisterFunction {
		public InterfaceRegisterFunction (Bala.Interface iface);
		public override Bala.SymbolAccessibility get_accessibility ();
		public override string get_base_finalize_func_name ();
		public override string get_base_init_func_name ();
		public override string get_class_finalize_func_name ();
		public override string get_class_init_func_name ();
		public override string get_instance_init_func_name ();
		public override string get_instance_struct_size ();
		public override string get_parent_type_name ();
		public override Bala.TypeSymbol get_type_declaration ();
		public override void get_type_interface_init_statements (Bala.CodeContext context, Bala.CCodeBlock block, bool plugin);
		public override string get_type_struct_name ();
		public weak Bala.Interface interface_reference { get; set; }
	}
	[CCode (cheader_filename = "balacodegen.h")]
	public class StructRegisterFunction : Bala.TypeRegisterFunction {
		public StructRegisterFunction (Bala.Struct st);
		public override Bala.SymbolAccessibility get_accessibility ();
		public override Bala.TypeSymbol get_type_declaration ();
		public weak Bala.Struct struct_reference { get; set; }
	}
	[CCode (cheader_filename = "balacodegen.h")]
	public abstract class TypeRegisterFunction {
		protected TypeRegisterFunction ();
		public abstract Bala.SymbolAccessibility get_accessibility ();
		public virtual string get_base_finalize_func_name ();
		public virtual string get_base_init_func_name ();
		public virtual string get_class_finalize_func_name ();
		public virtual string get_class_init_func_name ();
		public Bala.CCodeFragment get_declaration ();
		public Bala.CCodeFragment get_definition ();
		public virtual string? get_gtype_value_table_collect_value_function_name ();
		public virtual string? get_gtype_value_table_copy_function_name ();
		public virtual string? get_gtype_value_table_free_function_name ();
		public virtual string? get_gtype_value_table_init_function_name ();
		public virtual string? get_gtype_value_table_lcopy_value_function_name ();
		public virtual string? get_gtype_value_table_peek_pointer_function_name ();
		public virtual string get_instance_init_func_name ();
		public virtual string get_instance_struct_size ();
		public virtual string get_parent_type_name ();
		public Bala.CCodeFragment get_source_declaration ();
		public abstract Bala.TypeSymbol get_type_declaration ();
		public virtual string get_type_flags ();
		public virtual Bala.CCodeFragment get_type_interface_init_declaration ();
		public virtual void get_type_interface_init_statements (Bala.CodeContext context, Bala.CCodeBlock block, bool plugin);
		public virtual string get_type_struct_name ();
		public void init_from_type (Bala.CodeContext context, bool plugin, bool declaration_only);
	}
	[CCode (cheader_filename = "balacodegen.h")]
	public static void append_array_length (Bala.Expression expr, Bala.CCodeExpression size);
	[CCode (cheader_filename = "balacodegen.h")]
	public static unowned Bala.CCodeExpression? get_array_length_cexpr (Bala.TargetValue value);
	[CCode (cheader_filename = "balacodegen.h")]
	public static unowned Bala.List<Bala.CCodeExpression>? get_array_lengths (Bala.Expression expr);
	[CCode (cheader_filename = "balacodegen.h")]
	public static bool get_array_null_terminated (Bala.TargetValue value);
	[CCode (cheader_filename = "balacodegen.h")]
	public static unowned Bala.CCodeExpression? get_array_size_cvalue (Bala.TargetValue value);
	[CCode (cheader_filename = "balacodegen.h")]
	public static bool get_ccode_array_length (Bala.CodeNode node);
	[CCode (cheader_filename = "balacodegen.h")]
	public static string? get_ccode_array_length_expr (Bala.CodeNode node);
	[CCode (cheader_filename = "balacodegen.h")]
	public static string? get_ccode_array_length_name (Bala.CodeNode node);
	[CCode (cheader_filename = "balacodegen.h")]
	public static double get_ccode_array_length_pos (Bala.CodeNode node);
	[CCode (cheader_filename = "balacodegen.h")]
	public static string get_ccode_array_length_type (Bala.CodeNode node);
	[CCode (cheader_filename = "balacodegen.h")]
	public static bool get_ccode_array_null_terminated (Bala.CodeNode node);
	[CCode (cheader_filename = "balacodegen.h")]
	public static double get_ccode_async_result_pos (Bala.Method m);
	[CCode (cheader_filename = "balacodegen.h")]
	public static string get_ccode_class_get_private_function (Bala.Class cl);
	[CCode (cheader_filename = "balacodegen.h")]
	public static string get_ccode_class_type_check_function (Bala.Class cl);
	[CCode (cheader_filename = "balacodegen.h")]
	public static string get_ccode_class_type_function (Bala.Class cl);
	[CCode (cheader_filename = "balacodegen.h")]
	public static bool get_ccode_concrete_accessor (Bala.Property p);
	[CCode (cheader_filename = "balacodegen.h")]
	public static string get_ccode_const_name (Bala.CodeNode node);
	[CCode (cheader_filename = "balacodegen.h")]
	public static string get_ccode_constructv_name (Bala.CreationMethod m);
	[CCode (cheader_filename = "balacodegen.h")]
	public static string get_ccode_copy_function (Bala.TypeSymbol sym);
	[CCode (cheader_filename = "balacodegen.h")]
	public static string get_ccode_default_value (Bala.TypeSymbol sym);
	[CCode (cheader_filename = "balacodegen.h")]
	public static string get_ccode_default_value_on_error (Bala.TypeSymbol sym);
	[CCode (cheader_filename = "balacodegen.h")]
	public static bool get_ccode_delegate_target (Bala.CodeNode node);
	[CCode (cheader_filename = "balacodegen.h")]
	public static string get_ccode_delegate_target_destroy_notify_name (Bala.Variable variable);
	[CCode (cheader_filename = "balacodegen.h")]
	public static string get_ccode_delegate_target_name (Bala.Variable variable);
	[CCode (cheader_filename = "balacodegen.h")]
	public static double get_ccode_delegate_target_pos (Bala.CodeNode node);
	[CCode (cheader_filename = "balacodegen.h")]
	public static string get_ccode_destroy_function (Bala.TypeSymbol sym);
	[CCode (cheader_filename = "balacodegen.h")]
	public static double get_ccode_destroy_notify_pos (Bala.CodeNode node);
	[CCode (cheader_filename = "balacodegen.h")]
	public static string? get_ccode_dup_function (Bala.TypeSymbol sym);
	[CCode (cheader_filename = "balacodegen.h")]
	public static double get_ccode_error_pos (Bala.Callable c);
	[CCode (cheader_filename = "balacodegen.h")]
	public static string get_ccode_feature_test_macros (Bala.Symbol sym);
	[CCode (cheader_filename = "balacodegen.h")]
	public static bool get_ccode_finish_instance (Bala.Method m);
	[CCode (cheader_filename = "balacodegen.h")]
	public static string get_ccode_finish_name (Bala.Method m);
	[CCode (cheader_filename = "balacodegen.h")]
	public static string get_ccode_finish_real_name (Bala.Method m);
	[CCode (cheader_filename = "balacodegen.h")]
	public static string get_ccode_finish_vfunc_name (Bala.Method m);
	[CCode (cheader_filename = "balacodegen.h")]
	public static string get_ccode_free_function (Bala.TypeSymbol sym);
	[CCode (cheader_filename = "balacodegen.h")]
	public static bool get_ccode_free_function_address_of (Bala.Class cl);
	[CCode (cheader_filename = "balacodegen.h")]
	public static double get_ccode_generic_type_pos (Bala.Method m);
	[CCode (cheader_filename = "balacodegen.h")]
	public static string get_ccode_get_value_function (Bala.CodeNode sym);
	[CCode (cheader_filename = "balacodegen.h")]
	public static bool get_ccode_has_copy_function (Bala.Struct st);
	[CCode (cheader_filename = "balacodegen.h")]
	public static bool get_ccode_has_destroy_function (Bala.Struct st);
	[CCode (cheader_filename = "balacodegen.h")]
	public static bool get_ccode_has_emitter (Bala.Signal sig);
	[CCode (cheader_filename = "balacodegen.h")]
	public static bool get_ccode_has_generic_type_parameter (Bala.Method m);
	[CCode (cheader_filename = "balacodegen.h")]
	public static bool get_ccode_has_new_function (Bala.Method m);
	[CCode (cheader_filename = "balacodegen.h")]
	public static bool get_ccode_has_type_id (Bala.TypeSymbol sym);
	[CCode (cheader_filename = "balacodegen.h")]
	public static string get_ccode_header_filenames (Bala.Symbol sym);
	[CCode (cheader_filename = "balacodegen.h")]
	public static double get_ccode_instance_pos (Bala.CodeNode node);
	[CCode (cheader_filename = "balacodegen.h")]
	public static bool get_ccode_is_gboxed (Bala.TypeSymbol sym);
	[CCode (cheader_filename = "balacodegen.h")]
	public static string get_ccode_lower_case_name (Bala.CodeNode node, string? infix = null);
	[CCode (cheader_filename = "balacodegen.h")]
	public static string get_ccode_lower_case_prefix (Bala.Symbol sym);
	[CCode (cheader_filename = "balacodegen.h")]
	public static string get_ccode_lower_case_suffix (Bala.Symbol sym);
	[CCode (cheader_filename = "balacodegen.h")]
	public static string get_ccode_marshaller_type_name (Bala.CodeNode node);
	[CCode (cheader_filename = "balacodegen.h")]
	public static string get_ccode_name (Bala.CodeNode node);
	[CCode (cheader_filename = "balacodegen.h")]
	public static bool get_ccode_no_accessor_method (Bala.Property p);
	[CCode (cheader_filename = "balacodegen.h")]
	public static bool get_ccode_no_wrapper (Bala.Method m);
	[CCode (cheader_filename = "balacodegen.h")]
	public static string get_ccode_param_spec_function (Bala.CodeNode sym);
	[CCode (cheader_filename = "balacodegen.h")]
	public static double get_ccode_pos (Bala.Parameter param);
	[CCode (cheader_filename = "balacodegen.h")]
	public static string get_ccode_prefix (Bala.Symbol sym);
	[CCode (cheader_filename = "balacodegen.h")]
	public static string get_ccode_quark_name (Bala.ErrorDomain edomain);
	[CCode (cheader_filename = "balacodegen.h")]
	public static string get_ccode_real_name (Bala.Symbol sym);
	[CCode (cheader_filename = "balacodegen.h")]
	public static string get_ccode_ref_function (Bala.TypeSymbol sym);
	[CCode (cheader_filename = "balacodegen.h")]
	public static bool get_ccode_ref_function_void (Bala.Class cl);
	[CCode (cheader_filename = "balacodegen.h")]
	public static string get_ccode_ref_sink_function (Bala.ObjectTypeSymbol sym);
	[CCode (cheader_filename = "balacodegen.h")]
	public static string get_ccode_sentinel (Bala.Method m);
	[CCode (cheader_filename = "balacodegen.h")]
	public static string get_ccode_set_value_function (Bala.CodeNode sym);
	[CCode (cheader_filename = "balacodegen.h")]
	public static bool get_ccode_simple_generics (Bala.Method m);
	[CCode (cheader_filename = "balacodegen.h")]
	public static string get_ccode_take_value_function (Bala.CodeNode sym);
	[CCode (cheader_filename = "balacodegen.h")]
	public static string? get_ccode_type (Bala.CodeNode node);
	[CCode (cheader_filename = "balacodegen.h")]
	public static string get_ccode_type_cast_function (Bala.ObjectTypeSymbol sym);
	[CCode (cheader_filename = "balacodegen.h")]
	public static string get_ccode_type_check_function (Bala.TypeSymbol sym);
	[CCode (cheader_filename = "balacodegen.h")]
	public static string get_ccode_type_function (Bala.TypeSymbol sym);
	[CCode (cheader_filename = "balacodegen.h")]
	public static string get_ccode_type_get_function (Bala.ObjectTypeSymbol sym);
	[CCode (cheader_filename = "balacodegen.h")]
	public static string get_ccode_type_id (Bala.CodeNode node);
	[CCode (cheader_filename = "balacodegen.h")]
	public static string get_ccode_type_name (Bala.ObjectTypeSymbol sym);
	[CCode (cheader_filename = "balacodegen.h")]
	public static string get_ccode_unref_function (Bala.ObjectTypeSymbol sym);
	[CCode (cheader_filename = "balacodegen.h")]
	public static string get_ccode_upper_case_name (Bala.Symbol sym, string? infix = null);
	[CCode (cheader_filename = "balacodegen.h")]
	public static string get_ccode_vfunc_name (Bala.Method m);
	[CCode (cheader_filename = "balacodegen.h")]
	public static unowned string? get_ctype (Bala.TargetValue value);
	[CCode (cheader_filename = "balacodegen.h")]
	public static unowned Bala.CCodeExpression? get_cvalue (Bala.Expression expr);
	[CCode (cheader_filename = "balacodegen.h")]
	public static unowned Bala.CCodeExpression? get_cvalue_ (Bala.TargetValue value);
	[CCode (cheader_filename = "balacodegen.h")]
	public static unowned Bala.CCodeExpression? get_delegate_target (Bala.Expression expr);
	[CCode (cheader_filename = "balacodegen.h")]
	public static unowned Bala.CCodeExpression? get_delegate_target_destroy_notify (Bala.Expression expr);
	[CCode (cheader_filename = "balacodegen.h")]
	public static bool get_lvalue (Bala.TargetValue value);
	[CCode (cheader_filename = "balacodegen.h")]
	public static bool get_non_null (Bala.TargetValue value);
	[CCode (cheader_filename = "balacodegen.h")]
	public static bool is_free_function_address_of (Bala.DataType type);
	[CCode (cheader_filename = "balacodegen.h")]
	public static bool is_ref_function_void (Bala.DataType type);
	[CCode (cheader_filename = "balacodegen.h")]
	public static bool is_reference_counting (Bala.TypeSymbol sym);
	[CCode (cheader_filename = "balacodegen.h")]
	public static void set_array_size_cvalue (Bala.TargetValue value, Bala.CCodeExpression? cvalue);
	[CCode (cheader_filename = "balacodegen.h")]
	public static void set_cvalue (Bala.Expression expr, Bala.CCodeExpression? cvalue);
	[CCode (cheader_filename = "balacodegen.h")]
	public static void set_delegate_target (Bala.Expression expr, Bala.CCodeExpression? delegate_target);
	[CCode (cheader_filename = "balacodegen.h")]
	public static void set_delegate_target_destroy_notify (Bala.Expression expr, Bala.CCodeExpression? destroy_notify);
}
